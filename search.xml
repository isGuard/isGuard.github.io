<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>VMware虚拟机系统Ubuntu安装VMware tools工具</title>
    <url>/2020/f0050326/</url>
    <content><![CDATA[<h1 id="VMware虚拟机系统Ubuntu安装VMware-tools工具"><a href="#VMware虚拟机系统Ubuntu安装VMware-tools工具" class="headerlink" title="VMware虚拟机系统Ubuntu安装VMware tools工具"></a>VMware虚拟机系统Ubuntu安装VMware tools工具</h1><p>在VMware Workstation虚拟机中，如果虚拟Ubuntu系统未安装vmware tools工具，鼠标操作起来将不是很方便，需要使用热键Ctrl+Alt热键切换出来。下面，介绍一下如何在ubuntu虚拟机中安装vmware tools工具。</p>
<p>启动vmware workstation软件，运行ubuntu虚拟操作系统，登陆进入ubuntu桌面。选择“虚拟机”-&gt;“安装vmware tools”VMware tools</p>
<p><img data-src="/2020/f0050326/image-20200403172358617.png" alt="image-20200403172358617"></p>
<p>双击桌面的“vmware tools”,打开vmware tools安装介质。右键选择vmwaretools的gz压缩包，</p>
<p>将该文件复制到<code>下载文件夹</code>，<code>至于复制到什么文件夹。大家可以自行选择</code>。</p>
<p>![image-20200403172438473](../../../../笔记/Linux/Ubuntu/VMware虚拟机系统Ubuntu安装VMware tools工具/image-20200403172438473.png)</p>
<p><img data-src="/2020/f0050326/image-20200403173538440.png" alt="image-20200403173538440"></p>
<p>右键点击该文件，选择“提取到此处”</p>
<p><img data-src="/2020/f0050326/image-20200403173638585.png" alt="image-20200403173638585"></p>
<p>打开解压后的vmwaretools文件夹，右键点击vmware-tools-distrib文件夹，选择“在终端打开”</p>
<p><img data-src="/2020/f0050326/image-20200403173732626.png" alt="image-20200403173732626"></p>
<p>在终端的命令窗口当中，输入<code>sudo ./vmware-tools-distrib/vmware-install.pl</code>命令。输入用户密码回车开始安装。出现第一个画面时，选择“<code>y</code>”回车。</p>
<p><img data-src="/2020/f0050326/image-20200403174051861.png" alt="image-20200403174051861"></p>
<p>一路回车进行安装，出现以下的画面，安装完成。</p>
<p>![image-20200403174218198](../../../../笔记/Linux/Ubuntu/VMware虚拟机系统Ubuntu安装VMware tools工具/image-20200403174218198.png)</p>
<p><code>重启电脑，重新进入，安装vmware tools即生效。鼠标和复制粘贴就生效了。</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>修改Ubuntu分辨率</title>
    <url>/2020/7a35f68d/</url>
    <content><![CDATA[<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p><img data-src="/2020/7a35f68d/image-20200403165720339.png" alt="image-20200403165720339"></p>
<h2 id="点设备"><a href="#点设备" class="headerlink" title="点设备"></a>点设备</h2><p><img data-src="/2020/7a35f68d/image-20200403165813924.png" alt="image-20200403165813924"></p>
<h2 id="修改分辨率"><a href="#修改分辨率" class="headerlink" title="修改分辨率"></a>修改分辨率</h2><p><img data-src="/2020/7a35f68d/image-20200403165857456.png" alt="image-20200403165857456"></p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><img data-src="/2020/7a35f68d/image-20200403165934815.png" alt="image-20200403165934815"></p>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>修改Ubuntu的系统源</title>
    <url>/2020/b1018dba/</url>
    <content><![CDATA[<p><img data-src="/2020/b1018dba/image-20200403171326693.png" alt="image-20200403171326693"></p>
<p>点击软件和更新</p>
<p><img data-src="/2020/b1018dba/image-20200403171359402.png" alt="image-20200403171359402"></p>
<p>点击中国的服务器</p>
<p><img data-src="/2020/b1018dba/image-20200403171423549.png" alt="image-20200403171423549"></p>
<p>点击其他站点</p>
<p><img data-src="/2020/b1018dba/image-20200403171516801.png" alt="image-20200403171516801"></p>
<p>测试或者选择你觉得可以快一点的镜像</p>
<p><img data-src="/2020/b1018dba/image-20200403171608393.png" alt="image-20200403171608393"></p>
<p>点击确定输入用户密码就好</p>
<p><img data-src="/2020/b1018dba/image-20200403171637121.png" alt="image-20200403171637121"></p>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Ubuntu</title>
    <url>/2020/a7df3577/</url>
    <content><![CDATA[<h1 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h1><p>准备工作</p>
<ul>
<li>需要VMware</li>
</ul>
<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p>Ubuntu下载地址:<a href="http://releases.ubuntu.com/" target="_blank" rel="noopener">http://releases.ubuntu.com/</a></p>
<p><img data-src="/2020/a7df3577/image-20200403154017477.png" alt="image-20200403154017477"></p>
<p><img data-src="/2020/a7df3577/image-20200403155024305.png" alt="image-20200403155024305"></p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><img data-src="/2020/a7df3577/image-20200403154049421.png" alt="image-20200403154049421"></p>
<h2 id="准备虚拟机"><a href="#准备虚拟机" class="headerlink" title="准备虚拟机"></a>准备虚拟机</h2><p>在下载的时候，现在VMware里面准备好虚拟机</p>
<h3 id="创建新的虚拟机"><a href="#创建新的虚拟机" class="headerlink" title="创建新的虚拟机"></a>创建新的虚拟机</h3><p><img data-src="/2020/a7df3577/image-20200403154231003.png" alt="image-20200403154231003"></p>
<h4 id="创建典型的即可"><a href="#创建典型的即可" class="headerlink" title="创建典型的即可"></a>创建典型的即可</h4><p><img data-src="/2020/a7df3577/image-20200403154423758.png" alt="image-20200403154423758"></p>
<h4 id="创建一个空的虚拟机"><a href="#创建一个空的虚拟机" class="headerlink" title="创建一个空的虚拟机"></a>创建一个空的虚拟机</h4><p><img data-src="/2020/a7df3577/image-20200403154528596.png" alt="image-20200403154528596"></p>
<h4 id="创建64位的虚拟机"><a href="#创建64位的虚拟机" class="headerlink" title="创建64位的虚拟机"></a>创建64位的虚拟机</h4><p>因为默认下载的为64位的</p>
<p><img data-src="/2020/a7df3577/image-20200403154642694.png" alt="image-20200403154642694"></p>
<p>所在在选择系统的时候选择64位的系统</p>
<p><img data-src="/2020/a7df3577/image-20200403154754885.png" alt="image-20200403154754885"></p>
<h4 id="安装的位置"><a href="#安装的位置" class="headerlink" title="安装的位置"></a>安装的位置</h4><p>找自己电脑比较空旷的磁盘安装（预估一下差不多40G~60G）</p>
<table>
<thead>
<tr>
<th><strong>挂载点(目录)</strong></th>
<th><strong>建议大小</strong></th>
<th><strong>格式</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td>20G左右</td>
<td>ext4</td>
<td>根目录</td>
</tr>
<tr>
<td>/home</td>
<td>越大越好</td>
<td>ext4</td>
<td>用户工作目录，用户存储的数据，文件，安装的软件都存放在这儿</td>
</tr>
<tr>
<td>/boot</td>
<td>300M左右</td>
<td>ext4</td>
<td>一般几百M，主要存放linux内核及一些引导文件</td>
</tr>
<tr>
<td>/tmp</td>
<td>10G左右</td>
<td>ext4</td>
<td>系统的一些临时文件</td>
</tr>
<tr>
<td>/swap</td>
<td>8G左右</td>
<td>swap交换空间</td>
<td>相当于虚拟内存</td>
</tr>
</tbody></table>
<p><img data-src="/2020/a7df3577/image-20200403154918626.png" alt="image-20200403154918626"></p>
<h3 id="选择磁盘容量"><a href="#选择磁盘容量" class="headerlink" title="选择磁盘容量"></a>选择磁盘容量</h3><p>这个根据自己的电脑和需求来选择，越大越好，推荐使用多个文件</p>
<p><img data-src="/2020/a7df3577/image-20200403155511139.png" alt="image-20200403155511139"></p>
<p>然后下一步，就好了</p>
<p><img data-src="/2020/a7df3577/image-20200403155616418.png" alt="image-20200403155616418"></p>
<h2 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h2><p>编辑虚拟机的设置</p>
<p><img data-src="/2020/a7df3577/image-20200403155721067.png" alt="image-20200403155721067"></p>
<p>修改内存、处理器和ISO镜像的位置（等文件下载完成就可以选择了）</p>
<p><img data-src="/2020/a7df3577/image-20200403160005254.png" alt="image-20200403160005254"></p>
<p><img data-src="/2020/a7df3577/image-20200403160112674.png" alt="image-20200403160112674"></p>
<p>然后点开启虚拟机就等待了</p>
<h2 id="安装Ubuntu-1"><a href="#安装Ubuntu-1" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h2><p>开始的页面最下面有中文（还是比较友好的）</p>
<p><img data-src="/2020/a7df3577/image-20200403160327152.png" alt="image-20200403160327152"></p>
<p>点安装Ubuntu</p>
<p><img data-src="/2020/a7df3577/image-20200403160409883.png" alt="image-20200403160409883"></p>
<p>点继续，这个就看自己的需求了（推荐，正常安装+取消安装Ubuntu时下载更新）</p>
<p><img data-src="/2020/a7df3577/image-20200403160543542.png" alt="image-20200403160543542"></p>
<p>点继续</p>
<p><img data-src="/2020/a7df3577/image-20200403160734500.png" alt="image-20200403160734500"></p>
<p>点现在安装，有对话框直接点继续，注意这里时点击中国的图片</p>
<p><img data-src="/2020/a7df3577/image-20200403160847663.png" alt="image-20200403160847663"></p>
<p>点继续，这个很明白，给你自己写一个用户名和密码</p>
<p><img data-src="/2020/a7df3577/image-20200403160922375.png" alt="image-20200403160922375"></p>
<p>输入好后点，继续，然后等待安装，安装文成后最好重启</p>
<p>友情提式：·<code>Ctrl+Alt</code>切换出鼠标</p>
<p>关闭虚拟机后，修改镜像</p>
<p><img data-src="/2020/a7df3577/image-20200403165402354.png" alt="image-20200403165402354"></p>
<p>到此就完成安装了</p>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>继承</title>
    <url>/2020/11d8b32d/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那一个类即可。如图所示：</p>
<p><img data-src="/2020/11d8b32d/image-20200406161705307.png" alt="image-20200406161705307"></p>
<p>其中，多个类可以称为<strong>子类</strong>，单独那一个类称为<strong>父类、超类（superclass）</strong>或者<strong>基类</strong>。</p>
<p>继承描述的是事物之间的所属关系，这种关系是：<code>is-a</code>的关系。例如，图中兔子属于食草动物，食草动物属于动物。可见，父类更通用，子类更具体。我们通过继承，可以使多种事物之间形成一种关系体系。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li><strong>继承</strong>：就是子类继承父类的<strong>属性和行为</strong>，使得子类对象具有与父类相同的属性、相同的行为。子类可以直接访问父类中的<strong>非私有</strong>的属性和行为。</li>
</ul>
<h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ol>
<li>提高<strong>代码的复用性</strong>（共性抽取）</li>
<li>类与类之间产生了关系，是<strong>多态的前提</strong>（没有继承，就没有多态）</li>
</ol>
<p><img data-src="/2020/11d8b32d/01-%E7%BB%A7%E6%89%BF%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.png" alt="01-继承的基本概念"></p>
<h2 id="继承的格式"><a href="#继承的格式" class="headerlink" title="继承的格式"></a>继承的格式</h2><ul>
<li><p>通过<code>extends</code>关键字，可以声明一个子类继承另外一个父类</p>
</li>
<li><p>格式</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类</span>&#123;</span><br><span class="line">  <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类</span>&#123;</span><br><span class="line">  <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.lectures();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lectures</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在给学生讲课"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承后的特点–成员变量"><a href="#继承后的特点–成员变量" class="headerlink" title="继承后的特点–成员变量"></a>继承后的特点–成员变量</h2><h3 id="成员变量不重名"><a href="#成员变量不重名" class="headerlink" title="成员变量不重名"></a>成员变量不重名</h3><p>如果子类父类中出现不重名的成员变量，这时的访问是没有影响的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu fu = <span class="keyword">new</span> Fu();</span><br><span class="line">        System.out.println(fu.numfu);</span><br><span class="line">        Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line">        System.out.println(zi.mumzi+<span class="string">":"</span>+zi.numfu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numfu = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mumzi = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="成员变量重名"><a href="#成员变量重名" class="headerlink" title="成员变量重名"></a>成员变量重名</h3><p>子类父类中出现重名的成员变量，访问有两种方式</p>
<ol>
<li>直接通过子类对象访问成员变量<ul>
<li>规则：等号左边是谁，就优先用谁，如果没有则向上找</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu fu = <span class="keyword">new</span> Fu();</span><br><span class="line">        System.out.println(fu.num); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">        Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line">        System.out.println(zi.num); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>简介通过成员方法访问成员变量<ul>
<li>该方法属于谁，就优先用谁，没有则想上找</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu fu = <span class="keyword">new</span> Fu();</span><br><span class="line">        fu.methodFu(); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">        Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line">        zi.methodZi(); <span class="comment">// 10</span></span><br><span class="line">        zi.methodFu(); <span class="comment">// 100</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodZi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="区分子类方法中重名的三种变量"><a href="#区分子类方法中重名的三种变量" class="headerlink" title="区分子类方法中重名的三种变量"></a>区分子类方法中重名的三种变量</h3><ul>
<li>成员变量</li>
<li>本类的成员变量</li>
<li>父类的成员变量</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi zi =<span class="keyword">new</span> Zi();</span><br><span class="line">        zi.method();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">        System.out.println(num); <span class="comment">// 局部变量</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.num); <span class="comment">// 本类的成员变量</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.num); <span class="comment">// 父类的成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承后的特点–成员方法"><a href="#继承后的特点–成员方法" class="headerlink" title="继承后的特点–成员方法"></a>继承后的特点–成员方法</h2><p>在父子类的继承关系中，创建子类对象，访问成员方法的规则：</p>
<ul>
<li>创建的对象是谁，就优先用谁，如果没有则想上找</li>
<li>无论是成员方法还是成员变量，如果没有都是向上找父类，绝对不会向下找子类的</li>
</ul>
<h3 id="成员方法不重名"><a href="#成员方法不重名" class="headerlink" title="成员方法不重名"></a>成员方法不重名</h3><p>如果子类父类中出现不重名的成员方法，这时的调用是没有影响的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi zi =<span class="keyword">new</span> Zi();</span><br><span class="line">        zi.method1();</span><br><span class="line">        zi.method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="成员方法重名–重写（Override）"><a href="#成员方法重名–重写（Override）" class="headerlink" title="成员方法重名–重写（Override）"></a>成员方法重名–重写（Override）</h3><p>如果子类父类中出现重名的成员方法，这时的访问是一种特殊情况，叫做<strong>方法重写（Override）</strong></p>
<ul>
<li><strong>方法重写</strong>：子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效果，也称为重写或者复写。<strong>声明不变，重新实现。</strong></li>
<li><code>@Override</code> 是可选的注解，如果不写，满足要求也是正确的方法覆盖重写</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi zi =<span class="keyword">new</span> Zi();</span><br><span class="line">        zi.method();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>子类方法覆盖父类方法，必须要保证权限<strong>大于等于</strong>父类权限</li>
<li>子类方法覆盖父类方法，返回值类型必须<strong>小于等于</strong>父类方法的返回值范围</li>
<li>子类方法覆盖父类方法，函数名和参数列表都要一模一样</li>
</ul>
<h2 id="继承后的特点–构造方法"><a href="#继承后的特点–构造方法" class="headerlink" title="继承后的特点–构造方法"></a>继承后的特点–构造方法</h2><p>构造方法的定义格式和作用</p>
<ul>
<li>构造方法的名字是与类名一致的。所以子类是无法继承父类构造方法的。</li>
<li>构造方法的作用是初始化成员变量的。<ul>
<li>所以子类的初始化过程中，必须先执行父类的初始化动作。</li>
<li>子类的构造方法中默认有一个<code>super()</code>，表示调用父类的构造方法，父类成员变量初始化后，才可以给子类使用。</li>
<li>就算没有写<code>super()</code>，也会自动调用父类的构造方法</li>
<li>子类构造可以通过<code>super()</code>关键字来电泳父类重载构造</li>
<li><code>super</code>的父类构造调用，必须是子类构造方法的第一个语句</li>
<li>不能一个子类构造调用多次<code>super</code>构造</li>
</ul>
</li>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line">      	<span class="comment">// Fu()</span></span><br><span class="line">				<span class="comment">// Zi()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    Fu() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Fu()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    Zi() &#123;</span><br><span class="line">      <span class="comment">// super(); 调用父类构造器</span></span><br><span class="line">        System.out.println(<span class="string">"Zi()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="super关键字的三种用法和this关键字的三种用法"><a href="#super关键字的三种用法和this关键字的三种用法" class="headerlink" title="super关键字的三种用法和this关键字的三种用法"></a>super关键字的三种用法和this关键字的三种用法</h2><ol>
<li><p>super</p>
<ol>
<li>在子类的成员方法中，调用父类的成员变量</li>
<li>在子类的成员方法在，嗲用父类的成员方法</li>
<li>在子类的构造方法中，方法父类的构造方法</li>
</ol>
</li>
<li><p>this</p>
<ol>
<li>在本类的成员方法中，访问本类的成员变量</li>
<li>在本类的成员方法中，访问本类的另一个成员方法</li>
<li>在本类的构造方法中，访问本类的另一个构造方法</li>
</ol>
</li>
<li><p>注意事项</p>
<ol>
<li>this()和super()调用都必须是构造方法的第一个语句，唯一一个</li>
<li>super和this两种构造调用，不能同时使用</li>
</ol>
</li>
</ol>
<h2 id="super和this图解"><a href="#super和this图解" class="headerlink" title="super和this图解"></a>super和this图解</h2><p><img data-src="/2020/11d8b32d/03-super%E4%B8%8Ethis%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="03-super与this的内存图"></p>
<h2 id="继承的特点"><a href="#继承的特点" class="headerlink" title="继承的特点"></a>继承的特点</h2><ul>
<li>Java只支持单继承，不支持多继承</li>
<li>Java语言可以多继承</li>
<li>一个子类的直接父类是唯一的，但是一个父类可以拥有多个子类</li>
<li>顶层父类是Object类，所有的类默认继承Object，作为父类</li>
</ul>
<p><img data-src="/2020/11d8b32d/04-Java%E7%BB%A7%E6%89%BF%E7%9A%84%E4%B8%89%E4%B8%AA%E7%89%B9%E7%82%B9.png" alt="04-Java继承的三个特点"></p>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Math类</title>
    <url>/2020/8418bd03/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.lang.Math</code>类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。类似这样的工具类，其所有方法均为静态方法，并且不会创建对象，调用起来非常简单。</p>
<h2 id="基本运算的方法"><a href="#基本运算的方法" class="headerlink" title="基本运算的方法"></a>基本运算的方法</h2><ul>
<li><code>public static double abs(double a)</code>：返回 double 值的绝对值。<ul>
<li>如果参数为非负数，则返回该参数。如果参数为负数，则返回该参数的相反数。</li>
<li>如果参数为 NaN，那么结果为 NaN。</li>
</ul>
</li>
<li><code>public static double ceil(double a)</code>：向上取整<ul>
<li>返回最小的（最接近负无穷大）<code>double</code> 值，该值大于等于参数，并等于某个整数。</li>
</ul>
</li>
<li><code>public static double floor(double a)</code>：向下取整<ul>
<li>返回最大的（最接近正无穷大）double 值，该值小于等于参数，并等于某个整数。</li>
</ul>
</li>
<li><code>public static long round(double a)</code>：四舍五入    <ul>
<li>返回最接近参数的 long</li>
</ul>
</li>
<li>结果将舍入为整数：加上 1/2，对结果调用 floor 并将所得结果强制转换为 long 类型</li>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> d1 = <span class="number">10.1</span>;</span><br><span class="line">        <span class="keyword">double</span> d2 = -<span class="number">10.1</span>;</span><br><span class="line">        <span class="keyword">double</span> d3 = <span class="number">10.5</span>;</span><br><span class="line">        <span class="keyword">double</span> d4 = -<span class="number">10.5</span>;</span><br><span class="line">        System.out.println(<span class="string">"=======Math.abs======="</span>);</span><br><span class="line">        System.out.println(Math.abs(d1)); <span class="comment">//10.1</span></span><br><span class="line">        System.out.println(Math.abs(d2)); <span class="comment">//10.1</span></span><br><span class="line">        System.out.println(<span class="string">"=======Math.ceil======"</span>);</span><br><span class="line">        System.out.println(Math.ceil(d1)); <span class="comment">//11.0</span></span><br><span class="line">        System.out.println(Math.ceil(d2)); <span class="comment">//-10.0</span></span><br><span class="line">        System.out.println(Math.ceil(d3)); <span class="comment">//11.0</span></span><br><span class="line">        System.out.println(Math.ceil(d4)); <span class="comment">//-10.0</span></span><br><span class="line">        System.out.println(<span class="string">"=======Math.floor====="</span>);</span><br><span class="line">        System.out.println(Math.floor(d1)); <span class="comment">//10.0</span></span><br><span class="line">        System.out.println(Math.floor(d2)); <span class="comment">//-11.0</span></span><br><span class="line">        System.out.println(Math.floor(d3)); <span class="comment">//10.0</span></span><br><span class="line">        System.out.println(Math.floor(d4)); <span class="comment">//-11.0</span></span><br><span class="line">        System.out.println(<span class="string">"=======Math.round====="</span>);</span><br><span class="line">        System.out.println(Math.round(d1));  <span class="comment">//10</span></span><br><span class="line">        System.out.println(Math.round(d2));  <span class="comment">//-10</span></span><br><span class="line">        System.out.println(Math.round(d3));  <span class="comment">//11</span></span><br><span class="line">        System.out.println(Math.round(d4));  <span class="comment">//-10</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Arrays类</title>
    <url>/2020/f94236ee/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.util.Arrays</code>此类包含用来操作数组的各种方法，比如排序和搜索等。其所有方法均为静态方法，调用起来非常简单。</p>
<h2 id="操作数组的方法"><a href="#操作数组的方法" class="headerlink" title="操作数组的方法"></a>操作数组的方法</h2><ul>
<li><p><code>public static String toString(int[] a)</code>：返回指定数组内容的字符串表示形式</p>
</li>
<li><p><code>public static void sort(int[] a)</code>：对指定的数组按数字升序进行排序</p>
<ul>
<li>数值，sort默认按照升序从小到大</li>
</ul>
</li>
<li><p>字符串，sort默认按照字母升序</p>
<ul>
<li>自定义类型，自定义类需要有Comparable或者Comparator接口的支持</li>
</ul>
</li>
<li><p>实现</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = &#123;<span class="number">99</span>,<span class="number">98</span>,<span class="number">97</span>&#125;;</span><br><span class="line">    <span class="keyword">short</span>[] shorts = &#123;<span class="number">99</span>,<span class="number">98</span>,<span class="number">97</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] ints =&#123;<span class="number">99</span>,<span class="number">98</span>,<span class="number">97</span>&#125;;</span><br><span class="line">    <span class="keyword">long</span>[] longs = &#123;<span class="number">99</span>,<span class="number">98</span>,<span class="number">97</span>&#125;;</span><br><span class="line">    <span class="keyword">float</span>[] floats = &#123;<span class="number">99.0F</span>,<span class="number">98.0F</span>,<span class="number">97.0F</span>&#125;;</span><br><span class="line">    <span class="keyword">double</span>[] doubles = &#123;<span class="number">99.0</span>,<span class="number">98.0</span>,<span class="number">97.0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span>[] chars = &#123;<span class="string">'c'</span>,<span class="string">'b'</span>,<span class="string">'a'</span>&#125;;</span><br><span class="line">    <span class="keyword">boolean</span>[] booleans = &#123;<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">true</span>&#125;;</span><br><span class="line">    String[] strings =  &#123;<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>&#125;;</span><br><span class="line">    <span class="comment">// Arrays.toString</span></span><br><span class="line">    System.out.println(Arrays.toString(bytes));     <span class="comment">//[99, 98, 97]</span></span><br><span class="line">    System.out.println(Arrays.toString(shorts));    <span class="comment">//[99, 98, 97]</span></span><br><span class="line">    System.out.println(Arrays.toString(ints));      <span class="comment">//[99, 98, 97]</span></span><br><span class="line">    System.out.println(Arrays.toString(longs));     <span class="comment">//[99, 98, 97]</span></span><br><span class="line">    System.out.println(Arrays.toString(chars));     <span class="comment">//[c, b, a]</span></span><br><span class="line">    System.out.println(Arrays.toString(floats));    <span class="comment">//[99.0, 98.0, 97.0]</span></span><br><span class="line">    System.out.println(Arrays.toString(doubles));   <span class="comment">//[99.0, 98.0, 97.0]</span></span><br><span class="line">    System.out.println(Arrays.toString(booleans));  <span class="comment">//[true, false, true]</span></span><br><span class="line">    System.out.println(Arrays.toString(strings));   <span class="comment">//[c, b, a]</span></span><br><span class="line">    <span class="comment">// Arrays.sort</span></span><br><span class="line">    Arrays.sort(bytes);</span><br><span class="line">    Arrays.sort(shorts);</span><br><span class="line">    Arrays.sort(ints);</span><br><span class="line">    Arrays.sort(longs);</span><br><span class="line">    Arrays.sort(chars);</span><br><span class="line">    Arrays.sort(floats);</span><br><span class="line">    Arrays.sort(doubles);</span><br><span class="line">    Arrays.sort(strings);</span><br><span class="line">    System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">    System.out.println(Arrays.toString(bytes));   <span class="comment">//[97, 98, 99]</span></span><br><span class="line">    System.out.println(Arrays.toString(shorts));  <span class="comment">//[97, 98, 99]</span></span><br><span class="line">    System.out.println(Arrays.toString(ints));    <span class="comment">//[97, 98, 99]</span></span><br><span class="line">    System.out.println(Arrays.toString(longs));   <span class="comment">//[97, 98, 99]</span></span><br><span class="line">    System.out.println(Arrays.toString(chars));   <span class="comment">//[a, b, c]</span></span><br><span class="line">    System.out.println(Arrays.toString(floats));  <span class="comment">//[97.0, 98.0, 99.0]</span></span><br><span class="line">    System.out.println(Arrays.toString(doubles)); <span class="comment">//[97.0, 98.0, 99.0]</span></span><br><span class="line">    System.out.println(Arrays.toString(strings)); <span class="comment">//[a, b, c]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>static关键字</title>
    <url>/2020/ce244871/</url>
    <content><![CDATA[<h1 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>关于<code>static</code>关键字的使用，它可以用来修饰的成员变量和成员方法，<strong>被修饰的成员是属于类的，而不是单单是属于某个对象的</strong>。也就是说，既然属于类，就可以不靠创建对象来调用了.</p>
<h2 id="定义和使用格式"><a href="#定义和使用格式" class="headerlink" title="定义和使用格式"></a>定义和使用格式</h2><h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3><p>当<code>static</code>修饰成员变量时，该变量称为<strong>类变量</strong>。该类的每个对象都<strong>共享</strong>同一个类变量的值。任何对象都可以更改该类变量的值，但也可以在不创建该类的对象的情况下对类变量进行操作。</p>
<ul>
<li><strong>类变量</strong>：使用static关键字修饰的成员变量</li>
<li>格式：<ul>
<li><code>static 数据类型 变量名;</code></li>
</ul>
</li>
<li>实现：<ul>
<li><code>static int number</code></li>
</ul>
</li>
</ul>
<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>当<code>static</code>修饰成员方法时，该方法称为类方法。静态方法在声明中有<code>static</code>，建议使用类名来调用，而不需要创建类的对象。调用方式非常简单。</p>
<ul>
<li><p><strong>类方法</strong>：使用static关键字修饰的成员方法，习惯称为<strong>静态方法</strong>。</p>
</li>
<li><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">static</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">	<span class="comment">//执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"show"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>静态方法调用的注意事项</strong>：<ul>
<li>静态方法可以直接访问类变量和静态方法。</li>
<li><strong>静态方法不能直接访问普通成员变量或成员方法</strong>。反之，成员方法可以直接访问类变量或静态方法。</li>
<li>静态方法中，不能使用<strong>this</strong>关键字。</li>
</ul>
</li>
</ul>
<blockquote>
<p>静态方法只能访问静态成员</p>
</blockquote>
<h3 id="调用格式"><a href="#调用格式" class="headerlink" title="调用格式"></a>调用格式</h3><p>被<code>static</code>修饰的成员可以并且建议通过类名直接访问。虽然也可以通过对象名访问静态成员，原因即多个对象均属于一个类，共享使用同一个静态成员，但是不建议，会出现警告信息。</p>
<ul>
<li>格式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 访问类变量</span></span><br><span class="line">类名.类变量名;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用静态方法</span></span><br><span class="line">类名.静态方法名(参数);</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test.show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"show"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="静态原理图解"><a href="#静态原理图解" class="headerlink" title="静态原理图解"></a>静态原理图解</h2><p><code>static</code>修饰的内容：</p>
<ul>
<li>是随着类的加载而加载的，且只加载一次</li>
<li>存储于一块固定的内存区域（静态区），所以，可以直接被类名调用</li>
<li>它优先于对象存在，所以，可以被所有对象共享</li>
</ul>
<p><img data-src="/2020/ce244871/03-%E9%9D%99%E6%80%81%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="03-静态的内存图"></p>
<h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><ul>
<li><p><strong>静态代码块</strong>：定义在成员位置，使用static修饰的代码块{}。</p>
<ul>
<li>位置：类中方法外。</li>
<li>执行：随着类的加载而执行且执行一次，优先于main方法和构造方法的执行。</li>
</ul>
</li>
<li><p>格式</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span>&#123;</span><br><span class="line">    <span class="comment">//执行语句</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        i = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(i); <span class="comment">// 20</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>String类</title>
    <url>/2020/5cf35ca9/</url>
    <content><![CDATA[<h1 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.lang.String</code>类代表字符串。Java程序中所有的字符串文字（例如<code>&quot;abc&quot;</code>）都可以被看作是实现此类的实例。</p>
<p>类<code>String</code>中包括用于检查各个字符串的方法，比如用于<strong>比较</strong>字符串，<strong>搜索</strong>字符串，<strong>提取</strong>子字符串以及创建具有翻译为<strong>大写或小写</strong>的所有字符的字符串的副本。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li>字符串不变：<strong>字符串的值在创建后不能被更改</strong></li>
<li>因为String对象不是可变的，所以他们可以被共享</li>
<li>字符串效果上相当于char[]字符数组，但是底层原理是byte[]字节数组</li>
<li><code>&quot;abc&quot;</code>等效于<code>char[] data = { &#39;a&#39; , &#39;b&#39; , &#39;c&#39; }</code></li>
</ol>
<p><img data-src="/2020/5cf35ca9/image-20200405165653102.png" alt="image-20200405165653102"></p>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ul>
<li><p>查看类</p>
<ul>
<li><code>java.lang.String</code>：此类不需要导入。</li>
</ul>
</li>
<li><p>查看构造方法</p>
<ul>
<li><code>public string()</code>：初始化新创建的String对象，以使其表示空字符序列。</li>
<li><code>public string(char[] value)</code>：通过当前参数中的字符数组来构造新的String.</li>
<li><code>public String(byte[] bytes)</code>：通过使用平台的默认字符集解码当前参数中的字节数组来构造新的String.</li>
</ul>
</li>
<li><p>实现</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="keyword">new</span> String();</span><br><span class="line">    System.out.println(str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] chars = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line">    String str2 = <span class="keyword">new</span> String(chars);</span><br><span class="line">    System.out.println(str2); <span class="comment">// abc</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>&#125;;</span><br><span class="line">    String str3 = <span class="keyword">new</span> String(bytes);</span><br><span class="line">    System.out.println(str3); <span class="comment">// abc</span></span><br><span class="line">  	<span class="comment">// 直接创建</span></span><br><span class="line">  	String str4 = <span class="string">"abc"</span>;</span><br><span class="line">  	System.out.println(str4); <span class="comment">// abc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h2><p>程序中直接写上的双引号字符串，就在字符串常量池中</p>
<ul>
<li>对于基本类型来说：==是进行数值比较</li>
<li>对于引用类型来说：==是进行【地址值的比较】</li>
</ul>
<p><img data-src="/2020/5cf35ca9/01-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B8%B8%E9%87%8F%E6%B1%A0.png" alt="01-字符串的常量池"></p>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h3><ul>
<li><code>public boolean equals(Object anObject)</code>：将此字符串与指定的对象比较。当且仅当该参数不为 null，并且是与此对象表示相同字符序列的 String 对象时，结果才为 true。 <ul>
<li>任何对象都能用<code>Object</code>进行接受</li>
<li><code>equals</code>方法具有对称性，也就是<code>a.equals(b)</code>和<code>b.equals(a)</code>效果一样</li>
<li>如果比较双方一个常量一个变量，推荐把常量字符串写在前面</li>
</ul>
</li>
<li><code>public boolean equalsIgnoreCase(String anotherString)</code>：将此 String 与另一个 String 比较，不考虑大小写。如果两个字符串的长度相同，并且其中的相应字符都相等（忽略大小写），则认为这两个字符串是相等的。 </li>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s1 = <span class="string">"abc"</span>;</span><br><span class="line">    String s2 = <span class="string">"abc"</span>;</span><br><span class="line">    String s3 = <span class="string">"ABC"</span>;</span><br><span class="line">    <span class="comment">// equals</span></span><br><span class="line">    System.out.println(s1.equals(s2)); <span class="comment">// true</span></span><br><span class="line">    System.out.println(s1.equals(s3)); <span class="comment">// false</span></span><br><span class="line">    <span class="comment">// equalsIgnoreCase</span></span><br><span class="line">    System.out.println(s1.equalsIgnoreCase(s2)); <span class="comment">// true</span></span><br><span class="line">    System.out.println(s1.equalsIgnoreCase(s3)); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Object是”对象”的意思，也是一种引用类型。作为参数类型，表示任意对象都可以传递到方法中。</p>
</blockquote>
<h3 id="获取功能的方法"><a href="#获取功能的方法" class="headerlink" title="获取功能的方法"></a>获取功能的方法</h3><ul>
<li><p><code>public boolean isEmpty()</code>：返回此字符串的长度。长度等于字符串中 Unicode 代码单元的数量。 </p>
</li>
<li><p><code>public String concat(String str)</code>：将指定字符串连接到此字符串的结尾。 </p>
<ul>
<li>如果参数字符串的长度为 0，则返回此 String 对象。否则，创建一个新的 String 对象，用来表示由此 String 对象表示的字符序列和参数字符串表示的字符序列连接而成的字符序列。</li>
</ul>
</li>
<li><p><code>public char charAt(int index)</code>：返回指定索引处的 char 值。索引范围为从 0 到 length() - 1。序列的第一个 char 值位于索引 0 处，第二个位于索引 1 处，依此类推，这类似于数组索引。 </p>
</li>
<li><p><code>public int indexOf(int ch)</code>：返回指定字符在此字符串中第一次出现处的索引。</p>
</li>
<li><p><code>public String substring(int beginIndex)</code>：返回一个新的字符串，它是此字符串的一个子字符串。该子字符串从指定索引处的字符开始，直到此字符串末尾。</p>
</li>
<li><p><code>public String substring(int beginIndex,int endIndex)</code>：返回一个新字符串，它是此字符串的一个子字符串。该子字符串从指定的 <code>beginIndex</code>处开始，直到索引 <code>endIndex - 1</code> 处的字符。因此，该子字符串的长度为 <code>endIndex-beginIndex</code>。 </p>
</li>
<li><p>实现</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"abc"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// length</span></span><br><span class="line">    System.out.println(str.length()); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// concat</span></span><br><span class="line">    System.out.println(str.concat(<span class="string">"---&gt;d"</span>));  <span class="comment">// abc---&gt;d</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// charAt</span></span><br><span class="line">    System.out.println(str.charAt(<span class="number">0</span>)); <span class="comment">// a</span></span><br><span class="line">    System.out.println(str.charAt(str.length() - <span class="number">1</span>));<span class="comment">// c</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// indexOf</span></span><br><span class="line">    System.out.println(str.indexOf(<span class="number">1</span>)); <span class="comment">// -1</span></span><br><span class="line">    System.out.println(str.indexOf(<span class="string">"a"</span>)); <span class="comment">// 0</span></span><br><span class="line">    System.out.println(str.indexOf(<span class="string">"bcd"</span>)); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// substring</span></span><br><span class="line">    System.out.println(str.substring(<span class="number">0</span>)); <span class="comment">// abc</span></span><br><span class="line">    System.out.println(str.substring(<span class="number">1</span>)); <span class="comment">// bc</span></span><br><span class="line">    System.out.println(str.substring(<span class="number">0</span>,str.length())); <span class="comment">// abc</span></span><br><span class="line">    System.out.println(str.substring(<span class="number">1</span>,<span class="number">2</span>)); <span class="comment">// b</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="转换功能的方法"><a href="#转换功能的方法" class="headerlink" title="转换功能的方法"></a>转换功能的方法</h3><ul>
<li><p><code>public char[] toCharArray()</code>：将此字符串转换为一个新的字符数组。 </p>
</li>
<li><p><code>public byte[] getBytes()</code>：使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。 </p>
</li>
<li><p><code>public String replace(CharSequence target, CharSequence replacement)</code>：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</p>
<ul>
<li>该替换从字符串的开头朝末尾执行，例如，用 “b” 替换字符串 “aaa” 中的 “aa” 将生成 “ba” 而不是 “ab”。 </li>
</ul>
</li>
<li><p>CharSequence 是一个接口，意思就是说可以接受字符串类型</p>
</li>
<li><p>实现</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="comment">// toCharArray</span></span><br><span class="line">    <span class="keyword">char</span>[] chars =str.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        System.out.print(chars[i]+<span class="string">"\t"</span>); <span class="comment">// a	b	c</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getBytes</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = str.getBytes();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">        System.out.print(bytes[i]+<span class="string">"\t"</span>);<span class="comment">// 97	98	99</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// replace</span></span><br><span class="line">    String replace = str.replace(<span class="string">"a"</span>, <span class="string">"A"</span>);</span><br><span class="line">    System.out.println(str+<span class="string">"---&gt;"</span>+replace); <span class="comment">// abc---&gt;Abc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>CharSequence是一个接口，也是一种引用类型。作为参数类型，可以把String对象传递到方法中</p>
</blockquote>
<h3 id="分割功能的方法"><a href="#分割功能的方法" class="headerlink" title="分割功能的方法"></a>分割功能的方法</h3><ul>
<li><code>public String[] split(String regex,int limit)</code>：根据匹配给定的正则表达式来拆分此字符串。 <ul>
<li>split的参数是一个正则表达式</li>
<li>如果要按照英文句点<code>.</code>惊醒切分，必须写两个反斜杠<code>&quot;\\.&quot;</code></li>
</ul>
</li>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"a,b,c"</span>;</span><br><span class="line">    String[] split = str.split(<span class="string">","</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; split.length; i++) &#123;</span><br><span class="line">        System.out.print(split[i] + <span class="string">"\t"</span>); <span class="comment">// a	b	c	</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>ArrayList类</title>
    <url>/2020/875943a8/</url>
    <content><![CDATA[<h2 id="什么是ArrayList类"><a href="#什么是ArrayList类" class="headerlink" title="什么是ArrayList类"></a>什么是ArrayList类</h2><p><code>java.utiL.ArrayList</code>是大小可变的数组的实现，存储在内的数据称为元素。</p>
<p>此类提供一些方法来操作内部存储的元素。</p>
<p><code>ArrayList</code>中可不断添加元素，其大小也自动增长。</p>
<h2 id="ArrayList使用步骤"><a href="#ArrayList使用步骤" class="headerlink" title="ArrayList使用步骤"></a>ArrayList使用步骤</h2><ul>
<li>查看类<ul>
<li><code>java.util.ArrayList &lt;E&gt;</code>：该类需要import导入后使用<ul>
<li><code>&lt;E&gt;</code>，表示一种指定的数据类型，叫做泛型，<code>E</code>：取自Element（元素）的首字母，在出现<code>E</code>的地方，我们使用一种引用数据类型将其替换立刻，边是我们将存储那种引用类型的元素。</li>
<li>例如：<code>ArrayList&lt;String&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li>查看构造方法<ul>
<li><code>public ArrayList()</code>：构造一个内容为空的集合</li>
</ul>
</li>
<li>格式<ul>
<li><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</code></li>
<li>在JDK7之后，右侧泛型的尖括号之内可以留空</li>
<li><code>ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</code></li>
</ul>
</li>
<li>查看成员方法<ul>
<li><code>public boolean add(E e)</code>：将指定的元素添加到此列表的尾部<ul>
<li>参数<code>E e</code>，在构造Arraylist对象时，<code>&lt;E&gt;</code>指定了什么数据类型，那么<code>add (E e)</code>方法中，只能添加什么数据类型的对象。</li>
</ul>
</li>
</ul>
</li>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     list.add(<span class="string">"a"</span>);</span><br><span class="line">     list.add(<span class="string">"b"</span>);</span><br><span class="line">     list.add(<span class="string">"c"</span>);</span><br><span class="line">     System.out.println(list);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="常用方法和遍历"><a href="#常用方法和遍历" class="headerlink" title="常用方法和遍历"></a>常用方法和遍历</h2><p>对于元素的操作，基本体现在-一增、删、查。常用的方法有：</p>
<ul>
<li><code>public boolean add(E e)</code>：将指定的元素添加到此集合的尾部</li>
<li><code>public E remove(int index)</code>：移除此集合中指定位置上的元素。返回被删除的元素</li>
<li><code>public E get(int index)</code>：返回此集合中指定位置上的元素。返回获取的元素</li>
<li><code>public int size()</code>：返回此集合中的元素数。遍历集合时，可以控制索引范围，防止越界</li>
<li>这些都是最基本的方法，操作非常简单，代码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       list.add(<span class="string">"a"</span>);</span><br><span class="line">       list.add(<span class="string">"b"</span>);</span><br><span class="line">       list.add(<span class="string">"c"</span>);</span><br><span class="line">       System.out.println(list); <span class="comment">// [a, b, c]</span></span><br><span class="line">       System.out.println(list.remove(<span class="number">1</span>)); <span class="comment">// b</span></span><br><span class="line">       System.out.println(list); <span class="comment">// [a, c]</span></span><br><span class="line">       System.out.println(list.get(<span class="number">1</span>)); <span class="comment">// c</span></span><br><span class="line">       System.out.println(list.size()); <span class="comment">// 2</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何存储基本数据类型"><a href="#如何存储基本数据类型" class="headerlink" title="如何存储基本数据类型"></a>如何存储基本数据类型</h2><p><code>ArrayList</code>对象不能存储基本类型，只能存储引用类型的数据。类似<code>&lt;int&gt;</code>不能写，但是存储基本数据类型对应的<code>包装类型</code>是可以的。所以，想要存储基本类型数据，<code>&lt;&gt;</code>中的数据类型，必须转换后才能编写，转换写法如下：</p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>基本类型包装类</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody></table>
<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       list.add(<span class="number">1</span>);</span><br><span class="line">       list.add(<span class="number">2</span>);</span><br><span class="line">       list.add(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Random类</title>
    <url>/2020/31ee5b15/</url>
    <content><![CDATA[<h2 id="什么是Random类"><a href="#什么是Random类" class="headerlink" title="什么是Random类"></a>什么是Random类</h2><p>此类的实例用于生成伪随机数</p>
<p>例如：获取一个随机数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Random random = <span class="keyword">new</span> Random();</span><br><span class="line">  <span class="keyword">int</span> i = random.nextInt();</span><br><span class="line">  System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Random使用步骤"><a href="#Random使用步骤" class="headerlink" title="Random使用步骤"></a>Random使用步骤</h2><ul>
<li>查看类<ul>
<li><code>java.util.Random</code>：该类需要import导入后使用</li>
</ul>
</li>
<li>查看构造方法<ul>
<li><code>public Random()</code>：创建一个新的随机数生成器</li>
</ul>
</li>
<li>查看成员方法<ul>
<li><code>public int nextInt(int n)</code>：返回一个伪随机数，范围在0（包括）和n（不包括）之间的<code>int</code>值</li>
</ul>
</li>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        System.out.println(i+<span class="string">"--------&gt;"</span>+y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建一个Random对象，每次调用nextInt()方法，都会生成一个随机数</p>
</blockquote>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Scanner类</title>
    <url>/2020/bc55b219/</url>
    <content><![CDATA[<h2 id="什么是Scanner类"><a href="#什么是Scanner类" class="headerlink" title="什么是Scanner类"></a>什么是Scanner类</h2><p>一个可以解析基本类型和字符串的简单文本扫描器。</p>
<p>例如：读取用户键盘输入的一个数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> i = scanner.nextInt();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>System.in系统输入指的是通过键盘录入数据</p>
</blockquote>
<h2 id="引用类型一般使用步骤"><a href="#引用类型一般使用步骤" class="headerlink" title="引用类型一般使用步骤"></a>引用类型一般使用步骤</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><p>使用<code>import</code>关键字导包，在类的所有代码之前导包，引入要使用的类型，java.lang包下的所有类无需导入</p>
<ul>
<li>格式：</li>
</ul>
<p><code>import 包名.类名</code></p>
<ul>
<li>实现：</li>
</ul>
<p><code>import java.util.Scanner</code></p>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>使用该类的构造方法，创建一个该类的对象</p>
<ul>
<li>格式：</li>
</ul>
<p><code>数据类型 变量名 = new 数据类型(参数列表)</code></p>
<ul>
<li>实现：</li>
</ul>
<p><code>Scanner scanner = new Scanner(System.in);</code></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>调用该类的成员方法，完成指定功能</p>
<ul>
<li>格式：</li>
</ul>
<p><code>变量名.方法名();</code></p>
<ul>
<li>实现：</li>
</ul>
<p><code>int i = scanner.nextInt();</code></p>
<h2 id="Scanner使用步骤"><a href="#Scanner使用步骤" class="headerlink" title="Scanner使用步骤"></a>Scanner使用步骤</h2><ul>
<li>查看类<ul>
<li><code>java.util.Scanner</code>：该类需要import导入后使用</li>
</ul>
</li>
<li>查看构造方法<ul>
<li><code>public Scanner(InputStream source)</code>：构造一个新的<code>Scanner</code>，它生成的值从指定的输入流扫描</li>
</ul>
</li>
<li>查看成员方法<ul>
<li><code>public int nextInt()</code>：将输入信息的下一个标记扫描为一个<code>int</code>值</li>
</ul>
</li>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      <span class="keyword">int</span> i = scanner.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>创建对象时，只有创建对象的语句，却没有把对象地址值赋值给某个变量。虽然是创建对象的简化写法，但是应用场景非常有限。</p>
<ul>
<li>匿名对象：没有变量名的对象</li>
<li>格式：<ul>
<li><code>new 类名(参数列表);</code></li>
</ul>
</li>
<li>实现：<ul>
<li><code>new Scanner(System.in);</code></li>
</ul>
</li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li><p>创建匿名对象直接调用方法，没有变量名</p>
</li>
<li><p><code>new Scanner(System.in).nextInt();</code></p>
</li>
<li><p>但是一旦调用两次方法，就是创建了两个对象，造成浪费</p>
<ul>
<li><pre><code class="java"><span class="keyword">new</span> Scanner(System.in).nextInt();
<span class="keyword">new</span> Scanner(System.in).nextInt();
&lt;!--￼<span class="number">2</span>--&gt;

- 作为返回值
</code></pre>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = input();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Scanner <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是API</title>
    <url>/2020/4ff3694a/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>API（Application Programming Interface），应用程序编程接口。Java API是一本程序员的字典，是JDK中提供给我们使用的类的说明文档。</p>
<p>这些类将底层的代码实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可。</p>
<p>所以我们可以通过查询APl的方式，来学习Java提供的类，并得知如何使用它们。</p>
<h2 id="API使用步骤"><a href="#API使用步骤" class="headerlink" title="API使用步骤"></a>API使用步骤</h2><p>JDK API 1.6 中文版为SUN公司提供，之后的中文为机翻</p>
<ul>
<li>链接：<a href="https://pan.baidu.com/s/1kw_UNgwL7hLN0N99KroK5w" target="_blank" rel="noopener">https://pan.baidu.com/s/1kw_UNgwL7hLN0N99KroK5w</a> <ul>
<li>提取码：ntlx</li>
</ul>
</li>
</ul>
<ol>
<li>打开帮助文档。</li>
<li>点击显示，找到索引，看到输入框。</li>
<li>你要找谁？在输入框里输入，然后回车。</li>
<li>看包。java.lang下的类不需要导包，其他需要。</li>
<li>看类的解释和说明。</li>
<li>学习构造方法。</li>
<li>使用成员方法</li>
</ol>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>封装</title>
    <url>/2020/d60eb45/</url>
    <content><![CDATA[<h1 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h1><h2 id="什么是Scanner类"><a href="#什么是Scanner类" class="headerlink" title="什么是Scanner类"></a>什么是Scanner类</h2><p>一个可以解析基本类型和字符串的简单文本扫描器。</p>
<p>例如：读取用户键盘输入的一个数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> i = scanner.nextInt();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>System.in系统输入指的是通过键盘录入数据</p>
</blockquote>
<h2 id="引用类型一般使用步骤"><a href="#引用类型一般使用步骤" class="headerlink" title="引用类型一般使用步骤"></a>引用类型一般使用步骤</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><p>使用<code>import</code>关键字导包，在类的所有代码之前导包，引入要使用的类型，java.lang包下的所有类无需导入</p>
<ul>
<li>格式：</li>
</ul>
<p><code>import 包名.类名</code></p>
<ul>
<li>实现：</li>
</ul>
<p><code>import java.util.Scanner</code></p>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>使用该类的构造方法，创建一个该类的对象</p>
<ul>
<li>格式：</li>
</ul>
<p><code>数据类型 变量名 = new 数据类型(参数列表)</code></p>
<ul>
<li>实现：</li>
</ul>
<p><code>Scanner scanner = new Scanner(System.in);</code></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>调用该类的成员方法，完成指定功能</p>
<ul>
<li>格式：</li>
</ul>
<p><code>变量名.方法名();</code></p>
<ul>
<li>实现：</li>
</ul>
<p><code>int i = scanner.nextInt();</code></p>
<h2 id="Scanner使用步骤"><a href="#Scanner使用步骤" class="headerlink" title="Scanner使用步骤"></a>Scanner使用步骤</h2><ul>
<li>查看类<ul>
<li><code>java.util.Scanner</code>：该类需要import导入后使用</li>
</ul>
</li>
<li>查看构造方法<ul>
<li><code>public Scanner(InputStream source)</code>：构造一个新的<code>Scanner</code>，它生成的值从指定的输入流扫描</li>
</ul>
</li>
<li>查看成员方法<ul>
<li><code>public int nextInt()</code>：将输入信息的下一个标记扫描为一个<code>int</code>值</li>
</ul>
</li>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      <span class="keyword">int</span> i = scanner.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>创建对象时，只有创建对象的语句，却没有把对象地址值赋值给某个变量。虽然是创建对象的简化写法，但是应用场景非常有限。</p>
<ul>
<li>匿名对象：没有变量名的对象</li>
<li>格式：<ul>
<li><code>new 类名(参数列表);</code></li>
</ul>
</li>
<li>实现：<ul>
<li><code>new Scanner(System.in);</code></li>
</ul>
</li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li><p>创建匿名对象直接调用方法，没有变量名</p>
</li>
<li><p><code>new Scanner(System.in).nextInt();</code></p>
</li>
<li><p>但是一旦调用两次方法，就是创建了两个对象，造成浪费</p>
<ul>
<li><pre><code class="java"><span class="keyword">new</span> Scanner(System.in).nextInt();
<span class="keyword">new</span> Scanner(System.in).nextInt();
&lt;!--￼<span class="number">2</span>--&gt;

- 作为返回值
</code></pre>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = input();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Scanner <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>体现：</p>
<ol>
<li>方法就是一种封装</li>
<li>关键字<code>private</code>也是一种封装</li>
</ol>
<h2 id="封装的概述"><a href="#封装的概述" class="headerlink" title="封装的概述"></a>封装的概述</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>面向对象编程语言是对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界无法直接操作和修改。封装可以被认为是一个保护屏障，防止该类的代码和数据被其他类随意访问。要访问该类的数据，必须通过指定的方式。适当的封装可以让代码更容易理解与维护，也加强了代码的安全性。</p>
<h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><p>将<strong>属性隐藏</strong>起来，若需要访问某个属性，<strong>提供公共方法</strong>对其访问。</p>
<h2 id="封装的步骤"><a href="#封装的步骤" class="headerlink" title="封装的步骤"></a>封装的步骤</h2><ul>
<li>使用<code>private</code>关键字来修饰成员变量。</li>
<li>对需要访问的成员变量，提供对应的一对<code>getxxx方法、setxxx方法</code>。</li>
</ul>
<h2 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a>private关键字</h2><h3 id="private的含义"><a href="#private的含义" class="headerlink" title="private的含义"></a>private的含义</h3><ul>
<li><code>private</code>是一个权限修饰符，代表最小权限。</li>
<li>可以修饰成员变量和成员方法。</li>
<li>被<code>private</code>修饰后的成员变量和成员方法，只在本类中才能访问。</li>
</ul>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p><code>private 数据类型 变量名;</code></p>
<ul>
<li>实现</li>
</ul>
<p>使用<code>private</code>修饰成员变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提供get/set方法，访问成员变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><p>因为<code>set方法</code>的成员变量赋值会失败（<strong>当方法的局部变量和类的成员变量重名的时候，根据就近原则，优先使用局部变量</strong>），相当于set方法没有用，但是又要满足见名知意的规定</p>
<p>Java就提供了访问当前对象的引用的关键字<code>this</code></p>
<h3 id="this的含义"><a href="#this的含义" class="headerlink" title="this的含义"></a>this的含义</h3><p>this代表所在类的当前对象的引用（地址值），即对象自己的引用。</p>
<blockquote>
<p>记住：方法被哪个对象调用，方法中的this就代表那个对象。即谁在调用，this就代表谁。</p>
</blockquote>
<h3 id="this的使用"><a href="#this的使用" class="headerlink" title="this的使用"></a>this的使用</h3><ul>
<li>格式</li>
</ul>
<p><code>this.成员变量</code></p>
<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>当一个对象被创建时候，构造方法用来初始化该对象，给对象的成员变量赋初始值。</p>
<p>无论你与否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个无参数构造方法，一旦自己定义了构造方法，lava自动提供的默认无参数构造方法就会失效</p>
<ul>
<li>格式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 构造方法名(参数列表)&#123;</span><br><span class="line"> <span class="comment">//方法体 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造方法的写法上，方法名与它所在的类名相同。它没有返回值，所以不需要返回值类型，甚至不需要void，使用构造方法后，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">		<span class="comment">//无参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">//有参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>构造方法的名称必须和所在的类名名称完全一样，就连大小写也要一样</li>
<li>构造方法不要写返回值类型，连void都不要写</li>
<li>构造方法不能return一个具体的返回值</li>
<li>如果你不提供构造方法，系统会给出无参数构造方法</li>
<li>如果你提供了构造方法，系统将不再提供无参数构造方法</li>
<li>构造方法是可以重载的，既可以定义参数，也可以不定义参数</li>
</ul>
<h2 id="JavaBean-标准代码"><a href="#JavaBean-标准代码" class="headerlink" title="JavaBean(标准代码)"></a>JavaBean(标准代码)</h2><p><code>JavaBean</code>是Java语言编写类的一种标准规范。符合J<code>avaBean</code>的类，要求类必须是具体的和公共的，并且具有<code>无参数的构造方法</code>，提供用来操作成员变量的<code>set</code>和<code>get</code>方法。</p>
<ul>
<li>格式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line">  <span class="comment">//成员变量</span></span><br><span class="line">  <span class="comment">//构造方法</span></span><br><span class="line">  <span class="comment">//无参构造方法【必须】</span></span><br><span class="line">  <span class="comment">//有参构造方法【建议】</span></span><br><span class="line">  <span class="comment">//成员方法</span></span><br><span class="line">  <span class="comment">//get</span></span><br><span class="line">  <span class="comment">//set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 无参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 有参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reading</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">"正在读书"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get set</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象</title>
    <url>/2020/28239a8d/</url>
    <content><![CDATA[<h2 id="面向对象思想概述"><a href="#面向对象思想概述" class="headerlink" title="面向对象思想概述"></a>面向对象思想概述</h2><p>Java语言是一种面向对象的程序设计语言，而面向对象思想是一种程序设计思想，我们在面向对象思想的指引下，使用Java语言去设计、开发计算机程序。这里的<strong>对象</strong>泛指现实中一切事物，每种事物都具备自己的<strong>属性</strong>和<strong>行为</strong>。面向对象思想就是在计算机程序设计过程中，参照现实中事物，将事物的属性特征、行为特征抽象出来，描述成计算机事件的设计思想。它区别于面向过程思想，强调的是通过调用对象的行为来实现功能，而不是自己一步一步的去操作实现。</p>
<p>面向对象和面向过程区别：</p>
<ul>
<li>面向过程：强调步骤</li>
<li>面向对象，强调对象</li>
</ul>
<p>特点：</p>
<ul>
<li>面向对象思想是一种更符合我们思考习惯的思想，它可以将复杂的事情简单化，并将我们从执行者变成了指挥者面向对象的语言中，包含了<strong>三大基本特征</strong>，即<strong>封装、继承和多态</strong>。</li>
</ul>
<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h3><ul>
<li><strong>类</strong>：是一组相关<strong>属性</strong>和<strong>行为</strong>的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该类事物。</li>
</ul>
<p>在先使用，描述一类事物：</p>
<ul>
<li><strong>属性</strong>：就是该事物的状态信息</li>
<li><strong>行为</strong>：就是该事物能够做什么</li>
</ul>
<h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3><ul>
<li><strong>对象</strong>：是一类事物的具体体现。对象是类的一个实例（对象并不是找个女朋友），必然具备该类事物的属性和行为。</li>
</ul>
<h3 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h3><ul>
<li>类是对一类事物的描述，是<strong>抽象的</strong></li>
<li>对象是一类事物的实例，是<strong>具体的</strong></li>
<li><strong>类是对象的模板，对象是类的实体</strong></li>
</ul>
<h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><h3 id="事物与类的对比"><a href="#事物与类的对比" class="headerlink" title="事物与类的对比"></a>事物与类的对比</h3><p>现实世界的一类事物：</p>
<ul>
<li><p><strong>属性</strong>：事物的状态信息</p>
</li>
<li><p><strong>行为</strong>：事物能够做什么</p>
</li>
</ul>
<p>Java中用class描述事物也是如此：</p>
<ul>
<li><p><strong>成员变量</strong>：对应事物的<strong>属性</strong></p>
</li>
<li><p><strong>成员方法</strong>：对应事物的<strong>行为</strong></p>
</li>
</ul>
<h3 id="类的定义格式"><a href="#类的定义格式" class="headerlink" title="类的定义格式"></a>类的定义格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line">  <span class="comment">//成员变量</span></span><br><span class="line">  <span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>定义类</strong>：就是定义类的成员，包括<strong>成员变量</strong>和<strong>成员方法</strong>。</p>
</li>
<li><p><strong>成员变量</strong>：和以前定义变量几乎是一样的。只不过位置发生了改变。<strong>在类中，方法外</strong>。</p>
</li>
<li><p><strong>成员方法</strong>：和以前定义方法几乎是一样的。只不过<strong>把static去掉</strong>，static的作用在面向对象后面课程中再详细讲解。</p>
</li>
<li><p>实现</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">  <span class="comment">//成员变量</span></span><br><span class="line">  String name;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//成员方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"好好学习"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h2><h3 id="对象的使用格式"><a href="#对象的使用格式" class="headerlink" title="对象的使用格式"></a>对象的使用格式</h3><ul>
<li>创建对象：</li>
</ul>
<p><code>类名 对象名 = new 类名();</code></p>
<ul>
<li>使用对象访问类中的成员:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">对象名.成员变量;</span><br><span class="line">对象名.成员方法();</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="comment">//创建对象</span></span><br><span class="line">  Student s = <span class="keyword">new</span> Student();</span><br><span class="line">  <span class="comment">//获取成员变量</span></span><br><span class="line">  System.out.print(s.name);</span><br><span class="line">  <span class="comment">//给成员变量赋值</span></span><br><span class="line">  s.name = <span class="string">"大黄"</span>;</span><br><span class="line">  <span class="comment">//调用成员方法</span></span><br><span class="line">  s.study();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="成员变量的默认值"><a href="#成员变量的默认值" class="headerlink" title="成员变量的默认值"></a>成员变量的默认值</h3><table>
<thead>
<tr>
<th></th>
<th>数据类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>基本类型</td>
<td>整数（byte、short、int、long）</td>
<td>0</td>
</tr>
<tr>
<td></td>
<td>浮点数（float、double）</td>
<td>0.0</td>
</tr>
<tr>
<td></td>
<td>字符（char）</td>
<td>‘\u0000’</td>
</tr>
<tr>
<td></td>
<td>布尔（boolean）</td>
<td>false</td>
</tr>
<tr>
<td>引用类型</td>
<td>数组、类、接口</td>
<td>null</td>
</tr>
</tbody></table>
<h2 id="对象的内存图"><a href="#对象的内存图" class="headerlink" title="对象的内存图"></a>对象的内存图</h2><h3 id="只有一个对象的内存图"><a href="#只有一个对象的内存图" class="headerlink" title="只有一个对象的内存图"></a>只有一个对象的内存图</h3><p><img data-src="/2020/28239a8d/01-%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="01-只有一个对象的内存图"></p>
<h3 id="两个对象使用同一个方法的内存图"><a href="#两个对象使用同一个方法的内存图" class="headerlink" title="两个对象使用同一个方法的内存图"></a>两个对象使用同一个方法的内存图</h3><p><img data-src="/2020/28239a8d/02-%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E4%BD%BF%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E6%96%B9%E6%B3%95%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="02-两个对象使用同一个方法的内存图"></p>
<h3 id="两个引用指向同一个对象的内存图"><a href="#两个引用指向同一个对象的内存图" class="headerlink" title="两个引用指向同一个对象的内存图"></a>两个引用指向同一个对象的内存图</h3><p><img data-src="/2020/28239a8d/03-%E4%B8%A4%E4%B8%AA%E5%BC%95%E7%94%A8%E6%8C%87%E5%90%91%E5%90%8C%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="03-两个引用指向同一个对象的内存图"></p>
<h3 id="使用对象类型作为方法的参数"><a href="#使用对象类型作为方法的参数" class="headerlink" title="使用对象类型作为方法的参数"></a>使用对象类型作为方法的参数</h3><p><img data-src="/2020/28239a8d/04-%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0.png" alt="04-使用对象类型作为方法的参数"></p>
<h3 id="使用对象类型作为方法的返回值"><a href="#使用对象类型作为方法的返回值" class="headerlink" title="使用对象类型作为方法的返回值"></a>使用对象类型作为方法的返回值</h3><p><img data-src="/2020/28239a8d/05-%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC.png" alt="05-使用对象类型作为方法的返回值"></p>
<h2 id="成员变量和局部变量区别"><a href="#成员变量和局部变量区别" class="headerlink" title="成员变量和局部变量区别"></a>成员变量和局部变量区别</h2><p>变量根据定义<strong>位置的不同</strong>，我们给变量起了不同的名字。</p>
<p><img data-src="/2020/28239a8d/image-20200404165047761.png" alt="image-20200404165047761"></p>
<ul>
<li>在类中的位置不同<ul>
<li>成员变量：类中，方法外</li>
<li>局部变量：方法中或者方法声明上（形式参数）</li>
</ul>
</li>
<li>作用范围不一样<ul>
<li>成员变量：类中</li>
<li>局部变量：方法中</li>
</ul>
</li>
<li>初始化值的不同<ul>
<li>成员变量：有默认值</li>
<li>局部变量：没有默认值。必须先定义，赋值，最后使用</li>
</ul>
</li>
<li>在内存中的位置不同<ul>
<li>成员变量：堆内存</li>
<li>局部变量：栈内存</li>
</ul>
</li>
<li>生命周期不同<ul>
<li>成员变量：随着对象的创建而存在，随着对象的消失而消失</li>
<li>局部变量：随着方法的调用而存在，随着方法的调用完毕而消失</li>
</ul>
</li>
</ul>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/2020/340249a9/</url>
    <content><![CDATA[<h2 id="数组的定义和访问"><a href="#数组的定义和访问" class="headerlink" title="数组的定义和访问"></a>数组的定义和访问</h2><h3 id="容器概念"><a href="#容器概念" class="headerlink" title="容器概念"></a>容器概念</h3><ul>
<li>容器：是将多个数据存储到一起，每个数据称为容器的元素</li>
<li>比如：水杯就时容器，而里面的的存放的水、饮料、酒就可以称为容器的元素</li>
</ul>
<h3 id="数组的概念"><a href="#数组的概念" class="headerlink" title="数组的概念"></a>数组的概念</h3><ul>
<li>数组：数组就是存储数据长度固定的容器<ul>
<li>特点：<ul>
<li><strong>数组是一种引用数据类型</strong></li>
<li><strong>数组当中的多个数据，类型必须统一</strong></li>
<li><strong>数组的长度在运行期间不可以改变</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><h4 id="动态初始化（指定长度）"><a href="#动态初始化（指定长度）" class="headerlink" title="动态初始化（指定长度）"></a>动态初始化（指定长度）</h4><ul>
<li>格式：</li>
</ul>
<p><code>数据类型[] 数据名称 = new 数据类型[长度]</code></p>
<ul>
<li><p>解释：</p>
<ul>
<li><code>数据类型</code>：创建的数组容器可以存储什么数据类型</li>
<li><code>[]</code>：表示数组。</li>
<li><code>数据名称</code>：为定义的数组起个变量名，满足标识符规范，可以使用名字操作数组。</li>
<li><code>new：关键字</code>，创建数组使用的关键字。</li>
<li><code>数据类型</code>：创建的数组容器可以存储什么数据类型。</li>
<li><code>[长度]</code>：数组的长度，表示数组容器中可以存储多少个元素，是int数字。</li>
<li><strong>注意：数组有定长特性，长度一旦指定，不可更改。</strong><ul>
<li>和水杯一个道理，买了一个2升的水杯，总量也就只有2升，不能多也少不了</li>
</ul>
</li>
</ul>
</li>
<li><p>实现</p>
</li>
</ul>
<p><code>int[] arr = new int[300];</code></p>
<h4 id="静态初始化（指定内容）"><a href="#静态初始化（指定内容）" class="headerlink" title="静态初始化（指定内容）"></a>静态初始化（指定内容）</h4><ul>
<li>格式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[] 数据名称 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>...&#125;;</span><br><span class="line">或者</span><br><span class="line">数据类型[] 数据名称 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>...&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>静态初始化没有直接告诉长度，但是根据大括号里面的元素具体内容，也可以自动推算出来长度</li>
<li>静态初始化标准格式可以拆分成为两个步骤</li>
<li>动态初始化可以拆分成为两个步骤</li>
<li>静态初始化一旦使用省略格式，就不能拆分呈两个步骤</li>
<li>建议：<ul>
<li>如果不确定数组当中的具体内容，用动态初始化</li>
<li>已经确定了具体的内容，同静态初始化</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 静态初始化标准格式可以拆分成为两个步骤</span></span><br><span class="line">        <span class="keyword">int</span>[] arrayA;</span><br><span class="line">        arrayA = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="comment">// 动态初始化可以拆分成为两个步骤</span></span><br><span class="line">        <span class="keyword">int</span>[] arrayB;</span><br><span class="line">        arrayB = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态初始化一旦使用省略格式，就不能拆分呈两个步骤</span></span><br><span class="line">        <span class="comment">//int [] arrayC;</span></span><br><span class="line">        <span class="comment">//arrayC = &#123;1,2,3&#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数据的访问"><a href="#数据的访问" class="headerlink" title="数据的访问"></a>数据的访问</h3><ul>
<li><strong>索引</strong>：每一个存储到数组的元素，都会自动的拥有一个编号，从0开始，这个自动编号称为数组索引（index），可以通过数组的索引访问到数组中的元素。</li>
<li><strong>格式</strong>：</li>
</ul>
<p><code>数组名[索引]</code></p>
<ul>
<li><strong>数组的长度属性</strong>：<strong>每个数组都具有长度，而且是固定的</strong>，Java中赋予了数组的一个属性，可以获取到数组的长度，语句为：<code>数组名.length</code>，属性length的执行结果是数组的长度，int类型结果。由次可以推断出，费组的最大索引值为<code>数组名.length-1</code>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    System.out.println(array.length); <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>索引访问数组中的元素</strong>：<ul>
<li>数组名[索引] = 数组，为数组中的元素赋值</li>
<li>变量 = 数组名[索引]，获取出数组中的元素</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(array.length); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 索引从0开始</span></span><br><span class="line">        System.out.println(array[<span class="number">0</span>]); <span class="comment">// 1</span></span><br><span class="line">        <span class="comment">// length - 1 结束</span></span><br><span class="line">        System.out.println(array[array.length - <span class="number">1</span>]); <span class="comment">// 3</span></span><br><span class="line">        <span class="comment">// 改变索引的值</span></span><br><span class="line">        array[<span class="number">0</span>] = <span class="number">6</span>;</span><br><span class="line">        System.out.println(array[<span class="number">0</span>]); <span class="comment">// 6</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>动态数组的访问</p>
<ul>
<li>如果使用动态初始化数组的时候，其中的元素将会自动拥有一个默认值<ul>
<li>如果是整数类型，默认为0</li>
<li>如果是浮点类型，默认为0.0</li>
<li>如果是字符类型，默认为’\u0000’</li>
<li>如果是布尔类型，默认为false</li>
<li>如果是引用类型，默认为null</li>
</ul>
</li>
</ul>
</li>
<li><p>注意事项</p>
<ul>
<li>静态初始化其实也有默认值的过程，只不过系统马上替换成了大括号中的对应值</li>
</ul>
</li>
</ul>
<h2 id="数组原理内存图"><a href="#数组原理内存图" class="headerlink" title="数组原理内存图"></a>数组原理内存图</h2><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>内存是计算机中的重要原件，临时存储区域，作用是运行程序。我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的，必须放进内存中才能运行，运行完毕后会清空内存。</p>
<p>Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。</p>
<h3 id="Java虚拟机的内存划分"><a href="#Java虚拟机的内存划分" class="headerlink" title="Java虚拟机的内存划分"></a>Java虚拟机的内存划分</h3><p>为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p>
<ul>
<li><p>JVM的内存划分：</p>
<table>
<thead>
<tr>
<th>区域名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>寄存器</td>
<td>给CPU使用，和开发无关</td>
</tr>
<tr>
<td>本地方法栈</td>
<td>JVM在使用操作系统功能的时候使用，和开发无关</td>
</tr>
<tr>
<td>方法区</td>
<td>存储可以运行的Class文件</td>
</tr>
<tr>
<td>堆内存</td>
<td>存储对象或者数组，new来创建的，都存储在堆内存</td>
</tr>
<tr>
<td>方法栈</td>
<td>方法运行时使用的内存，比如main方法运行，进入方法栈中执行</td>
</tr>
</tbody></table>
<p><img data-src="/2020/340249a9/01-Java%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E5%88%92%E5%88%86.png" alt="01-Java中的内存划分"></p>
</li>
</ul>
<h3 id="数组在内存中的存储"><a href="#数组在内存中的存储" class="headerlink" title="数组在内存中的存储"></a>数组在内存中的存储</h3><h4 id="一个数组内存图"><a href="#一个数组内存图" class="headerlink" title="一个数组内存图"></a>一个数组内存图</h4><p><img data-src="/2020/340249a9/02-%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="02-只有一个数组的内存图"></p>
<h4 id="两个数组内存图"><a href="#两个数组内存图" class="headerlink" title="两个数组内存图"></a>两个数组内存图</h4><p><img data-src="/2020/340249a9/03-%E6%9C%89%E4%B8%A4%E4%B8%AA%E7%8B%AC%E7%AB%8B%E6%95%B0%E7%BB%84%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="03-有两个独立数组的内存图"></p>
<h4 id="两个引用指向同一个数组的内存图"><a href="#两个引用指向同一个数组的内存图" class="headerlink" title="两个引用指向同一个数组的内存图"></a>两个引用指向同一个数组的内存图</h4><p><img data-src="/2020/340249a9/04-%E4%B8%A4%E4%B8%AA%E5%BC%95%E7%94%A8%E6%8C%87%E5%90%91%E5%90%8C%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="04-两个引用指向同一个数组的内存图"></p>
<h3 id="数组长度保持不变的内存图"><a href="#数组长度保持不变的内存图" class="headerlink" title="数组长度保持不变的内存图"></a>数组长度保持不变的内存图</h3><p><img data-src="/2020/340249a9/05-%E6%95%B0%E7%BB%84%E7%9A%84%E9%95%BF%E5%BA%A6%E8%BF%90%E8%A1%8C%E6%9C%9F%E9%97%B4%E4%B8%8D%E5%8F%AF%E6%94%B9%E5%8F%98.png" alt="05-数组的长度运行期间不可改变"></p>
<h2 id="数组的常见操作"><a href="#数组的常见操作" class="headerlink" title="数组的常见操作"></a>数组的常见操作</h2><h3 id="数组越界异常"><a href="#数组越界异常" class="headerlink" title="数组越界异常"></a>数组越界异常</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>创建数组</p>
</li>
<li><p>赋值3个元素，数组的索引就是0，1，2</p>
</li>
<li><p>没有3索引，因此我们不能访问数组中不存在的索引</p>
</li>
<li><p>程序运行后，将会抛出<code>ArrayIndexOutofBoundsException</code>数组越界异常</p>
</li>
<li><p>在开发中，数组的越界异常是<strong>不能出现</strong>的，一旦出现了，就必须要修改我们编写的代码</p>
</li>
</ul>
<p><img data-src="/2020/340249a9/image-20200404115449968.png" alt="image-20200404115449968"></p>
<h3 id="数组空指针异常"><a href="#数组空指针异常" class="headerlink" title="数组空指针异常"></a>数组空指针异常</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    arr = <span class="keyword">null</span>;</span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>arr = null;</code>这行代码，意味着变量arr将不会在保存数组的内存地址，也就不允许再操作数组了</p>
<ul>
<li><strong>所有的引用类型变量，都可以赋值为一个null值，代表其中什么都没有</strong></li>
</ul>
</li>
<li><p>因此运行的时候会抛出<code>Nul1PointerException</code>空指针异常</p>
</li>
<li><p>在开发中，数组的空指针异常是不能出现的，一旦出现了，就必须要修改我们编写的代码</p>
</li>
</ul>
<p><img data-src="/2020/340249a9/image-20200404115849231.png" alt="image-20200404115849231"></p>
<h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><p><strong>数组遍历</strong>：就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">           System.out.println(arr[i]);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组获取最大值元素"><a href="#数组获取最大值元素" class="headerlink" title="数组获取最大值元素"></a>数组获取最大值元素</h3><ul>
<li><p>最大值获取：从数组的所有元素中找出最大值。</p>
</li>
<li><p>实现思路：</p>
<ul>
<li>定义变量，保存数组0索引上的元素</li>
<li>遍历数组，获取出数组中的每个元素</li>
<li>将遍历到的元素和保存数组0索引上值的变量进行比较</li>
<li>如果数组元素的值大于了变量的值，变量记录住新的值</li>
<li>数组循环遍历结束，变量保存的就是数组中的最大值</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">321</span>, <span class="number">431</span>, <span class="number">431</span>, <span class="number">431</span>, <span class="number">546</span>, <span class="number">57</span>, <span class="number">48758</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; arr[i]) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h3><ul>
<li>数组的反转：数组中的元素颠倒顺序，实现思想：数组最远端的元素互换位置。<ul>
<li>实现反转，就需要将数组最远端元素位置交换</li>
<li>定义两个变量，保存数组的最小索引和最大索引</li>
<li>两个索引上的元素交换位置</li>
<li>最小索引<code>++</code>，最大索引<code>--</code>，再次交换位置</li>
<li>最小索引超过了最大索引，数组反转操作结束</li>
</ul>
</li>
</ul>
<p><img data-src="/2020/340249a9/07-%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E5%8F%8D%E8%BD%AC%E7%9A%84%E6%80%9D%E8%B7%AF.png" alt="07-数组元素反转的思路"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">321</span>, <span class="number">431</span>, <span class="number">431</span>, <span class="number">431</span>, <span class="number">546</span>, <span class="number">57</span>, <span class="number">48758</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> min = <span class="number">0</span>, max = arr.length - <span class="number">1</span>; min &lt; max; min++, max--) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[min];</span><br><span class="line">        arr[min] = arr[max];</span><br><span class="line">        arr[max] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.print(arr[i] + <span class="string">"\t"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组为方法参数和返回值"><a href="#数组为方法参数和返回值" class="headerlink" title="数组为方法参数和返回值"></a>数组为方法参数和返回值</h2><h3 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h3><ul>
<li><p>数组作为方法的参数</p>
</li>
<li><p>当调用方法的时候，向方法的小括号进行传参，传递进去的其实时数组的地址值</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">321</span>, <span class="number">431</span>, <span class="number">431</span>, <span class="number">431</span>, <span class="number">546</span>, <span class="number">57</span>, <span class="number">48758</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    printArray(arr); <span class="comment">// 传递进去的是arr当中保存的地址值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        System.out.print(array[i] + <span class="string">"\t"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul>
<li>数组作为方法的返回值，返回的是数组的内存地址</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = NewArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] NewArray() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">321</span>, <span class="number">431</span>, <span class="number">431</span>, <span class="number">431</span>, <span class="number">546</span>, <span class="number">57</span>, <span class="number">48758</span>, <span class="number">9</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法的参数类型区别"><a href="#方法的参数类型区别" class="headerlink" title="方法的参数类型区别"></a>方法的参数类型区别</h3><ul>
<li>引用类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]); <span class="comment">// 1</span></span><br><span class="line">    change(arr);</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]); <span class="comment">// 200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    array[<span class="number">0</span>] = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>基本类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        System.out.println(a); <span class="comment">// 1</span></span><br><span class="line">        change(a);</span><br><span class="line">        System.out.println(a); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        a = a + <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>总结<ul>
<li>方法的参数为基本类型时，传递的是数据值，方法的参数为引用类型时，传递的是地址值</li>
</ul>
</li>
</ul>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>方法</title>
    <url>/2020/ad01bc3e/</url>
    <content><![CDATA[<h2 id="方法的定义和调用-回顾"><a href="#方法的定义和调用-回顾" class="headerlink" title="方法的定义和调用(回顾)"></a>方法的定义和调用(回顾)</h2><p>定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名称()&#123;</span><br><span class="line">  方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法名称();</span><br></pre></td></tr></table></figure>

<p>注意事项</p>
<ol>
<li>方法定义的先后顺序无所谓</li>
<li>方法定义必须时挨着的，不能一个方法的内部定义另外一个方法(特殊情况除外)</li>
<li>方法定义之后，自己不会执行的，如果希望执行，一定要进行方法的调用</li>
</ol>
<p>控制台输出矩形</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        print();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="定义格式的格式详解"><a href="#定义格式的格式详解" class="headerlink" title="定义格式的格式详解"></a>定义格式的格式详解</h2><p>方法其实就是若干语句的功能集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法格式：</span><br><span class="line">修饰符 返回值类型 方法名(参数类型 参数名称,...)&#123;</span><br><span class="line">  <span class="comment">//代码</span></span><br><span class="line">  <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>修饰符：现阶段只有public static固定写法</li>
<li>返回值类型：表示方法运行的结果的数据类型，方法执行后将结果返回到调用者</li>
<li>方法名：方法的名称，规则和变量一样，小驼峰</li>
<li>参数类型：进入方法的数据时什么类型</li>
<li>参数名称：进入方法的数据对应的变量名称（参数有多个用逗号分割）</li>
<li>return：两个作用，第一个停止方法，第二个将后面的返回值还给调用处<ul>
<li>return 返回的返回值，必须和方法名称中的返回值类型保持对应</li>
</ul>
</li>
</ul>
<h2 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h2><ul>
<li>定义方法明确<ul>
<li>返回值类型：明确这个方法必定返回的类型</li>
<li>方法名称：明确这个方法是做什么的</li>
<li>参数列表：明确需要传入的值有哪些</li>
</ul>
</li>
</ul>
<p>实现两个整数求和</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewMethodDefine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法三种调用"><a href="#方法三种调用" class="headerlink" title="方法三种调用"></a>方法三种调用</h2><ol>
<li>单独调用：方法名称(参数);</li>
<li>打印调用</li>
<li>赋值调用<ul>
<li>返回值类型固定写为<strong>void</strong>，这种方法只能单独调用，不能进行打印调用和赋值调用</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewMethodDefine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//单独调用</span></span><br><span class="line">        sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//打印调用</span></span><br><span class="line">        System.out.println(sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        <span class="comment">//赋值调用</span></span><br><span class="line">        <span class="keyword">int</span> num = sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="调用方法的流程图"><a href="#调用方法的流程图" class="headerlink" title="调用方法的流程图"></a>调用方法的流程图</h2><p><img data-src="/2020/ad01bc3e/image-20200403103522213.png" alt="image-20200403103522213"></p>
<h2 id="方法区别"><a href="#方法区别" class="headerlink" title="方法区别"></a>方法区别</h2><h3 id="有参数或无参数"><a href="#有参数或无参数" class="headerlink" title="有参数或无参数"></a>有参数或无参数</h3><p>有参数：小括号当中有内容，当一个方法需要一些数据条件，才能完成任务的时候，就是有参数</p>
<p>无参数：小括号当中留空，一个方法不需要任何数据条件，自己就能独立完成任务，就是无参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewMethodDefine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"无参数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="有返回值或无返回值"><a href="#有返回值或无返回值" class="headerlink" title="有返回值或无返回值"></a>有返回值或无返回值</h3><p><img data-src="/2020/ad01bc3e/04-%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E6%9C%89%E6%97%A0.png" alt="04-方法返回值的有无"></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>方法应该定义在类当中，但是不能在方法当中在定义方法，不能嵌套</li>
<li>方法定义的前后顺序无所谓</li>
<li>方法定义之后不会执行，如果希望执行，一定要调用<ul>
<li>单独调用</li>
<li>打印调用</li>
<li>赋值调用</li>
</ul>
</li>
<li>如果方法又返回值，那么必须写上<code>return 返回值;</code></li>
<li>return后面的返回值数据，必须和方法的返回值类型，对应</li>
<li>对于一个void没有返回值的方法，不能写return后面的返回值，只能写return自己</li>
<li>对于void方法当中最后一行的return可以省略不写</li>
<li>一个方法当中可以有多个return语句，但是必须保证同时只有一个会被执行到，两个return不能连写</li>
</ol>
<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><ul>
<li>方法重载：指在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可，与修饰符和返回值类型无关。</li>
<li>参数列表：<ul>
<li>个数不同</li>
<li>数据类型不同</li>
<li>顺序不同</li>
</ul>
</li>
<li>重载方法调用：JVM通过方法的参数列表，调用不同的方法。</li>
<li>优势：只需要记住唯一一个方法名称，就可以实现类似的多个功能</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewMethodOverload</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">1.0</span>, <span class="number">2.0</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">1.0</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (a + b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//错误!与参数名称无关</span></span><br><span class="line">    <span class="comment">//    public static int sum(double x, int y) &#123;</span></span><br><span class="line">    <span class="comment">//        return (int) (x + y);</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//错误!与返回值类型无关</span></span><br><span class="line">    <span class="comment">//    public static double sum(double a, int b) &#123;</span></span><br><span class="line">    <span class="comment">//        return a + b;</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>开发工具Intellij-IDEA</title>
    <url>/2020/2ba40ac9/</url>
    <content><![CDATA[<h2 id="开发工具概述"><a href="#开发工具概述" class="headerlink" title="开发工具概述"></a>开发工具概述</h2><p>IDEA是一个专门针对Java的集成开发工具（IDE），由Java语言编写。所以，需要有JRE运行环境并配置好环境变量它可以极大地提升我们的开发效率。可以自动编译，检查错误。在公司中，使用的就是IDEA进行开发。</p>
<p>下载地址：<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">https://www.jetbrains.com/idea/</a></p>
<p><img data-src="/2020/2ba40ac9/image-20200402170317121.png" alt="image-20200402170317121"></p>
<p><img data-src="/2020/2ba40ac9/image-20200402170351577.png" alt="image-20200402170351577"></p>
<h2 id="IDEA软件安装"><a href="#IDEA软件安装" class="headerlink" title="IDEA软件安装"></a>IDEA软件安装</h2><p>此软件集成了32位和64位，双击<code>ideaIU-2017.3.2.exe</code>进入安装。</p>
<h3 id="欢迎界面"><a href="#欢迎界面" class="headerlink" title="欢迎界面"></a>欢迎界面</h3><p><img data-src="/2020/2ba40ac9/image-20200402170525471.png" alt="image-20200402170525471"></p>
<h3 id="安装路径"><a href="#安装路径" class="headerlink" title="安装路径"></a>安装路径</h3><p><img data-src="/2020/2ba40ac9/image-20200402170544275.png" alt="image-20200402170544275"></p>
<h3 id="配置安装选项"><a href="#配置安装选项" class="headerlink" title="配置安装选项"></a>配置安装选项</h3><p><img data-src="/2020/2ba40ac9/image-20200402170608817.png" alt="image-20200402170608817"></p>
<h3 id="开始菜单"><a href="#开始菜单" class="headerlink" title="开始菜单"></a>开始菜单</h3><p><img data-src="/2020/2ba40ac9/image-20200402170635952.png" alt="image-20200402170635952"></p>
<h3 id="安装完毕"><a href="#安装完毕" class="headerlink" title="安装完毕"></a>安装完毕</h3><p><img data-src="/2020/2ba40ac9/image-20200402170652435.png" alt="image-20200402170652435"></p>
<h2 id="IDEA首次驱动"><a href="#IDEA首次驱动" class="headerlink" title="IDEA首次驱动"></a>IDEA首次驱动</h2><h3 id="选择不导入任何设置，点击OK"><a href="#选择不导入任何设置，点击OK" class="headerlink" title="选择不导入任何设置，点击OK"></a>选择不导入任何设置，点击OK</h3><p><img data-src="/2020/2ba40ac9/image-20200402170744130.png" alt="image-20200402170744130"></p>
<h3 id="选择Create-New-Project"><a href="#选择Create-New-Project" class="headerlink" title="选择Create New Project"></a>选择Create New Project</h3><p><img data-src="/2020/2ba40ac9/image-20200402170816522.png" alt="image-20200402170816522"></p>
<h3 id="点击new按钮，配置安装的JDK版本"><a href="#点击new按钮，配置安装的JDK版本" class="headerlink" title="点击new按钮，配置安装的JDK版本"></a>点击new按钮，配置安装的JDK版本</h3><p><img data-src="/2020/2ba40ac9/image-20200402170854718.png" alt="image-20200402170854718"></p>
<h3 id="选择自己电脑上的JDK目录，点击确定"><a href="#选择自己电脑上的JDK目录，点击确定" class="headerlink" title="选择自己电脑上的JDK目录，点击确定"></a>选择自己电脑上的JDK目录，点击确定</h3><p><img data-src="/2020/2ba40ac9/image-20200402170941742.png" alt="image-20200402170941742"></p>
<p><img data-src="/2020/2ba40ac9/image-20200402171012124.png" alt="image-20200402171012124"></p>
<h3 id="不使用模板"><a href="#不使用模板" class="headerlink" title="不使用模板"></a>不使用模板</h3><p><img data-src="/2020/2ba40ac9/image-20200402171036407.png" alt="image-20200402171036407"></p>
<h3 id="为工程起名称，这里未测试就用的demo，选择存储的位置，如果选择的没有这个目录，会自动创建"><a href="#为工程起名称，这里未测试就用的demo，选择存储的位置，如果选择的没有这个目录，会自动创建" class="headerlink" title="为工程起名称，这里未测试就用的demo，选择存储的位置，如果选择的没有这个目录，会自动创建"></a>为工程起名称，这里未测试就用的demo，选择存储的位置，如果选择的没有这个目录，会自动创建</h3><blockquote>
<p>首次新建项目时，默认的Project Location路径有问题，如<code>c:\\xxx</code>，正确写法为<code>c:\xxx</code>。更改后不会出现此类问题。</p>
</blockquote>
<p><img data-src="/2020/2ba40ac9/image-20200402171237437.png" alt="image-20200402171237437"></p>
<h3 id="打开一个每日一帖对话框，勾掉每次启动显示，点击close"><a href="#打开一个每日一帖对话框，勾掉每次启动显示，点击close" class="headerlink" title="打开一个每日一帖对话框，勾掉每次启动显示，点击close"></a>打开一个每日一帖对话框，勾掉每次启动显示，点击close</h3><p><img data-src="/2020/2ba40ac9/image-20200402171303668.png" alt="image-20200402171303668"></p>
<h3 id="IDEA的工作界面，我们的项目已经创建好了，如果再新建项目，点击File-gt-new-gt-Project"><a href="#IDEA的工作界面，我们的项目已经创建好了，如果再新建项目，点击File-gt-new-gt-Project" class="headerlink" title="IDEA的工作界面，我们的项目已经创建好了，如果再新建项目，点击File-&gt;new-&gt;Project"></a>IDEA的工作界面，我们的项目已经创建好了，如果再新建项目，点击File-&gt;new-&gt;Project</h3><p><img data-src="/2020/2ba40ac9/image-20200402171333076.png" alt="image-20200402171333076"></p>
<h2 id="IDEA的项目结构"><a href="#IDEA的项目结构" class="headerlink" title="IDEA的项目结构"></a>IDEA的项目结构</h2><p><img data-src="/2020/2ba40ac9/02-IDEA%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="02-IDEA的项目结构"></p>
<h3 id="创建包和类"><a href="#创建包和类" class="headerlink" title="创建包和类"></a>创建包和类</h3><p>展开创建的工程，在源代码目录<code>src</code>上，鼠标右键，选择<code>new-&gt;package</code>，输入包名<code>com.itheima.demo</code>（随便你自己）点击确定。</p>
<p><img data-src="/2020/2ba40ac9/image-20200402171834576.png" alt="image-20200402171834576"></p>
<p>右键点击<code>com.itheima.demo</code>，选择<code>Show in Explorer</code>，会发现创建包的目录结构。</p>
<p><img data-src="/2020/2ba40ac9/image-20200402171910062.png" alt="image-20200402171910062"></p>
<p>在创建好的包上，鼠标右键，选择<code>new-&gt;class</code>创建类，键入类名。</p>
<p><img data-src="/2020/2ba40ac9/image-20200402172005458.png" alt="image-20200402172005458"></p>
<p>在代码编辑区，键入主方法，并输出<code>HelloWorld</code></p>
<p><img data-src="/2020/2ba40ac9/image-20200402172028412.png" alt="image-20200402172028412"></p>
<p>运行程序，在代码编辑区鼠标右键，选择<code>Run HelloWorld</code>即可，或在菜单中选择<code>Run-&gt;Run HelloWor1d</code></p>
<p><img data-src="/2020/2ba40ac9/image-20200402172155375.png" alt="image-20200402172155375"></p>
<h2 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h2><p>IDEA工具的默认字体非常小，代码编辑器和控制台的输出字体都需要进行调整。</p>
<ul>
<li>点击菜单栏上的<code>File-&gt;Settings-&gt;Editor-&gt;Font</code>修改字体。</li>
</ul>
<p><img data-src="/2020/2ba40ac9/image-20200402172320302.png" alt="image-20200402172320302"></p>
<p><img data-src="/2020/2ba40ac9/image-20200402172334670.png" alt="image-20200402172334670"></p>
<h2 id="IDEA的项目目录"><a href="#IDEA的项目目录" class="headerlink" title="IDEA的项目目录"></a>IDEA的项目目录</h2><ul>
<li>我们创建的项目，在<code>d:videawork</code>目录的<code>demo</code>下<ul>
<li><code>.idea</code>目录和<code>demo.iml</code>和我们开发无关，是IDEA工具自己使用的</li>
<li><code>out</code>目录是存储编译后的<code>.class</code>文件</li>
<li><code>src</code>目录是存储我们编写的<code>.java</code>源文件</li>
</ul>
</li>
</ul>
<p><img data-src="/2020/2ba40ac9/image-20200402172453930.png" alt="image-20200402172453930"></p>
<h2 id="IDEA常用快捷键"><a href="#IDEA常用快捷键" class="headerlink" title="IDEA常用快捷键"></a>IDEA常用快捷键</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>Alt+Enter</code></td>
<td>导入包，自动修正代码</td>
</tr>
<tr>
<td><code>Ctrl+Y</code></td>
<td>删除光标所在行</td>
</tr>
<tr>
<td><code>Ctrl+D</code></td>
<td>复制光标所在行的内容，插入光标位置下面</td>
</tr>
<tr>
<td><code>Ctrl+Alt+L</code></td>
<td>格式化代码</td>
</tr>
<tr>
<td><code>Ctrl+/</code></td>
<td>单行注释</td>
</tr>
<tr>
<td><code>Ctrl+Shift+/</code></td>
<td>选中代码注释，多行注释，再按取消注释</td>
</tr>
<tr>
<td><code>Alt+Ins</code></td>
<td>自动生成代码，toString，get，set等方法</td>
</tr>
<tr>
<td><code>Alt+Shift+上下箭头</code></td>
<td>移动当前代码行</td>
</tr>
</tbody></table>
<h2 id="IDEA修改快捷键"><a href="#IDEA修改快捷键" class="headerlink" title="IDEA修改快捷键"></a>IDEA修改快捷键</h2><p>在IDEA工具中，<code>ctrl+空格</code>的快捷键，可以帮助我们补全代码，但是这个快捷键和Windows中的输入法切换快捷键冲突，需要修改IDEA中的快捷键。</p>
<p><code>File-&gt;Settings-&gt;keymap-&gt;Main menu-&gt;code-&gt;Completion-&gt;Basic</code></p>
<p><img data-src="/2020/2ba40ac9/image-20200402173148296.png" alt="image-20200402173148296"></p>
<p>双击<code>Basic-&gt;remove-&gt;Ctrl+空格</code></p>
<p><img data-src="/2020/2ba40ac9/image-20200402173230646.png" alt="image-20200402173230646"></p>
<p>再双击<code>Basic-&gt;Add Keyboard-&gt;输入 Alt+/-&gt;点击OK</code></p>
<p><img data-src="/2020/2ba40ac9/image-20200402173336235.png" alt="image-20200402173336235"></p>
<h2 id="IDEA导入和关闭项目"><a href="#IDEA导入和关闭项目" class="headerlink" title="IDEA导入和关闭项目"></a>IDEA导入和关闭项目</h2><p>关闭IDEA中已经存在的项目，<code>File-&gt;Close Project</code></p>
<p><img data-src="/2020/2ba40ac9/image-20200402173432324.png" alt="image-20200402173432324"></p>
<p><code>File-&gt;Close Project</code>这时IDEA回到了刚启动界面，点击项目上的<code>x</code>，IDEA中就没有这个项目了</p>
<p><img data-src="/2020/2ba40ac9/image-20200402173507196.png" alt="image-20200402173507196"></p>
<p>在IDEA启界面上，点击<code>OPEN</code>，选择项目目录即可</p>
<p><img data-src="/2020/2ba40ac9/image-20200402173526958.png" alt="image-20200402173526958"></p>
<blockquote>
<p>若想通过IDEA同时开多个项目，点击OPEN打开项目时，点击New Window按钮</p>
</blockquote>
<p>![image-20200402173626718](14.开发工具Intellij IDEA/image-20200402173626718.png)</p>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>循环语句</title>
    <url>/2020/b38e349f/</url>
    <content><![CDATA[<h2 id="循环概述"><a href="#循环概述" class="headerlink" title="循环概述"></a>循环概述</h2><p>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复执行这个循环体时，需要在合适的时候把循环判断条件修改为<strong>false</strong>，从而结束循环，否则循环将一直执行下去，形成死循环。</p>
<p>循环结构的基本组成部分，一般可以分成四部分：</p>
<ul>
<li>初始化语句：在循环开始最初执行，而且只做唯一一次</li>
<li>条件判断：如果成立，则循环继续，如不不成立，则循环推出</li>
<li>循环体：重复要做的事情内容，若干行语句</li>
<li>步进语句：每次循环之后都要进行的扫尾工作，每次循环结束之后都要执行一次</li>
</ul>
<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><ul>
<li>for循环语句格式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式① ; 布尔表达式② ; 步进表达式④)&#123;</span><br><span class="line">  循环体③;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopStatement</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span><span class="comment">/*初始化表达式*/</span>; i &lt; <span class="number">50</span><span class="comment">/*布尔表达式*/</span>; i++<span class="comment">/*步进表达式*/</span>) &#123;</span><br><span class="line">      <span class="comment">//循环体③</span></span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(i); <span class="comment">//50</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="for的流程图"><a href="#for的流程图" class="headerlink" title="for的流程图"></a>for的流程图</h4><ul>
<li>执行顺序：①②③④&gt;②③④&gt;②③④…直到②不满住为止</li>
<li>①负责完成循环变量初始化</li>
<li>②负责判断是否满足循环条件，不满足则跳出循环</li>
<li>③具体执行的语句</li>
<li>④循环后，循环条件所涉及变量的变化情况</li>
</ul>
<p><img data-src="/2020/b38e349f/05-for%E5%BE%AA%E7%8E%AF%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="05-for循环的流程图"></p>
<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>while循环有一个标准格式，还有一个扩展格式</p>
<ul>
<li>标准格式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件判断)&#123;</span><br><span class="line">  循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>扩展格式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">初始化表达式①</span><br><span class="line"><span class="keyword">while</span>(条件判断②)&#123;</span><br><span class="line">  循环体③;</span><br><span class="line">  步进表达式④;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopStatement</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// 初始化表达式</span></span><br><span class="line">		<span class="keyword">while</span>(i &lt; <span class="number">50</span><span class="comment">/*条件判断*/</span>)&#123;</span><br><span class="line">			<span class="comment">//循环体③</span></span><br><span class="line">			i++; <span class="comment">// 步进表达式</span></span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(i); <span class="comment">//50</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="while的流程图"><a href="#while的流程图" class="headerlink" title="while的流程图"></a>while的流程图</h3><ul>
<li>执行顺序：①②③④&gt;②③④&gt;②③④…直到②不满住为止</li>
<li>①负责完成循环变量初始化</li>
<li>②负责判断是否满足循环条件，不满足则跳出循环</li>
<li>③具体执行的语句</li>
<li>④循环后，循环变量的变化情况</li>
</ul>
<p><img data-src="/2020/b38e349f/06-while%E5%BE%AA%E7%8E%AF%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="06-while循环的流程图"></p>
<h2 id="do…while"><a href="#do…while" class="headerlink" title="do…while"></a>do…while</h2><p>do…while循环有一个标准格式，还有一个扩展格式</p>
<ul>
<li>标准格式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  循环体;</span><br><span class="line">&#125; <span class="keyword">while</span> (条件判断);</span><br></pre></td></tr></table></figure>

<ul>
<li>扩展格式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">初始化表达式①</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  循环体③;</span><br><span class="line">  步进表达式④</span><br><span class="line">&#125; <span class="keyword">while</span> (布尔表达式②);</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopStatement</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// 初始化表达式</span></span><br><span class="line">		<span class="keyword">do</span>&#123;</span><br><span class="line">			<span class="comment">//循环体</span></span><br><span class="line">			i++; <span class="comment">// 步进表达式</span></span><br><span class="line">		&#125;<span class="keyword">while</span>(i &lt; <span class="number">50</span><span class="comment">/*布尔表达式*/</span>);</span><br><span class="line">		System.out.println(i); <span class="comment">//50</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="do…while的流程图"><a href="#do…while的流程图" class="headerlink" title="do…while的流程图"></a>do…while的流程图</h3><ul>
<li>执行顺序：①②③④&gt;②③④&gt;②③④…直到②不满住为止</li>
<li>①负责完成循环变量初始化</li>
<li>②负责判断是否满足循环条件，不满足则跳出循环</li>
<li>③具体执行的语句</li>
<li>④循环后，循环变量的变化情况</li>
</ul>
<p><img data-src="/2020/b38e349f/image-20200402161047519.png" alt="image-20200402161047519"></p>
<h2 id="循环语句的区别"><a href="#循环语句的区别" class="headerlink" title="循环语句的区别"></a>循环语句的区别</h2><ul>
<li><strong>for</strong>和<strong>while</strong>的小区别：<ul>
<li>控制条件语句所控制的那个变量，在for循环结束后，就不能再被访问到了，而while循环结束还可以继续使用，如果你想继续使用，就用while，否则推荐使用for。原因是for循环结束，该变量就从内存中消失，能够提高内存的使用效率</li>
<li>如果条件判断从来没有满足过，那么for循环和while循环将会执行0次，但是do…while循环会执行至少一次</li>
<li>在已知循环次数的时候使用推荐使用for，循环次数未知的时推荐使用while</li>
</ul>
</li>
</ul>
<h2 id="跳出语句"><a href="#跳出语句" class="headerlink" title="跳出语句"></a>跳出语句</h2><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>常用的两种：</p>
<ol>
<li>可以用在switch语句当中，一旦执行，整个switch语句立刻结束</li>
<li>还可以用在循环语句当中，一旦执行，整个循环语句立刻结束，打断循环</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopStatement</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i == <span class="number">4</span>)&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(i);</span><br><span class="line">		&#125;				</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><ul>
<li>一旦执行，立刻跳过当次循环剩余内容，马上开始下次循环</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopStatement</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i == <span class="number">4</span>)&#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(i);</span><br><span class="line">		&#125;				</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="循环拓展"><a href="#循环拓展" class="headerlink" title="循环拓展"></a>循环拓展</h2><h3 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h3><ul>
<li>死循环：也就是循环中的条件永远为true，死循环的是永不结束的循环。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在后期的开发中，会出现使用死循环的场景，例如：我们需要读取用户输入的输入，但是用户输入多少数据我们不清楚，也只能使用死循环，当用户不想输入数据了，就可以结束循环了，如何去结束一个死循环呢，就需要使用到跳出语句了。</p>
<h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><p>所谓嵌套循环，是指一个循环的循环体是另一个循环。比如for循环里面还有一个for循环，就是嵌套循环。总共的循环次数=外循环次数*内循环次数</p>
<ul>
<li>格式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式① ; 循环条件② ; 步进表达式⑦)&#123;</span><br><span class="line"> 	<span class="keyword">for</span>(初始化表达式③ ; 循环条件④ ; 步进表达式⑥)&#123;</span><br><span class="line">    执行语句⑤;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopStatement</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;<span class="number">10</span>; j++) &#123;</span><br><span class="line">				System.out.println(i+<span class="string">"------&gt;"</span>+j);</span><br><span class="line">			&#125;			</span><br><span class="line">		&#125;				</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="嵌套循环执行流程"><a href="#嵌套循环执行流程" class="headerlink" title="嵌套循环执行流程"></a>嵌套循环执行流程</h4><ul>
<li>执行流程：①②③④⑤⑥&gt;④⑤⑥&gt;⑦②③④⑤⑥&gt;④⑤⑥</li>
<li>外循环一次，内循环多次</li>
</ul>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>添加abbrlink后图片无法显示</title>
    <url>/2020/a22adf80/</url>
    <content><![CDATA[<p>在以前安装了<a href="https://github.com/7ym0n/hexo-asset-image.git" target="_blank" rel="noopener">hexo-asset-image</a>,在创建新的md时会在,同级目录下创建名称相同的文件夹,用来存放图片.</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>但添加abbrlink后图片地址就发生了错误无法正确的找到图片的地址</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>我的基础设置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year/:title.md</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:abbrlink/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span></span><br></pre></td></tr></table></figure>
<p>用修改过的hexo-asset-image</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/isGuard/hexo-asset-image --save</span><br></pre></td></tr></table></figure>



<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>对Hexo博客静态资源进行压缩</title>
    <url>/2020/69416b20/</url>
    <content><![CDATA[<h2 id="安装gulp相关依赖"><a href="#安装gulp相关依赖" class="headerlink" title="安装gulp相关依赖"></a>安装gulp相关依赖</h2><p>首先将 <code>gulp</code> 安装到全局中，否则无法使用，百度到的各种博客文章，就没有人说过这个问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gulp -g</span><br><span class="line"></span><br><span class="line">npm install gulp --save</span><br><span class="line">npm install gulp-imagemin --save</span><br><span class="line">npm install gulp-minify-css --save</span><br><span class="line">npm install gulp-minify-html --save</span><br><span class="line">npm install gulp-uglify --save</span><br><span class="line">npm install gulp-babel --save</span><br><span class="line">npm install babel-core --save</span><br><span class="line">npm install babel-loader --save </span><br><span class="line">npm install babel-preset-es2015 --save</span><br><span class="line">npm install imagemin-pngquant --save</span><br><span class="line">npm install gulp-cache --save</span><br></pre></td></tr></table></figure>
<p>注意:<br>babel-loader (7.15)、babel-core(6.xx)和gulp-bael(7.0x)的版本</p>
<h2 id="创建-gulpfile-js"><a href="#创建-gulpfile-js" class="headerlink" title="创建 gulpfile.js"></a>创建 gulpfile.js</h2><p>在 <code>Hexo</code> 博客的根目录下面，创建一个 <code>gulpfile.js</code> 文件，这个名字不可改，必须是这个名字。<br>在刚创建的文件中写入如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Plugins模块获取</span></span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> minifyhtml = <span class="built_in">require</span>(<span class="string">'gulp-minify-html'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录 css文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">    	.pipe(<span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Plugins模块获取</span></span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> minifyhtml = <span class="built_in">require</span>(<span class="string">'gulp-minify-html'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pngquant = <span class="built_in">require</span>(<span class="string">'imagemin-pngquant'</span>);</span><br><span class="line"><span class="keyword">var</span> cache = <span class="built_in">require</span>(<span class="string">'gulp-cache'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录 css文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录 html文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">        .pipe(minifyhtml())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">        .pipe(babel(</span><br><span class="line">        &#123;<span class="attr">presets</span>: [<span class="string">'es2015'</span>]&#125;</span><br><span class="line">        ))</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public/posts 目录 图片文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-img'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/**/*.*'</span>)</span><br><span class="line">        .pipe(cache(imagemin(&#123;                     <span class="comment">//启用缓存，只压缩发生变化的图片</span></span><br><span class="line">            progressive: <span class="literal">true</span>,                     <span class="comment">//是否无损压缩jpg图片</span></span><br><span class="line">            interlaced: <span class="literal">false</span>,                     <span class="comment">//是否隔行扫描gif进行渲染</span></span><br><span class="line">            svgoPlugins: [&#123;<span class="attr">removeViewBox</span>: <span class="literal">false</span>&#125;], <span class="comment">//是否移除svg的viewbox属性</span></span><br><span class="line">            multipass: <span class="literal">false</span>,                      <span class="comment">//是否多次优化svg直到完全优化</span></span><br><span class="line">            optimizationLevel: <span class="number">5</span>,                  <span class="comment">//优化等级，取值范围：0-7，默认值：3</span></span><br><span class="line">            use: [pngquant()]                      <span class="comment">//使用pngquant深度压缩png图片的imagemin插件</span></span><br><span class="line">        &#125;)))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分别执行css、heml、js和图片的压缩任务</span></span><br><span class="line">gulp.task(<span class="string">'build'</span>, gulp.series(<span class="string">'minify-css'</span>, <span class="string">'minify-html'</span>, <span class="string">'minify-js'</span>, <span class="string">'minify-img'</span>));</span><br><span class="line">babel(</span><br><span class="line">    	&#123;<span class="attr">presets</span>: [<span class="string">'es2015'</span>]&#125;</span><br><span class="line">    	))</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录 html文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">        .pipe(minifyhtml())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public/posts 目录 图片文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-img'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/**/*.*'</span>)</span><br><span class="line">        .pipe(imagemin(</span><br><span class="line">            [</span><br><span class="line">                imagemin.gifsicle(&#123;</span><br><span class="line">                    <span class="string">'optimizationLevel'</span>: <span class="number">3</span></span><br><span class="line">                &#125;),</span><br><span class="line">                imagemin.jpegtran(&#123;</span><br><span class="line">                    <span class="string">'progressive'</span>: <span class="literal">true</span></span><br><span class="line">                &#125;),</span><br><span class="line">                imagemin.optipng(&#123;</span><br><span class="line">                    <span class="string">'optimizationLevel'</span>: <span class="number">7</span></span><br><span class="line">                &#125;),</span><br><span class="line">                imagemin.svgo()</span><br><span class="line">            ], &#123;</span><br><span class="line">                <span class="string">'verbose'</span>: <span class="literal">true</span></span><br><span class="line">            &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分别执行css、heml、js和图片的压缩任务</span></span><br><span class="line">gulp.task(<span class="string">'build'</span>, gulp.series(<span class="string">'minify-css'</span>, <span class="string">'minify-html'</span>, <span class="string">'minify-js'</span>, <span class="string">'minify-img'</span>));</span><br></pre></td></tr></table></figure>
<p>注意:</p>
<ul>
<li>以上代码是运行在 <code>gulp4</code> 环境的，与 <code>gulp3</code> 不通用</li>
<li>图片压缩速度很慢，若不需要压缩图片，请将第52行的代码中的 <code>&#39;minify-img&#39;</code> 删除，忽略其它文件压缩同理。<h2 id="对代码进行压缩"><a href="#对代码进行压缩" class="headerlink" title="对代码进行压缩"></a>对代码进行压缩</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">gulp</span> <span class="string">build</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure>
先清空文件，生成静态文件，然后使用 <code>gulp</code> 命令对代码进行压缩，最后将其推送到服务器就行了</li>
</ul>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>选择语句</title>
    <url>/2020/54b98eca/</url>
    <content><![CDATA[<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><ul>
<li><strong>switch语句格式</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">  <span class="keyword">case</span> 常量值<span class="number">1</span>:</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 常量值<span class="number">2</span>:</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectAStatement</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span>(num)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				System.out.println(<span class="string">"星期一"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				System.out.println(<span class="string">"星期二"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				System.out.println(<span class="string">"星期三"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">				System.out.println(<span class="string">"星期四"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">				System.out.println(<span class="string">"星期五"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">				System.out.println(<span class="string">"星期六"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">				System.out.println(<span class="string">"星期日"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				System.out.println(<span class="string">"数据有误"</span>);</span><br><span class="line">				<span class="keyword">break</span>;	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="switch的流程图"><a href="#switch的流程图" class="headerlink" title="switch的流程图"></a>switch的流程图</h3><ul>
<li>首先计算出表达式的值</li>
<li>其次和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到<strong>break</strong>就会结束</li>
<li>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束</li>
</ul>
<p><img data-src="/2020/54b98eca/image-20200402150825436.png" alt="image-20200402150825436"></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>多个case后面的数值不可以重复</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectAStatement</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">switch</span>(num)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:  <span class="comment">// 错误: case 标签重复</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="keyword">break</span>;	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>switch后面小括号当中只能是下列数据类型<ul>
<li>基本数据类型：byte/short/char/int</li>
<li>引用数据类型：String（jdk1.7以后支持）、enum枚举</li>
</ul>
</li>
<li>switch语句格式可以很灵活：前后顺序可以颠倒，而且break语句还可以省略<ul>
<li>但是case的后面的break不写，会出现穿透现象，也就是不会再判断下一个case的值，直接向后运行，直到遇到break或者整体switch结束</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectAStatement</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">switch</span>(num)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				System.out.println(<span class="string">"输出1"</span>);</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:  </span><br><span class="line">				System.out.println(<span class="string">"输出2"</span>);</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				System.out.println(<span class="string">"输出default"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 输出1</span></span><br><span class="line">		<span class="comment">// 输出2</span></span><br><span class="line">		<span class="comment">// 输出default</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>判断语句</title>
    <url>/2020/4222aa87/</url>
    <content><![CDATA[<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul>
<li><strong>if语句的第一种格式</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式)&#123;</span><br><span class="line"> 语句体; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JudgmentStatementIf</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span> (a == <span class="number">10</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"a等于10"</span>); </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>( a == <span class="number">20</span>)&#123;</span><br><span class="line">			System.out.println(<span class="string">"a等于20"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">    <span class="comment">// 只显示了:a等于10</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="if的流程图"><a href="#if的流程图" class="headerlink" title="if的流程图"></a>if的流程图</h3><ul>
<li>首先判断关系表达式看其结果是true还是false</li>
<li>如果是rue就执行语句体</li>
<li>如果是false就不执行语句体</li>
</ul>
<p><img data-src="/2020/4222aa87/02-%E5%8D%95if%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="02-单if语句的流程图"></p>
<h2 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h2><ul>
<li><strong>if语句第二种格式</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式)&#123;</span><br><span class="line">	语句体<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JudgmentStatementIf</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span> (a == <span class="number">10</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"a等于10"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"a不等于10"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="if…else的流程图"><a href="#if…else的流程图" class="headerlink" title="if…else的流程图"></a>if…else的流程图</h3><ul>
<li>首先判断关系表达式看其结果的true还是false</li>
<li>如果true就执行语句体1</li>
<li>如果false就执行语句体2</li>
</ul>
<p><img data-src="/2020/4222aa87/03-%E6%A0%87%E5%87%86if-else%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="03-标准if-else语句的流程图"></p>
<h2 id="if…else-if…else"><a href="#if…else-if…else" class="headerlink" title="if…else if…else"></a>if…else if…else</h2><ul>
<li><strong>if语句第三种格式</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (判断条件<span class="number">1</span>)&#123;</span><br><span class="line">	执行语句<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(判断条件<span class="number">2</span>)&#123;</span><br><span class="line">	执行语句<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(判断条件n)&#123;</span><br><span class="line">	执行语句n;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">  执行语句n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JudgmentStatementIf</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">30</span>;</span><br><span class="line">		<span class="keyword">if</span> (a == <span class="number">10</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"a等于10"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">20</span>)&#123;</span><br><span class="line">			System.out.println(<span class="string">"a等于20"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"a不等于10也不等于20"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="if…else-if…else的流程图"><a href="#if…else-if…else的流程图" class="headerlink" title="if…else if…else的流程图"></a>if…else if…else的流程图</h3><ul>
<li>首先判断关系表达式1看其结果是true还是false</li>
<li>如果是true就执行语句体1</li>
<li>如果是false就继续判断关系表达式2看其结果是true还是false</li>
<li>如果是true就执行语句体2</li>
<li>如果是false就继续判断关系表达式看其结果是true还是false</li>
<li>…</li>
<li>如果没有任何关系表达式为true，就执行语句体n+1</li>
</ul>
<p><img data-src="/2020/4222aa87/04-%E6%89%A9%E5%B1%95if-else%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="04-扩展if-else语句的流程图"></p>
<h2 id="if语句和三元运算符的互换"><a href="#if语句和三元运算符的互换" class="headerlink" title="if语句和三元运算符的互换"></a>if语句和三元运算符的互换</h2><p>在某些简单的应用中,if语句是可以和三元运算符互换使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 比较两个值的大小</span></span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">int</span> b = <span class="number">30</span>;</span><br><span class="line">  <span class="comment">// 保存a和b的较大值</span></span><br><span class="line">  <span class="keyword">int</span> c;</span><br><span class="line">  <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">    c = a;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    c = b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//三元运算符</span></span><br><span class="line">  c = a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>顺序结构</title>
    <url>/2020/25dc0574/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在一个程序执行的过程中，各象语句的执行顺序对程序的结果是有直接影响的，也就是说，程序的流程对运行结果有直接的影响。所以，我们必须清楚每条语句的执行流程。而且，很多时候我们要通过控制语句的执行顺序来实现我们要完成的功能。</p>
<h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><p>顺序执行,根据编写的顺序,从上到下运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sequence</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//顺序执行,根据编写的顺序,从上到下运行</span></span><br><span class="line">    System.out.print(<span class="string">"先"</span>);</span><br><span class="line">    System.out.print(<span class="string">"中"</span>);</span><br><span class="line">    System.out.print(<span class="string">"后"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="顺序结构的流程图"><a href="#顺序结构的流程图" class="headerlink" title="顺序结构的流程图"></a>顺序结构的流程图</h3><p><img data-src="/2020/25dc0574/01-%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="01-顺序结构的流程图"></p>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JShell脚本工具</title>
    <url>/2020/13376d28/</url>
    <content><![CDATA[<h1 id="JShell脚本工具"><a href="#JShell脚本工具" class="headerlink" title="JShell脚本工具"></a>JShell脚本工具</h1><p>JShell脚本工具是JDK9的新特性</p>
<p>从java9开始，java开始引入了类似于python的交互式 REPL（Read-Eval-Print Loop，读取-求值-输出 循环）工具。官方的表述如下：</p>
<blockquote>
<p>The Java Shell tool (JShell) is an interactive tool for learning the Java programming language and prototyping Java code. JShell is a Read-Evaluate-Print Loop (REPL), which evaluates declarations, statements, and expressions as they are entered and immediately shows the results. The tool is run from the command line.</p>
</blockquote>
<p>简而言之，使用 JShell，你可以输入代码片段并马上看到运行结果，然后就可以根据需要作出调整。官方的表述如下：</p>
<blockquote>
<p>JShell helps you try out code and easily explore options as you develop your program. You can test individual statements, try out different variations of a method, and experiment with unfamiliar APIs within the JShell session. JShell doesn’t replace an IDE. As you develop your program, paste code into JShell to try it out, and then paste working code from JShell into your program editor or IDE.</p>
</blockquote>
<p>什么时候会用到<code>JShell</code>工具呢，当我们编写的代码非常少的时候，而又不愿意编写类，main方法，也不愿意去编译和运行，这个时候可以使用Shell工具。</p>
<p>启动Shell工具，在DOS命令行直接输入JShell命令。</p>
<p><img data-src="/2020/13376d28/image-20200401173052296.png" alt="image-20200401173052296"></p>
<p>接下来可以编写Java代码，无需写类和方法，直接写方法中的代码即可，同时无需编译和运行，直接回车即可</p>
<p><img data-src="/2020/13376d28/image-20200401173119744.png" alt="image-20200401173119744"></p>
<p>当然我门也可以在JShell里定义函数方法</p>
<p><img data-src="/2020/13376d28/2726392-c425eceb3af74ae9.webp" alt="img"></p>
<p>这样我们就创建了一个方法。接下来使用我们的方法。</p>
<p><img data-src="/2020/13376d28/2726392-d0942ddba42c8889.webp" alt="img"></p>
<p>那么从上面的这些例子我们可以看出，Jshell是可以执行我们的任何代码片段。但有个问题，就是加入我声明多个函数之后，我忘了那个是哪个，怎么办呢？所以我们需要学习Jshell提供给我们的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jshell&gt; /<span class="built_in">help</span></span><br><span class="line">|  键入 Java 语言表达式, 语句或声明。</span><br><span class="line">|  或者键入以下命令之一:</span><br><span class="line">|  /list [&lt;名称或 id&gt;|-all|-start]</span><br><span class="line">|       列出您键入的源</span><br><span class="line">|  /edit &lt;名称或 id&gt;</span><br><span class="line">|       编辑源条目</span><br><span class="line">|  /drop &lt;名称或 id&gt;</span><br><span class="line">|       删除源条目</span><br><span class="line">|  /save [-all|-<span class="built_in">history</span>|-start] &lt;文件&gt;</span><br><span class="line">|       将片段源保存到文件</span><br><span class="line">|  /open &lt;file&gt;</span><br><span class="line">|       打开文件作为源输入</span><br><span class="line">|  /vars [&lt;名称或 id&gt;|-all|-start]</span><br><span class="line">|       列出已声明变量及其值</span><br><span class="line">|  /methods [&lt;名称或 id&gt;|-all|-start]</span><br><span class="line">|       列出已声明方法及其签名</span><br><span class="line">|  /types [&lt;名称或 id&gt;|-all|-start]</span><br><span class="line">|       列出类型声明</span><br><span class="line">|  /imports</span><br><span class="line">|       列出导入的项</span><br><span class="line">|  /<span class="built_in">exit</span> [&lt;<span class="built_in">integer</span>-expression-snippet&gt;]</span><br><span class="line">|       退出 jshell 工具</span><br><span class="line">|  /env [-class-path &lt;路径&gt;] [-module-path &lt;路径&gt;] [-add-modules &lt;模块&gt;] ...</span><br><span class="line">|       查看或更改评估上下文</span><br><span class="line">|  /reset [-class-path &lt;路径&gt;] [-module-path &lt;路径&gt;] [-add-modules &lt;模块&gt;]...</span><br><span class="line">|       重置 jshell 工具</span><br><span class="line">|  /reload [-restore] [-quiet] [-class-path &lt;路径&gt;] [-module-path &lt;路径&gt;]...</span><br><span class="line">|       重置和重放相关历史记录 -- 当前历史记录或上一个历史记录 (-restore)</span><br><span class="line">|  /<span class="built_in">history</span></span><br><span class="line">|       您键入的内容的历史记录</span><br><span class="line">|  /<span class="built_in">help</span> [&lt;<span class="built_in">command</span>&gt;|&lt;subject&gt;]</span><br><span class="line">|       获取有关使用 jshell 工具的信息</span><br><span class="line">|  /<span class="built_in">set</span> editor|start|feedback|mode|prompt|truncation|format ...</span><br><span class="line">|       设置配置信息</span><br><span class="line">|  /? [&lt;<span class="built_in">command</span>&gt;|&lt;subject&gt;]</span><br><span class="line">|       获取有关使用 jshell 工具的信息</span><br><span class="line">|  /!</span><br><span class="line">|       重新运行上一个片段 -- 请参阅 /<span class="built_in">help</span> rerun</span><br><span class="line">|  /&lt;id&gt;</span><br><span class="line">|       按 ID 或 ID 范围重新运行片段 -- 参见 /<span class="built_in">help</span> rerun</span><br><span class="line">|  /-&lt;n&gt;</span><br><span class="line">|       重新运行以前的第 n 个片段 -- 请参阅 /<span class="built_in">help</span> rerun</span><br><span class="line">|</span><br><span class="line">|  有关详细信息, 请键入 <span class="string">'/help'</span>, 后跟</span><br><span class="line">|  命令或主题的名称。</span><br><span class="line">|  例如 <span class="string">'/help /list'</span> 或 <span class="string">'/help intro'</span>。主题:</span><br><span class="line">|</span><br><span class="line">|  intro</span><br><span class="line">|       jshell 工具的简介</span><br><span class="line">|  id</span><br><span class="line">|       片段 ID 以及如何使用它们的说明</span><br><span class="line">|  shortcuts</span><br><span class="line">|       片段和命令输入提示, 信息访问以及</span><br><span class="line">|       自动代码生成的按键说明</span><br><span class="line">|  context</span><br><span class="line">|       /env /reload 和 /reset 的评估上下文选项的说明</span><br><span class="line">|  rerun</span><br><span class="line">|       重新评估以前输入片段的方法的说明</span><br></pre></td></tr></table></figure>



<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>方法入门</title>
    <url>/2020/369d0bf1/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我们在学习运算符的时候，都为每个运算符单独的创建一个新的类和main方法，我们会发现这样编写代码非常的繁琐，而且重复的代码过多，能否避免这些重复的代码呢，就需要使用方法来实现。</p>
<ul>
<li><strong>方法</strong>：就是将一个<strong>功能</strong>抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。</li>
</ul>
<p>当我们需要这个功能的时候，就可以去调用。这样即实现了代码的复用性，也解决了代码冗余的现象。</p>
<h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><ul>
<li><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名 (参数列表) &#123;</span><br><span class="line">  代码...</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>格式结束：</p>
<ul>
<li>修饰符：目前固定格式<code>public static</code></li>
<li>返回值类型：目前固定写发<code>void</code></li>
<li>方法名：给定义的方法起一个名称，满足标识符规范，<strong>强烈推荐小驼峰</strong></li>
<li>参数列表：目前无参数</li>
<li><strong>return</strong>：方法结束。返回值类型为<strong>void</strong>时，方法体中的<strong>return</strong>可以不写</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewMethod</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> viod <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> staitc <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"test"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><p>方法在定义完毕后，方法不会自己运行，必须被调用才能执行，我们可以在主方法main中来调用我们自己定义好的方法。在主方法中，直接写要调用的方法名字就可以调用了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewMethod</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> viod <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="comment">//调用test方法</span></span><br><span class="line">    test();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> staitc <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"test"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ul>
<li>方法定义注意事项：<ul>
<li>方法必须定义在一类中方法外</li>
<li>方法不能定义在另一个方法的里面</li>
</ul>
</li>
</ul>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>运算符</title>
    <url>/2020/f29265a7/</url>
    <content><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>运算符：进行特定操作的符号。如：+</p>
<p>表达式：用运算符连起来的式子。如：a + b</p>
<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><table>
<thead>
<tr>
<th>算术运算符：</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>+</code></td>
<td>加法运算，字符串连接运算</td>
</tr>
<tr>
<td><code>-</code></td>
<td>减法运算</td>
</tr>
<tr>
<td><code>*</code></td>
<td>乘法运算</td>
</tr>
<tr>
<td><code>/</code></td>
<td>除法运算</td>
</tr>
<tr>
<td><code>%</code></td>
<td>取模运算，两个数字相除取余数</td>
</tr>
<tr>
<td><code>++</code></td>
<td>自增运算</td>
</tr>
<tr>
<td><code>--</code></td>
<td>自减运算</td>
</tr>
</tbody></table>
<ul>
<li>两个常量之间可以进行数学运算</li>
<li>两个变量之家也可以进行数学运算</li>
<li>变量和常量之间可以混合运算</li>
<li>变量和常量之间可以混合使用</li>
<li>除法用的是整除，整数除以整数，结果也是整数，只看商，不看余数</li>
<li>取模运算:取的余数（只是对于整数的除法来说，取模运算符才有余数的意义）</li>
<li>一旦运算当中又不同类型的数据，那么结果将会是数据类型范围大的</li>
<li>对于<strong>char</strong>类型来说，在计算之前，<strong>char</strong>会被提升为<strong>int</strong>，然后再计算</li>
<li><strong>char</strong>类型字符和<strong>int</strong>类型数字之间的对照关系表：ASCII、Unicode</li>
<li>对于字符串String(首字母大写,并不是关键字)来说，<strong>加号代表字符串连接操作</strong><ul>
<li>字符串类型的变量基本使用</li>
<li>数据类型 变量名称 = 数据值;</li>
</ul>
</li>
<li>优先级：小括号优先一切</li>
<li>自增、自减运算符：++、–<ul>
<li>基本含义：让一个变量加一个1或者让一个变量减一个1</li>
<li>使用方法：<ul>
<li>单独使用：不和其他任何操作混合，自己独立成一个步骤</li>
<li>混合使用：和其他操作混合，例如与赋值混合或者打印操作混合，等</li>
</ul>
</li>
<li>使用区别：<ul>
<li>再单独使用的时候，<strong>前++</strong>和后<strong>++</strong>没有任何区别</li>
<li>再混合使用的时候<ul>
<li>如果是<strong>【前++】</strong>，那么变量<strong>【立刻加1】</strong>，然后拿着结果进行使用。<strong>【先加后用】</strong></li>
<li>如果是【后++】，那么首先使用变量本来的数值，<strong>【然后再让变量+1】</strong>。<strong>【先用后加】</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>注意事项：<ul>
<li>只有变量才能使用自增、自减运算符。常量不可发生改变，所以不能用。</li>
<li><strong>byte，short，char</strong>在运算的过程中会强制转换成<strong>int</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticOperators</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">		<span class="comment">// 两个常量之间可以进行数学运算</span></span><br><span class="line">		System.out.println(<span class="number">10</span> + <span class="number">20</span>); <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 两个变量之家也可以进行数学运算</span></span><br><span class="line">		System.out.println(a - b); <span class="comment">// -10</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 变量和常量之间可以混合运算</span></span><br><span class="line">		System.out.println(a * b); <span class="comment">// 200</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 变量和常量之间可以混合使用</span></span><br><span class="line">		<span class="comment">// 除法用的是整除，整数除以整数，结果也是整数，只看商，不看余数</span></span><br><span class="line">		System.out.println(a / <span class="number">20</span>); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 取模运算:取的余数（只是对于整数的除法来说，取模运算符才有余数的意义）</span></span><br><span class="line">		System.out.println(a % b); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 一旦运算当中又不同类型的数据，那么结果将会是数据类型范围大的</span></span><br><span class="line">		<span class="keyword">double</span> c = <span class="number">30.5</span>;</span><br><span class="line">		System.out.println(b + c); <span class="comment">// 50.5</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 对于char类型来说，在计算之前，char会被提升为int，然后再计算</span></span><br><span class="line">		<span class="comment">// char类型字符和int类型数字之间的对照关系表：ASCII、Unicode</span></span><br><span class="line">		<span class="keyword">char</span> d = <span class="string">'A'</span>;</span><br><span class="line">		System.out.println(d + c); <span class="comment">//95.5</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 对于字符串String(首字母大写,并不是关键字)来说，加号代表字符串连接操作</span></span><br><span class="line">		<span class="comment">// 字符串类型的变量基本使用</span></span><br><span class="line">		<span class="comment">// 数据类型 变量名称 = 数据值;</span></span><br><span class="line">		String e = <span class="string">"Hello"</span>;</span><br><span class="line">		System.out.println(e + <span class="number">10</span>); <span class="comment">//Hello10</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//优先级：小括号优先一切</span></span><br><span class="line">		System.out.println(e + <span class="number">10</span> + <span class="number">20</span>); <span class="comment">//Hello1020</span></span><br><span class="line">		System.out.println(e + (<span class="number">10</span> + <span class="number">20</span>)); <span class="comment">//Hello30</span></span><br><span class="line">		System.out.println(<span class="number">10</span> + <span class="number">20</span> + e); <span class="comment">//30Hello</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//自增运算符：++</span></span><br><span class="line">		<span class="comment">//自减运算符：--</span></span><br><span class="line">		<span class="comment">//基本含义：让一个变量加一个1或者让一个变量减一个1</span></span><br><span class="line">		<span class="comment">//使用方法：</span></span><br><span class="line">		<span class="comment">//	1. 单独使用：不和其他任何操作混合，自己独立成一个步骤</span></span><br><span class="line">		<span class="comment">//	2. 混合使用：和其他操作混合，例如与赋值混合或者打印操作混合，等</span></span><br><span class="line">		<span class="comment">//使用区别：</span></span><br><span class="line">		<span class="comment">//	1. 再单独使用的时候，前++和后++没有任何区别</span></span><br><span class="line">		<span class="comment">//	2. 再混合使用的时候</span></span><br><span class="line">		<span class="comment">//		- 如果是【前++】，那么变量【立刻加1】，然后拿着结果进行使用。【先加后用】</span></span><br><span class="line">		<span class="comment">//		- 如果是【后++】，那么首先使用变量本来的数值，【然后再让变量+1】。【先用后加】</span></span><br><span class="line">		<span class="comment">//注意事项：</span></span><br><span class="line">		<span class="comment">//	只有变量才能使用自增、自减运算符。常量不可发生改变，所以不能用。</span></span><br><span class="line">		<span class="keyword">int</span> f = <span class="number">10</span>;</span><br><span class="line">		f++;</span><br><span class="line">		System.out.println(f); <span class="comment">// 11</span></span><br><span class="line">		++f;</span><br><span class="line">		System.out.println(f); <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> g = <span class="number">10</span>;</span><br><span class="line">		System.out.println(g++); <span class="comment">// 10</span></span><br><span class="line">		System.out.println(++g); <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> h = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">int</span> i = h--;</span><br><span class="line">		System.out.println(i); <span class="comment">// 10</span></span><br><span class="line">		<span class="keyword">int</span> j = --h;</span><br><span class="line">		System.out.println(j); <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//30++; // 异常</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// byte，short，char在运算的过程中会强制转换成int</span></span><br><span class="line">    <span class="keyword">byte</span> k = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">byte</span> l = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//byte m = k + l; // 异常</span></span><br><span class="line">    <span class="keyword">int</span> n = k + i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table>
<thead>
<tr>
<th>赋值运算符：</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>=</code></td>
<td>等于号</td>
</tr>
<tr>
<td><code>+=</code></td>
<td>加等于</td>
</tr>
<tr>
<td><code>-=</code></td>
<td>减等于</td>
</tr>
<tr>
<td><code>*=</code></td>
<td>乘等于</td>
</tr>
<tr>
<td><code>/=</code></td>
<td>除等于</td>
</tr>
<tr>
<td><code>%=</code></td>
<td>取模等</td>
</tr>
</tbody></table>
<ul>
<li><p>赋值运算符：就是将符号右边的值，赋给左边的变量。</p>
<ul>
<li>基本赋值运算符：就是一个等号”=”，代表将右侧的数据交给左侧的变量。<ul>
<li><code>int a = 30;</code></li>
</ul>
</li>
<li>复合赋值运算符：<ul>
<li><code>+=    a += 1    相当于    a = a + 1</code></li>
<li><code>-=    a -= 1    相当于    a = a - 1</code></li>
<li><code>*=    a *= 1    相当于    a = a * 1</code></li>
<li><code>/=    a /= 1    相当于    a = a / 1</code></li>
<li><code>%=    a %= 1    相当于    a = a % 1</code></li>
</ul>
</li>
</ul>
</li>
<li><p>注意事项：</p>
<ul>
<li>只有变量才能使用赋值运算符，常量不能进行赋值</li>
<li>复合赋值运算符其中隐含了一个强制类型转换</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssignmentOperator</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">		a += <span class="number">3</span>;</span><br><span class="line">		System.out.println(a); <span class="comment">// 13</span></span><br><span class="line"></span><br><span class="line">		a = <span class="number">10</span>;</span><br><span class="line">		a -= <span class="number">3</span>;</span><br><span class="line">		System.out.println(a); <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line">		a = <span class="number">10</span>;</span><br><span class="line">		a *= <span class="number">3</span>;</span><br><span class="line">		System.out.println(a); <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line">		a = <span class="number">10</span>;</span><br><span class="line">		a /= <span class="number">3</span>;</span><br><span class="line">		System.out.println(a); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">		a = <span class="number">10</span>;</span><br><span class="line">		a %= <span class="number">3</span>;</span><br><span class="line">		System.out.println(a); <span class="comment">// 1</span></span><br><span class="line">		<span class="comment">//强制类型转换</span></span><br><span class="line">		<span class="keyword">byte</span> num = <span class="number">10</span>;</span><br><span class="line">		num += <span class="number">5</span>;</span><br><span class="line">		<span class="keyword">byte</span> num2 = num;</span><br><span class="line">		System.out.println(num2); <span class="comment">// 15</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><table>
<thead>
<tr>
<th>比较运算符：</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>==</code></td>
<td>比较符号两边数据是否相等，相等结果是true</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>比较符号左边的数据是否小于右边的数据，如果小于结果为true</td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>比较符号左边的数据是否大于右边的数据，如果大于结果是true</td>
</tr>
<tr>
<td><code>&lt;=</code></td>
<td>比较符号左边的数据是否小于或者等于右边的数据，如果小于结果为true</td>
</tr>
<tr>
<td><code>&gt;=</code></td>
<td>比较符号左边的数据是否大于或者等于右边的数据，如果大于结果是true</td>
</tr>
<tr>
<td><code>!=</code></td>
<td>不等于服好，如果符号两边的数据不相等，结果为true</td>
</tr>
</tbody></table>
<ul>
<li>比较运算符，是两个数据之间进行比较的运算，运算结果都是布尔值<strong>true</strong>或者<strong>false</strong></li>
<li>两个常量之间可以进行比较运算</li>
<li>两个变量之家也可以进行比较运算</li>
<li>变量和常量之间可以比较运算</li>
<li>注意事项：<ul>
<li>不能连续使用，如果要连续使用，<strong>用逻辑运算符关联</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparisonOperators</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">		System.out.println(<span class="number">2</span>==<span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">		System.out.println(<span class="number">2</span>&lt;b); <span class="comment">// true</span></span><br><span class="line">		System.out.println(a&gt;<span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">		System.out.println(a&lt;=b); <span class="comment">// true</span></span><br><span class="line">		System.out.println(a&gt;=<span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line">		System.out.println(a!=b); <span class="comment">// true</span></span><br><span class="line">		<span class="comment">//System.out.println(a&lt;b&lt;5);异常</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table>
<thead>
<tr>
<th>逻辑运算符：</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>&amp;&amp;</code>与（短路）</td>
<td>两边都是true，结果为true<br> 一边为false，结果为false<br> 短路特点：符号左边是false，右边不再运算</td>
</tr>
<tr>
<td>`</td>
<td></td>
</tr>
<tr>
<td><code>!</code>非</td>
<td>!true结果是false<br> !false结果是true</td>
</tr>
</tbody></table>
<ul>
<li>逻辑运算符，是用来连接两个布尔类型结果的运算符，运算结果都是布尔值<strong>true</strong>或者<strong>false</strong></li>
<li>与<code>&amp;&amp;</code>，或<code>||</code>，具有短路效果：如果根据左边已经可以判断得到最终结果，那么右边的代码将不再执行，从而节省一定的性能。</li>
<li>注意事项：<ul>
<li>逻辑运算符只能用于boolean值</li>
<li>与、或需要左右各自有一个boolean值，但是取反只要有唯一的boolean值即可</li>
<li>与、或两种运算符，如果有多个条件，可以连续写</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogicalOperators</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="keyword">true</span> &amp;&amp; <span class="keyword">false</span>); <span class="comment">// false</span></span><br><span class="line">		System.out.println(<span class="number">3</span>&lt;<span class="number">4</span> &amp;&amp; <span class="number">10</span>&gt;<span class="number">5</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="keyword">true</span> || <span class="keyword">false</span>); <span class="comment">// true</span></span><br><span class="line">		System.out.println(<span class="keyword">true</span> || <span class="keyword">true</span>); <span class="comment">// true</span></span><br><span class="line">		System.out.println(<span class="keyword">false</span> || <span class="keyword">false</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">		System.out.println(!<span class="keyword">true</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">		System.out.println(<span class="number">3</span>&gt;<span class="number">4</span> &amp;&amp; ++a&lt;<span class="number">100</span>); <span class="comment">// false</span></span><br><span class="line">		System.out.println(a); <span class="comment">// 10</span></span><br><span class="line">		System.out.println(<span class="number">4</span>&gt;<span class="number">3</span> || ++a&lt;<span class="number">100</span>); <span class="comment">// true</span></span><br><span class="line">		System.out.println(a); <span class="comment">// 10</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>一元运算符：只需要一个数据就可以进行操作的运算符。如：！、++、–</p>
<p>二元运算符：需要两个数据才可以进行进行操作的运算符。如：+、=</p>
<p>三元运算符：需要三个数据才可以进行进行操作的运算符。</p>
<p>格式：</p>
<ul>
<li><code>数据类型 变量名称 = 条件判断 ? 表达式A : 表达式B</code></li>
</ul>
<p>流程：</p>
<ul>
<li>先判断条件是否成立：</li>
<li>如果成立为true，那么将表达式A的值赋值给左侧的变量</li>
<li>如果不成立为false，那么将表达式B的值赋值给左侧的变量</li>
</ul>
<p>注意事项：</p>
<ul>
<li>必须同时保证表达式A和表达式B都符合左侧数据类型的要求</li>
<li>三元运算符的结果必须被使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreePartOperator</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> max = a &gt; b ? a : b;</span><br><span class="line">		System.out.println(max);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//错误写法</span></span><br><span class="line">		<span class="comment">//int result = 3 &gt; 4 ? 2.5 : 10;</span></span><br><span class="line">		<span class="comment">//a &gt; b ? a : b;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>数据类型转换</title>
    <url>/2020/3daa4bf4/</url>
    <content><![CDATA[<h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><p>Java程序中要求参与的计算的数据，必须要保证数据类型的一致性，如果数据类型不一致将发生类型的转换</p>
<h2 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h2><ol>
<li>自动转换：将<strong>取值范围小的类型</strong>自动提升为<strong>取值范围大的类型</strong></li>
<li>特点：代码不需要进行特殊处理，自动完成</li>
<li>规则：数据范围从小到大</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataConversion</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 自动类型转换</span></span><br><span class="line">		<span class="comment">// 左边是long类型，右边是默认的int类型，左右类型不同</span></span><br><span class="line">		<span class="comment">// 一个等号代表赋值，将右侧的int常量，交给左侧的long变量进行储存</span></span><br><span class="line">		<span class="comment">// int --&gt; long，符合数据范围从小到大的要求</span></span><br><span class="line">		<span class="comment">// 自动类型转换</span></span><br><span class="line">		<span class="keyword">long</span> num1 = <span class="number">100</span>;</span><br><span class="line">		System.out.println(num1); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 左边是double类型，右边是float类型，左右不一样</span></span><br><span class="line">		<span class="comment">// float-&gt; double，符合从小到大的规则</span></span><br><span class="line">		<span class="comment">// 自动类型转换</span></span><br><span class="line">		<span class="keyword">double</span> num2 = <span class="number">2.5F</span>;</span><br><span class="line">		System.out.println(num2); <span class="comment">// 2.5</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 左边是float类型，右边是long类型，左右不一样</span></span><br><span class="line">		<span class="comment">// long--&gt; float，范围是float更大一些，符合从小到大的规则</span></span><br><span class="line">		<span class="comment">// 自动类型转换</span></span><br><span class="line">		<span class="keyword">float</span> num3 = <span class="number">30L</span>;</span><br><span class="line">		System.out.println(num3); <span class="comment">// 30.0</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><p>范围小的类型向范围大的类型提升，<strong>byte，short，char</strong>运算时直接提升为<strong>int</strong></p>
<p><code>byte, short, char--&gt;int--&gt;long--&gt;float--&gt;double</code></p>
<h2 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h2><ol>
<li>强制转换：将<strong>取值范围大的类型</strong>强制转换成<strong>取值范围小的类型</strong></li>
<li>特点：代码需要进行特殊的格式处理，不能自动完成</li>
<li>格式：<code>范围小的类型 范围小的变量名 = (范围小的类型) 原本范围大的数据;</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataConversion</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="comment">// 强制类型转换</span></span><br><span class="line">		<span class="comment">// 左边式int类型，右边式long类型，不一样</span></span><br><span class="line">		<span class="comment">// long --&gt; int，不是从小到大</span></span><br><span class="line">		<span class="comment">// 不能发生自动类型转换</span></span><br><span class="line">		<span class="comment">// 强制类型转换</span></span><br><span class="line">		<span class="keyword">int</span> num4 = (<span class="keyword">int</span>) <span class="number">100L</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// long --&gt; int 超过int的最大值数据就会直接溢出，不会得到自己想要的值</span></span><br><span class="line">		<span class="keyword">int</span> num5 = (<span class="keyword">int</span>) <span class="number">6000000000L</span>;</span><br><span class="line">		System.out.println(num5); <span class="comment">// 1705032704</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// double --&gt; int 所有小数都会被舍去</span></span><br><span class="line">		<span class="keyword">int</span> num6 = (<span class="keyword">int</span>) <span class="number">3.99</span>;</span><br><span class="line">		System.out.println(num6); <span class="comment">// 3</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// int --&gt; byte 右侧的数值大小不能超过左侧的类型范围</span></span><br><span class="line">		<span class="keyword">byte</span> num7 = (<span class="keyword">int</span>) <span class="number">40</span>;</span><br><span class="line">		System.out.println(num7); <span class="comment">// 40</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> num8 = <span class="number">40</span>;</span><br><span class="line">		<span class="comment">//byte num9 = num8; // 错误: 不兼容的类型: 从int转换到byte可能会有损失</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// char --&gt; int 原因ASII</span></span><br><span class="line">		<span class="keyword">int</span> num10 = <span class="string">'A'</span>;</span><br><span class="line">		System.out.println(num10); <span class="comment">// 65</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ul>
<li>浮点转成整数，直接取消小数点，可能造成数据损失精度。</li>
<li><strong>取值范围大的类型</strong>强制转成<strong>取值范围小的类型</strong>，可能造成数据丢失。</li>
<li><strong>取值范围大的类型</strong>强制转成<strong>取值范围小的类型</strong>的时候范围大的类型数值超过范围小的类型，数据会直接溢出</li>
<li>对于<code>byte/short/char</code>三种类型来说，如果右侧赋值的数值没有超过范围，那么javac编译器将会自动隐含的不上<code>(byte)(short)(char)</code><ul>
<li>如果右侧超过了左侧范围，那么直接编译器报错</li>
<li>如果右侧的表达式房中全都是常量，那么编译器javac将会直接将若干个常量表达式计算得到结果<ul>
<li>需要注意，右侧的常量结果数值，没有超过左侧范围</li>
<li>这也被成为编译器的常量优化</li>
<li>但一旦有表达式参与，那么编译器就不会进行这种优化了</li>
</ul>
</li>
</ul>
</li>
<li><code>char</code>类型可以直接转换成int类型</li>
<li><code>boolean</code>类型不能发生数据类型转换</li>
</ul>
<h2 id="ASCII编码表"><a href="#ASCII编码表" class="headerlink" title="ASCII编码表"></a>ASCII编码表</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ASCIICodingTable</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="comment">// 字符类型</span></span><br><span class="line">		<span class="keyword">char</span> c1 = <span class="string">'A'</span>;</span><br><span class="line">		<span class="comment">// 字符类型 + int类型</span></span><br><span class="line">		System.out.println((<span class="keyword">int</span>)c1); <span class="comment">// 66</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">char</span> c2 = <span class="string">'中'</span>;</span><br><span class="line">		System.out.println((<span class="keyword">int</span>)c2); <span class="comment">// 20013</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在计算机的底层会用一个数字（二进制）来表示字符A，A代表的数字就是65</p>
<p>而数字和字符的对照关系表（编码表）：</p>
<ul>
<li>ASCII码表：American Standard Code for Information Interchange，美国信息卒换标准代码.</li>
<li>Unicode码表：万国码。也是数字和符号的对照关系，开头0-127部分和ASCII完全一样，但是从128开始包含有更多字符。</li>
</ul>
<p>需要记忆的就只有三个</p>
<ul>
<li>48 -&gt; ‘0’</li>
<li>65 -&gt; ‘A’</li>
<li>97 -&gt; ‘a’</li>
</ul>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>变量和数据类型</title>
    <url>/2020/33466eb7/</url>
    <content><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h3><p>Java的数据类型分为两大类：</p>
<ul>
<li><strong>基本数据类型</strong>：包括整数、浮点数、字符、布尔。</li>
<li><strong>引用数据类型</strong>：包括类、数组、接口、字符串…</li>
</ul>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>四类八种基本数据类型：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>关键字</th>
<th>内存占用</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>字节型</td>
<td>byte</td>
<td>1个字节</td>
<td>-2^7~2^7-1</td>
</tr>
<tr>
<td>短整型</td>
<td>short</td>
<td>2个字节</td>
<td>-2^15~2^15-1</td>
</tr>
<tr>
<td>整型</td>
<td>int（默认）</td>
<td>4个字节</td>
<td>-2^31~2^31-1</td>
</tr>
<tr>
<td>长整型</td>
<td>long</td>
<td>8个字节</td>
<td>-2^63~2^63-1</td>
</tr>
<tr>
<td>单精度浮点数</td>
<td>float</td>
<td>4个字节</td>
<td>-2^31~2^31-1</td>
</tr>
<tr>
<td>双精度浮点数</td>
<td>double（默认）</td>
<td>8个字节</td>
<td>4.9E-324~1.7977E+308</td>
</tr>
<tr>
<td>字符型</td>
<td>char</td>
<td>2个字节</td>
<td>0-65535</td>
</tr>
<tr>
<td>布尔型</td>
<td>boolean</td>
<td>1个字节</td>
<td>true，false</td>
</tr>
</tbody></table>
<p>==Java中的默认类型：整数类型是int、浮点类型是double==</p>
<p>注意事项：</p>
<ul>
<li>字符串不是基本类型，而引用类型</li>
<li>浮点型可能只是一个近似值，并非精确的值</li>
<li>数据范围与字节数不一定相关，例如float数据范围比long更加广泛，但是float是4字节，long是8字节</li>
<li>浮点数当中默认类型是double。如果一定要使用float类型，需要加上一个后缀F</li>
<li>整数默认为int类型，如果一定要使用long类型，需要加上一个后缀L</li>
<li>推荐使用大写字母后缀</li>
</ul>
<h2 id="变量概述"><a href="#变量概述" class="headerlink" title="变量概述"></a>变量概述</h2><ul>
<li>变量：常量是固定不变的数据，那么在程序中可以变化的量称为变量。</li>
<li>数学中，可以使用字母代替数字运算，例如x=1+5或者6=x+5</li>
<li>程序中，可以使用字母保存数字的方式进行运算，提高计算能力，可以解决更多的问题。比如x保存5，x也可以保存6，这样x保存的数据是可以改变的，也就是我们所讲解的变量。</li>
</ul>
<p>==Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。==</p>
<h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><p>变量定义的格式包括三个要素：<strong>数据类型</strong>、<strong>变量名</strong>、<strong>数据值</strong>。</p>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p><code>数据类型 变量名; 变量名=数据值;</code></p>
<p><code>数据类型 变量名=数据值;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="comment">// 创建一个变量</span></span><br><span class="line">		<span class="keyword">int</span> num1;</span><br><span class="line">		num1 = <span class="number">5</span>;</span><br><span class="line">		<span class="comment">//或者</span></span><br><span class="line">		<span class="keyword">int</span> num2 = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 当打印输出变量名称的时候,显示出来的是变量的内容</span></span><br><span class="line">		System.out.println(num1); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 改变变量当中本来的数字,变成新的数字</span></span><br><span class="line">		num1 = <span class="number">10</span>;</span><br><span class="line">		System.out.println(num1); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"================="</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">byte</span> num3 = <span class="number">30</span>; <span class="comment">// 注意:右侧数值的范围不能超过左侧数据类型的取值范围</span></span><br><span class="line">		System.out.println(num3); <span class="comment">//30</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//byte num4 = 400; //右侧超出了byte数据范围,报错!</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">short</span> num5 = <span class="number">50</span>;</span><br><span class="line">		System.out.println(num5); <span class="comment">// 50</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">long</span> num6 = <span class="number">3000000000L</span>;</span><br><span class="line">		System.out.println(num6); <span class="comment">// 3000000000</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">float</span> num7 = <span class="number">2.5F</span>;</span><br><span class="line">		System.out.println(num7); <span class="comment">// 2.5</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">double</span> num8 = <span class="number">2.5</span>;</span><br><span class="line">		System.out.println(num8); <span class="comment">// 2.5</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">char</span> ch = <span class="string">'A'</span>;</span><br><span class="line">		System.out.println(ch); <span class="comment">// A</span></span><br><span class="line">		ch = <span class="string">'中'</span>;</span><br><span class="line">		System.out.println(ch); <span class="comment">// 中</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">boolean</span> flag1 = <span class="keyword">true</span>;</span><br><span class="line">		System.out.println(flag1); <span class="comment">// true</span></span><br><span class="line">		flag1 = <span class="keyword">false</span>;</span><br><span class="line">		System.out.println(flag1); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//将一个变量的数据内容,赋值交给另一个变量</span></span><br><span class="line">		<span class="comment">//右侧的变量名称flag1已经存在,里面装的是false布尔值</span></span><br><span class="line">		<span class="comment">//将右侧变量里面的false,向左交给flag2变量进行存储</span></span><br><span class="line">		<span class="keyword">boolean</span> flag2 = flag1;</span><br><span class="line">		System.out.println(flag2); <span class="comment">// false</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><p>在同一个大括号范围内，创建多个变量，那么变量之间的名称不可以重复</p>
</li>
<li><p>对于float和long类型来说，字母后缀F和L不要丢掉</p>
</li>
<li><p>如右侧数值的范围不能超过左侧数据类型的取值范围</p>
</li>
<li><p>没有进行赋值的变量，不能直接使用</p>
</li>
<li><p>变量的使用不能超过作用域的范围【作用域：从定义变量的一行开始，一直到直接所属的大括号结束为止】</p>
</li>
<li><p>可以通过一个语句来创建多个变量，但一般不推荐使用</p>
</li>
</ul>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>常量</title>
    <url>/2020/a0cc7520/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>常量：是指在Java程序中固定不变的数据</p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><table>
<thead>
<tr>
<th>类型</th>
<th>含义</th>
<th>数据举例</th>
</tr>
</thead>
<tbody><tr>
<td>整数常量</td>
<td>所有的整数</td>
<td>0，1，128，-128</td>
</tr>
<tr>
<td>浮点数常量</td>
<td>所有的小数</td>
<td>0.0，-0.1，2.55</td>
</tr>
<tr>
<td>字符常量</td>
<td>单引号引起来，只能写一个字符，必须有内容</td>
<td>‘a’，’ ‘，’好’</td>
</tr>
<tr>
<td>字符串常量</td>
<td>双引号引起来，可以写多个字符，也可以不写</td>
<td>“A”，”Hello”，””</td>
</tr>
<tr>
<td>布尔常量</td>
<td>只有两个值</td>
<td>true，false</td>
</tr>
<tr>
<td>空常量</td>
<td>只有一个值</td>
<td>null</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constant</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="comment">//整数常量</span></span><br><span class="line">		System.out.println(<span class="number">123</span>);</span><br><span class="line">		System.out.println(-<span class="number">123</span>);</span><br><span class="line">		<span class="comment">//浮点数常量</span></span><br><span class="line">		System.out.println(<span class="number">0.123</span>);</span><br><span class="line">		System.out.println(-<span class="number">0.123</span>);</span><br><span class="line">		<span class="comment">//字符常量</span></span><br><span class="line">		System.out.println(<span class="string">'A'</span>);</span><br><span class="line">		System.out.println(<span class="string">'6'</span>);</span><br><span class="line">		<span class="comment">//System.out.println(''); //两个单引号中间必须有且仅有一个字符</span></span><br><span class="line">		<span class="comment">//System.out.println('AB'); //两个单引号中间必须有且仅有一个字符</span></span><br><span class="line">		<span class="comment">//布尔常量</span></span><br><span class="line">		System.out.println(<span class="keyword">true</span>);</span><br><span class="line">		System.out.println(<span class="keyword">false</span>);</span><br><span class="line">		<span class="comment">//字符串常量</span></span><br><span class="line">		System.out.println(<span class="string">"Hello Java"</span>);</span><br><span class="line">		System.out.println(<span class="string">""</span>); <span class="comment">//字符串两个双引号中间的内容为空</span></span><br><span class="line">		<span class="comment">//空常量</span></span><br><span class="line">		<span class="comment">//System.out.println(null);//空常量不能直接用来打印输出</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>HelloWorld入门程序</title>
    <url>/2020/ab54e04e/</url>
    <content><![CDATA[<h2 id="程序开发步骤说明"><a href="#程序开发步骤说明" class="headerlink" title="程序开发步骤说明"></a>程序开发步骤说明</h2><p>开发环境已经搭建完毕，可以开发我们第一个Java程序了。</p>
<p>Java程序开发三步骤：<strong>编写</strong>、<strong>编译</strong>、<strong>运行</strong></p>
<p><img data-src="/2020/ab54e04e/image-20200330143419255.png" alt="image-20200330143419255"></p>
<p>编译：后缀为<code>.java</code></p>
<p>编译：后缀为<code>.class</code></p>
<h2 id="编写Java源程序"><a href="#编写Java源程序" class="headerlink" title="编写Java源程序"></a>编写Java源程序</h2><ol>
<li><p>在<strong>E:\JavaSE\day1</strong>目录下新建文本文件，完整的文件名修改为<strong>HelloWorld.java</strong>，其中文件名为<strong>HelloWorld</strong>，后缀名必须为 <strong>.java</strong></p>
<p><img data-src="/2020/ab54e04e/image-20200330144757408.png" alt="image-20200330144757408"></p>
</li>
<li><p>用记事本打开</p>
</li>
<li><p>在文件中键入文本并保存，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		System.out.print(<span class="string">"Hello Wrold!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>==文件名必须是<strong>HelloWorld</strong>，保证文件名和类的名字是一致的，注意大小写==</li>
<li>==每个字母和符号必须与示例代码一模一样==</li>
</ul>
</li>
</ol>
<h2 id="编译java源文件"><a href="#编译java源文件" class="headerlink" title="编译java源文件"></a>编译java源文件</h2><p>在DOS命令行中，进入<strong>Java源文件的目录</strong>，使用<strong>javac</strong>命令进行编译。</p>
<p>命令：<code>javac HelloWorld.java</code></p>
<p><img data-src="/2020/ab54e04e/image-20200330145037750.png" alt="image-20200330145037750"></p>
<p>编译成功后，命令行没有任何提示。打开<strong>E:\JavaSE\day1</strong>目录，发现产生了一个新的文件HelloWorld.class，该文件就是编译后的文件，是Java的可运行文件，称为字节码文件，有了字节码文件，就可以运行程序了。</p>
<h2 id="运行Java程序"><a href="#运行Java程序" class="headerlink" title="运行Java程序"></a>运行Java程序</h2><p>在DOS命令行中，进入<strong>Java源文件的目录</strong>，使用<strong>java</strong>命令进行运行。</p>
<p>命令：<code>java HelloWorld</code></p>
<p><img data-src="/2020/ab54e04e/image-20200330145407426.png" alt="image-20200330145407426"></p>
<p>==一定不要写<code>.class</code>==</p>
<h2 id="入门程序说明"><a href="#入门程序说明" class="headerlink" title="入门程序说明"></a>入门程序说明</h2><p>编译和运行是两回事</p>
<ul>
<li><p><strong>编译</strong>：是指将我们编写的<strong>Java</strong>源文件翻译成JVM<strong>认识</strong>的<strong>class</strong>文件，在这个过程中，j<strong>avac编译器</strong>会检查我们所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。</p>
</li>
<li><p><strong>运行</strong>：是指将class文件交给JVM去运行，此时JVM就会去执行我们编写的程序了。</p>
</li>
</ul>
<h3 id="关于main方法"><a href="#关于main方法" class="headerlink" title="关于main方法"></a>关于main方法</h3><p><strong>main方法</strong>：称为主方法。写法是<strong>固定格式</strong>不可以更改。main方法是程序的入口点或起始点，无论我们编写多少程序，JVM在运行的时候，都会从main方法这里开始执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="添加注释comment"><a href="#添加注释comment" class="headerlink" title="添加注释comment"></a>添加注释comment</h2><ul>
<li>注释：就是对代码的解释和说明。其目的是让人们能够更加轻松地了解代码。为代码添加注释，是十分必须要的，它不影响程序的编译和运行。</li>
<li>Java中有单行注释和多行注释<ul>
<li>单行注释以<code>//开头</code>换行结束</li>
<li>多行注释以<code>/*开头 以*/</code>结束</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		这是多行注释</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		System.out.print(<span class="string">"Hello Wrold!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="关键字keywords"><a href="#关键字keywords" class="headerlink" title="关键字keywords"></a>关键字keywords</h2><p>关键字：是指在程序中，Java已经定义好的单词，具有特殊含义。</p>
<ul>
<li><p>全部都是小写字母。</p>
</li>
<li><p>HelloWorld案例中，出现的关键字有<strong>public、class、static、void</strong>等</p>
<table>
<thead>
<tr>
<th>byte</th>
<th>基本数据类型之一，字节类型</th>
</tr>
</thead>
<tbody><tr>
<td>short</td>
<td>基本数据类型之一，短整数类型</td>
</tr>
<tr>
<td>int</td>
<td>基本数据类型之一，整数类型</td>
</tr>
<tr>
<td>long</td>
<td>基本数据类型之一，长整数类型</td>
</tr>
<tr>
<td>float</td>
<td>基本数据类型之一，单精度浮点数类型</td>
</tr>
<tr>
<td>boolean</td>
<td>基本数据类型之一，声明布尔类型的关键字</td>
</tr>
<tr>
<td>char</td>
<td>基本数据类型之一，字符类型</td>
</tr>
<tr>
<td>double</td>
<td>基本数据类型之一，双精度浮点数类型</td>
</tr>
<tr>
<td>try</td>
<td>尝试一个可能抛出异常的程序块</td>
</tr>
<tr>
<td>catch</td>
<td>用在异常处理中，用来捕捉异常</td>
</tr>
<tr>
<td>finally</td>
<td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td>
</tr>
<tr>
<td>throw</td>
<td>抛出一个异常</td>
</tr>
<tr>
<td>throws</td>
<td>声明在当前定义的成员方法中所有需要抛出的异常</td>
</tr>
<tr>
<td>for</td>
<td>一种循环结构的引导词</td>
</tr>
<tr>
<td>do</td>
<td>用在do-while循环结构中</td>
</tr>
<tr>
<td>while</td>
<td>用在循环结构中</td>
</tr>
<tr>
<td>break</td>
<td>提前跳出一个块</td>
</tr>
<tr>
<td>continue</td>
<td>回到一个块的开始处</td>
</tr>
<tr>
<td>switch</td>
<td>分支语句结构的引导词</td>
</tr>
<tr>
<td>case</td>
<td>用在switch语句之中，表示其中的一个分支</td>
</tr>
<tr>
<td>if</td>
<td>条件语句的引导词</td>
</tr>
<tr>
<td>else</td>
<td>用在条件语句中，表明当条件不成立时的分支</td>
</tr>
<tr>
<td>instanceof</td>
<td>用来测试一个对象是否是指定类型的实例对象</td>
</tr>
<tr>
<td>private</td>
<td>一种访问控制方式：私用模式</td>
</tr>
<tr>
<td>protected</td>
<td>一种访问控制方式：保护模式</td>
</tr>
<tr>
<td>public</td>
<td>一种访问控制方式：共用模式</td>
</tr>
<tr>
<td>super</td>
<td>表明当前对象的父类型的引用或者父类型的构造方法</td>
</tr>
<tr>
<td>this</td>
<td>指向当前实例对象的引用</td>
</tr>
<tr>
<td>package</td>
<td>包</td>
</tr>
<tr>
<td>import</td>
<td>表明要访问指定的类或包</td>
</tr>
<tr>
<td>class</td>
<td>声明一个类</td>
</tr>
<tr>
<td>enum</td>
<td>枚举</td>
</tr>
<tr>
<td>interface</td>
<td>接口</td>
</tr>
<tr>
<td>abstract</td>
<td>表明类或者成员方法具有抽象属性</td>
</tr>
<tr>
<td>extends</td>
<td>表明一个类型是另一个类型的子类型。对于类，可以是另一个类或者抽象类；对于接口，可以是另一个接口</td>
</tr>
<tr>
<td>implements</td>
<td>表明一个类实现了给定的接口</td>
</tr>
<tr>
<td>static</td>
<td>表明具有静态属性</td>
</tr>
<tr>
<td>final</td>
<td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td>
</tr>
<tr>
<td>void</td>
<td>声明当前成员方法没有返回值</td>
</tr>
<tr>
<td>return</td>
<td>从成员方法中返回数据</td>
</tr>
<tr>
<td>default</td>
<td>默认，例如，用在switch语句中，表明一个默认的分支。Java8 中也作用于声明接口函数的默认实现</td>
</tr>
<tr>
<td>new</td>
<td>用来创建新实例对象</td>
</tr>
<tr>
<td>synchronized</td>
<td>表明一段代码需要同步执行</td>
</tr>
<tr>
<td>native</td>
<td>用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td>
</tr>
<tr>
<td>strictfp</td>
<td>用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE 754算术规范</td>
</tr>
<tr>
<td>assert</td>
<td>断言，用来进行程序调试</td>
</tr>
<tr>
<td>transient</td>
<td>声明不用序列化的成员域</td>
</tr>
<tr>
<td>volatile</td>
<td>表明两个或者多个变量必须同步地发生变化</td>
</tr>
<tr>
<td>goto</td>
<td>保留关键字，没有具体含义</td>
</tr>
<tr>
<td>const</td>
<td>保留关键字，没有具体含义</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>标识符：是指在程序中，我们自己定义内容。比如类的名字、方法的名字和变量的名字等等，都是标识符。</p>
<ul>
<li>HelloWorld案例中，出现的标识符有类名字<code>HelloWorld</code></li>
<li>命名规则：硬性要求<ul>
<li>标识符可以包含英文字母<code>26个（区分大小写）</code>、<code>0-9数字</code>、<code>$（美元符号）</code>和<code>_（下划线）</code></li>
<li>标识符不能以数字开头。</li>
<li>标识符不能是关键字。</li>
</ul>
</li>
<li>命名规范：软性建议<ul>
<li>类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）</li>
<li>方法名规范：首字母小写，后面每个单词首字母大写（小驼峰式）</li>
<li>变量名规范：全部小写。</li>
</ul>
</li>
</ul>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java开发环境搭建</title>
    <url>/2020/77a3ba8f/</url>
    <content><![CDATA[<h2 id="Java虚拟机–JVM"><a href="#Java虚拟机–JVM" class="headerlink" title="Java虚拟机–JVM"></a>Java虚拟机–JVM</h2><ul>
<li><strong>JVM</strong> （Java Virtual Machine）：Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是Java程序的运行环境，是Java最具吸引力的特性之一。我们编写的Java代码，都运行在JVM之上。</li>
<li><strong>跨平台</strong>：任何软件的运行，都必须要运行在操作系统之上，而我们用Java编写的软件可以运行在任何的操作系统上，这个特性称为<strong>Java语言的跨平台特性</strong>。该特性是由JVM实的，我们编写程序运行在JVM上，而JVM运行在操作系统上。</li>
</ul>
<p><img data-src="/2020/77a3ba8f/image-20200330135909560.png" alt="image-20200330135909560"></p>
<p>如图所示，Java的虚拟机本身不具备跨平台功能的，每个操作系统下都有不同版本的虚拟机。</p>
<h2 id="JRE和JDK"><a href="#JRE和JDK" class="headerlink" title="JRE和JDK"></a>JRE和JDK</h2><ul>
<li>JRE （Java Runtime Environment）：是Java程序的运行时环境，包含<strong>JVM</strong>和运行时所需要的<strong>核心类库</strong>。</li>
<li>JDK（Java Development Kit）：是Java程序开发工具包，包含JRE和开发人员使用的工具。</li>
</ul>
<p>我们想要运行一个已有的Java程序，那么只需安装<strong>JRE</strong>即可。</p>
<p>我们想要开发一个全新的Java程序，那么必须安装<strong>JDK</strong></p>
<p><img data-src="/2020/77a3ba8f/image-20200330140526466.png" alt="image-20200330140526466"></p>
<p><img data-src="/2020/77a3ba8f/006tNbRwly1gbmnj3i2fyj315m0rc0z8.jpg" alt="img"></p>
<h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>JDK下载地址： <a href="https://www.oracle.com/cn/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/cn/java/technologies/javase-downloads.html</a></p>
<p><img data-src="/2020/77a3ba8f/image-20200330140937480.png" alt="image-20200330140937480"></p>
<p>根据自己的需要安装对应的版本注意：</p>
<p><img data-src="/2020/77a3ba8f/image-20200330141046227.png" alt="image-20200330141046227"></p>
<p>安装自己操作系统适配的安装包</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>注意事项：</p>
<ul>
<li>目录最好不要为中文，也不要有空格</li>
</ul>
<p>下载下来后双击进入安装页面：</p>
<p><img data-src="/2020/77a3ba8f/20170618230136472.png" alt="这里写图片描述"></p>
<p>最好自己指定一个安装路径（注意这是JDK的路径）</p>
<p><strong>注：可以不勾选公共JRE这样也不用再安装JRE了</strong></p>
<p><img data-src="/2020/77a3ba8f/20170618230149347.png" alt="这里写图片描述"></p>
<p>接下来是JRE（最好把JDK和JER安装到一个目录下）</p>
<p><img data-src="/2020/77a3ba8f/20170618230200082.png" alt="这里写图片描述"></p>
<p>之后就是下一步下一步</p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ul>
<li><p>打开环境变量配置。计算机→属性→高级系统设置→高级→环境变量，在系统变量中配置。</p>
</li>
<li><p>配置<strong>JAVA_HOME</strong></p>
<p>新建，变量名<code>JAVA_HOME</code>，变量值，jdk路径，我的路径是<code>E:\Java\jdk1.8.0_181</code>，保存</p>
</li>
</ul>
<p><img data-src="/2020/77a3ba8f/image-20200330142153915.png" alt="image-20200330142153915"></p>
<ul>
<li><p>配置<strong>Path</strong></p>
<p>打开Path变量，在变量值最前加入<code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</code></p>
<p>Win10可能是图形界面<code>;分号为分隔符道理一样</code></p>
</li>
</ul>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ul>
<li>运行cmd</li>
<li>测试代码<ul>
<li><code>java</code></li>
<li><code>javac</code></li>
<li><code>java -version</code></li>
</ul>
</li>
<li>都正常显示就成功了</li>
</ul>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>开发前言</title>
    <url>/2020/62a97b65/</url>
    <content><![CDATA[<h2 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h2><h3 id="什么是Java语言"><a href="#什么是Java语言" class="headerlink" title="什么是Java语言"></a>什么是Java语言</h3><p>Java语言是美国<strong>Sun</strong>公司（Stanford University Network），在<strong>1995</strong>年推出的高级编程语言。所谓编程语言，是计算机的语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。</p>
<h3 id="Java语言发展历史"><a href="#Java语言发展历史" class="headerlink" title="Java语言发展历史"></a>Java语言发展历史</h3><ul>
<li>1995年Sun公司发布Java1.0版本</li>
<li>1997年发布Java 1.1版本</li>
<li>1998年发布Java 1.2版本</li>
<li>2000年发布Java 1.3版本</li>
<li>2002年发布Java 1.4版本</li>
<li>2004年发布Java 5版本</li>
<li>2006年发布Java 6版本</li>
<li>2009年Oracle甲骨文公司收购Sun公司，并于2011发布Java 7版本</li>
<li><strong>2014年发布Java 8版本</strong></li>
<li>2017年9月发布Java 9版本</li>
<li>2018年3月发布Java 10版本</li>
<li>…</li>
</ul>
<h3 id="Java语言能做什么"><a href="#Java语言能做什么" class="headerlink" title="Java语言能做什么"></a>Java语言能做什么</h3><p>Java语言主要应用在互联网程序的开发领域。常见的互联网应用比如<strong>天猫、京东、物流系统、网银系统</strong>等，以及服务器后台处理大数据的存储、查询、数据挖掘等也有很多应用。</p>
<h2 id="计算机基础知识"><a href="#计算机基础知识" class="headerlink" title="计算机基础知识"></a>计算机基础知识</h2><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><p>计算机中的数据不同于人们生活中的数据，人们生活采用十进制数，而计算机中全部采用二进制数表示，它只包含0、1两个数，逢二进一，1+1=10，每一个0或者每一个1，叫做一个<strong>bit</strong>（比特，位）。</p>
<p>下面了解一下十进制和二进制数据之间的转换计算。</p>
<ul>
<li><strong>十进制数据转成二进制数据</strong>：使用除以2获取余数的方式</li>
</ul>
<p><img data-src="/2020/62a97b65/image-20200330111401992.png" alt="image-20200330111401992"></p>
<ul>
<li><p><strong>二进制数据转成十进制数据</strong>：使 8421编码的方式</p>
<p><img data-src="/2020/62a97b65/image-20200330112240805.png" alt="image-20200330112240805"></p>
</li>
</ul>
<h3 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h3><p>字节是我们常见的计算机中最小存储单元。计算机存储任何的数据，都是以字节的形式存储，右键点击文件属性我们可以查看文件的字节大小。</p>
<p>bit（位）：一个数字0或者一个数字1，代表一位</p>
<p>字节（Byte）： 每逢8位是一个字节，这是数据存储的最小单位</p>
<p>8个bit（二进制位）0000-0000为1个字节，写成<strong>1 byte</strong>或者<strong>1 B</strong></p>
<ul>
<li>1 Byte = 8 bit</li>
<li>1 KB = 1024 Byte</li>
<li>1 MB = 1024 KB</li>
<li>1 GB = 1024 MB</li>
<li>1 TB = 1024 GB</li>
</ul>
<h3 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h3><p>Java语言的初学者，学习一些DOS命令，会非常有帮助，DOS是一个早期的操作系统，现在已经Windows系统取代，对于我们开发人员，目前需要在DOS中完成一些事情，因此就需要掌握一些必要的命令。</p>
<p>微软在早年间推出了非图形界面的操作系统：<strong>MS-DOS</strong>(Microsoft Disk Operating System : 磁盘操作系统)，然后推出图形操作系统后，就把<strong>MS-DOS</strong>继承到了<strong>Windows</strong>系统中，当然<strong>Windows 7</strong>的诞生，微软也彻底抛弃它了，<strong>Windows</strong>中的<strong>命令提示符(下面用CMD代替)</strong>也慢慢替代了大部分的命令行操作</p>
<p>启动CMD：Win+R》输入cmd</p>
<p><img data-src="/2020/62a97b65/image-20200330114552195.png" alt="image-20200330114552195"></p>
<table>
<thead>
<tr>
<th>切换盘符</th>
<th><code>盘符名称:</code></th>
</tr>
</thead>
<tbody><tr>
<td>进入文件夹</td>
<td><code>cd 文件夹名称</code></td>
</tr>
<tr>
<td>进入多级文件夹</td>
<td><code>cd 文件夹\文件夹</code></td>
</tr>
<tr>
<td>返回上一级</td>
<td><code>cd ..</code></td>
</tr>
<tr>
<td>返回根路径</td>
<td><code>cd \</code></td>
</tr>
<tr>
<td>查看当前内容</td>
<td><code>dir</code></td>
</tr>
<tr>
<td>创建目录</td>
<td><code>md 目录名（文件夹）</code></td>
</tr>
<tr>
<td>删除目录</td>
<td><code>rd 目录名（文件夹）</code></td>
</tr>
<tr>
<td>查看本机ip</td>
<td><code>ipconfig</code></td>
</tr>
<tr>
<td>复制文件</td>
<td><code>copy 路径\文件名 路径\文件名 （把一个文件拷贝到另一个地方）</code></td>
</tr>
<tr>
<td>移动文件</td>
<td><code>move 路径\文件名 路径\文件名 （把一个文件移动（就是剪切+复制）到另一个地方）</code></td>
</tr>
<tr>
<td>删除文件</td>
<td><code>del 文件名(这个是专门删除文件的，不能删除文件夹)</code></td>
</tr>
<tr>
<td>测试网络是否畅通</td>
<td><code>ping ip(主机名)</code></td>
</tr>
<tr>
<td>查看所有的dos命令</td>
<td><code>help</code></td>
</tr>
<tr>
<td>清屏</td>
<td><code>cls</code></td>
</tr>
<tr>
<td>推出</td>
<td><code>exit</code></td>
</tr>
</tbody></table>
<blockquote class="blockquote-center" id="guard"></blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
