<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Maven</title>
    <url>/2020/03/11/yuque-Maven/</url>
    <content><![CDATA[<p><a name="35a4d87e"></a></p>
<h3 id="常用Maven命令"><a href="#常用Maven命令" class="headerlink" title="常用Maven命令"></a>常用Maven命令</h3><p>执行与构建过程相关的命令，必须进入pom.xml所在的目录。<br />与构建过程相关的：编译、测试、打包…</p>
<ol>
<li><p>mvn clean：清理</p>
</li>
<li><p>mvn compile：编译主程序</p>
</li>
<li><p>mvn test-compile：编译测试程序</p>
</li>
<li><p>mvn test：执行测试</p>
</li>
<li><p>mvn package：打包</p>
</li>
<li><p>mvn install：安装进入仓库</p>
</li>
<li><p>mvn site：生成站点<br><a name="b7d5cff9"></a></p>
<h3 id="联网问题"><a href="#联网问题" class="headerlink" title="联网问题"></a>联网问题</h3></li>
<li><p>Maven的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须由特定的插件来完成。而插件本身并不包含再Maven的核心程序中。</p>
</li>
<li><p>当我们执行的Maven命令需要用到某些插件时，Maven核心程序首先到本地仓库中查找。</p>
</li>
<li><p>本地仓库的默认位置：[系统中当前用户的目录].m2\repository</p>
</li>
<li><p>Maven核心程序如果再本地仓库找不到需要的插件，那么它会自动链接外网，到中央仓库下载。</p>
</li>
<li><p>如果此时无法联网，则构建失败。</p>
</li>
<li><p>修改默认本地仓库的位置可以让Maven核心程序到我们事先准备好的目录下查找插件</p>
<ol>
<li>找到Maven文件下的\conf\settings.xml</li>
<li>找到标签<code>localRepository</code></li>
<li>将标签<code>localRepository</code>从注释中取出</li>
<li>定义当自定义的目录如：<code>&lt;localRepository&gt;E:\maven\maven-repository&lt;/localRepository&gt;</code></li>
</ol>
</li>
<li><p>设置阿里Maven仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">      http://maven.aliyun.com/nexus/content/groups/public/</span><br><span class="line">  <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><a name="POM"></a></p>
<h3 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h3><ol>
<li><p>含义：Project Object Model 项目对象模型<br><br />            DOM Document Object Model 文档对象模型</p>
</li>
<li><p>pom.xml对于Maven工程是核心配置文件，与构建过程相关的一切设置都在这个文件中进行配置。重要程度相当于web.xml对于动态Web工程<br><a name="d5490c88"></a></p>
<h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><p>Maven的坐标</p>
</li>
<li><p>groupid：公司或组织域名倒序+项目名称</p>
</li>
<li><p>artifactid：模块名</p>
</li>
<li><p>version：版本<br><a name="c270fc6f"></a></p>
<h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3></li>
<li><p>仓库的分类</p>
<ol>
<li>本地仓库：当前电脑上部署的仓库目录，当前电脑上所有Maven工程服务</li>
<li>远程仓库<ol>
<li>私服：搭建再局域网环境中，为局域网范围内的所有Maven工程服务（Nexus）</li>
<li>中央仓库：架设再Internet上，为全世界所有Maven工程</li>
<li>中央仓库的镜像：为了分担中央仓库的流量，提升用户访问速度</li>
</ol>
</li>
</ol>
</li>
<li><p>仓库中保存的内容：Maven工程</p>
<ol>
<li>Maven自身所需要的插件</li>
<li>第三方框架或工具的jar包</li>
<li>我们自己开发的Maven工程<br><a name="6860b943"></a><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3></li>
</ol>
</li>
<li><p>Maven解析依赖信息时会到本地仓库中查找被依赖的jar包</p>
</li>
<li><p>对于我们自己开发的Maven工程，使用install命令安装后就可以进入仓库</p>
</li>
<li><p>依赖的范围</p>
<ol>
<li>compile<ol>
<li>对主程序是否有效：有效</li>
<li>对测试程序是否有效：有效</li>
<li>是否参与打包：参与</li>
</ol>
</li>
<li>test<ol>
<li>对主程序是否有效：无效</li>
<li>对测试程序是否有效：有效</li>
<li>是否参与打包：不参与</li>
<li>典型例子：junit.jar</li>
</ol>
</li>
<li>provided<ol>
<li>对主程序是否有效：有效</li>
<li>对测试程序是否有效：有效</li>
<li>是否参与打包：不参与</li>
<li>是否参与部署：不参与</li>
<li>典型例子：servlet-api.jar</li>
</ol>
</li>
</ol>
</li>
<li><p>依赖的传递性</p>
<ol>
<li>在父工程依赖一次既可重复使用</li>
<li>注意：非complie范围的不能传递。所以在各个工程模块中，重复声明</li>
</ol>
</li>
<li><p>依赖的排除</p>
<ol>
<li><p>在不需要j一些ar包或jar包重复时，则要排除一部分jar包</p>
</li>
<li><p>排除设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">gourpId</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">gourpId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxxxxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>依赖原则</p>
<ol>
<li>作用：解决模块工程之间的jar包冲突问题</li>
<li>Maven默认解决方案：路径最短者优先</li>
<li>Maven默认解决方案：先声明者有限(dependency先后)</li>
</ol>
</li>
<li><p>统一管理依赖的版本</p>
<ol>
<li>使用properties标签使用自定义标签统一声明版本号</li>
<li>在需要的地方使用${自定义标签}引用声明的版本号</li>
<li>其实properties标签配合自定义标签声明数据的配置并不只能用于声明依赖的版本号，凡是需要统一声明后再引用的声明都能使用。如：字符集、声明…<br><a name="176808a1"></a><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3></li>
</ol>
</li>
</ol>
</li>
<li><p>各个构建环境执行的顺序：不能打乱顺序，必须按照指定的正确顺序来执行。</p>
</li>
<li><p>Maven的核心程序中定义了抽象的生命周期，生命周期中各个阶段的具体任务时由插件来完成的。</p>
</li>
<li><p>Maven有三条相互独立的生命周期：</p>
<ol>
<li>Clean Lifecycle在进行真正的构建之前进行一些清理工作。</li>
<li>Default Lifecycle在构建核心部分，编译，测试，打包，安装，部署等等。</li>
<li>Site Lifecycle生成项目报告，站点，发布站点。</li>
</ol>
</li>
<li><p>Maven核心程序为了更好的实现自动化构建，按照这一特点执行生命周期中的各个阶段：不论现在执行生命周期的哪一个阶段，都是从这个生命周期最初的位置开始执行。<br><a name="2dde3029"></a></p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3></li>
<li><p>统一管理各个模块工程中的test范围的依赖的版本</p>
</li>
<li><p>将test的依赖统一提取到父工程中，在子工程中声明的依赖时不指定版本，以工程中统一设定的为准，同时也便于修改</p>
</li>
<li><p>操作步骤</p>
<ol>
<li><p>创建一个Maven工程为父工程。注意：打包方式为pom<br><br /><code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></p>
</li>
<li><p>在子工程中声明对父工程的引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子工程中声明父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ren.guard.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 以当前文件为基准的父工程pom.xml文件的相对路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../Parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将子工程的坐标中与父工程坐标中重复的内容删除</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ren.guard.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="comment">&lt;!-- 删除 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 删除 --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在父工程中统一管理test依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在子工程中删除test依赖的版本号部分</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置继承后，执行安装命令时要先安装父工程<br><a name="52efbe5e"></a></p>
<h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3></li>
</ol>
</li>
<li><p>作用：一键安装各个模块工程</p>
</li>
<li><p>配置方式：在一个“总的聚合工程”中配置各个参与聚合的模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定各个子工程的相对路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>jpa_settings<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>log4j_settings<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>logger_settings<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用方式：在聚合工程的pom.xml上点击maven install<br><a name="ea782e6a"></a></p>
<h3 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h3></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置当工程构建过程中的特殊设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目最后的名称 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">finalName</span>&gt;</span>mavenWeb<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置构建过程中需要使用的插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- cargo是一家专门从事“启动Servlet容器”的组织 --&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.cargo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cargo-maven2-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 针对插件进行的配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置当前系统中容器的位置 --&gt;</span></span><br><span class="line">            	<span class="tag">&lt;<span class="name">container</span>&gt;</span></span><br><span class="line">                	<span class="tag">&lt;<span class="name">containerId</span>&gt;</span>tomcat8x<span class="tag">&lt;/<span class="name">containerId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">home</span>&gt;</span>D:\xxxx\xxxxx<span class="tag">&lt;/<span class="name">home</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">container</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                	<span class="tag">&lt;<span class="name">type</span>&gt;</span>existing<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">home</span>&gt;</span>D:\xxxx\xxxxx<span class="tag">&lt;/<span class="name">home</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 如果Tomcat端口为默认值8080则不必设置该属性 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                    	<span class="tag">&lt;<span class="name">cargo.servlet.port</span>&gt;</span>8989<span class="tag">&lt;/<span class="name">cargo.servlet.port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 配置插件在什么情况下执行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            	<span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                	<span class="tag">&lt;<span class="name">id</span>&gt;</span>cargo-run<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 生命周期的阶段 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>install<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 插件的目标 --&gt;</span></span><br><span class="line">                    	<span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>mvn deploy</code><br><a name="0e39f65b"></a></p>
<h3 id="依赖信息网址"><a href="#依赖信息网址" class="headerlink" title="依赖信息网址"></a>依赖信息网址</h3><p><a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a></p>
]]></content>
  </entry>
  <entry>
    <title>寥寥此生虚度</title>
    <url>/2020/01/28/%E5%AF%A5%E5%AF%A5%E6%AD%A4%E7%94%9F%E8%99%9A%E5%BA%A6/</url>
    <content><![CDATA[<p>寥寥此生虚度<br>作曲 : 暗杠<br>作词 : 竹君<br>编曲：陈夔、暗杠</p>
<p>摘一道闪电</p>
<p>甩进黑黝</p>
<p>造一个深渊</p>
<p>劈开山谷</p>
<p>扯一团浓烟</p>
<p>盖住白骨</p>
<p>携一方书简</p>
<p>刻上荒谬</p>
<p>要多么突兀</p>
<p>才能蔷薇细嗅</p>
<p>像外表风平浪静的烈酒</p>
<p>要多么坚守</p>
<p>才深爱歧途</p>
<p>做一个固执己见的山丘</p>
<p>要多么古旧</p>
<p>才能踏进坟墓</p>
<p>像粒心如死灰的珍珠</p>
<p>要多少尘土</p>
<p>才能掩埋领悟</p>
<p>做一棵贪得无厌的树</p>
<p>折一段笑颜</p>
<p>长成枯木</p>
<p>挖一个溪涧</p>
<p>蒙上薄雾</p>
<p>展一面山岩</p>
<p>描摹繁复</p>
<p>撒一串榆钱</p>
<p>撕碎早露</p>
<p>要多么突兀</p>
<p>才能蔷薇细嗅</p>
<p>像外表风平浪静的烈酒</p>
<p>要多么坚守</p>
<p>才深爱歧途</p>
<p>做一个固执己见的山丘</p>
<p>要多么古旧</p>
<p>才能踏进坟墓</p>
<p>像粒心如死灰的珍珠</p>
<p>要多少尘土</p>
<p>才能掩埋领悟</p>
<p>做一棵贪得无厌的树</p>
<p>要怎样弥补</p>
<p>才能归真返璞</p>
<p>像内心无动于衷的铁杵</p>
<p>要多么仓促</p>
<p>才怪诞谢幕</p>
<p>做一个是非颠倒的囚徒</p>
<p>要多么无辜</p>
<p>才能磨平嫉妒</p>
<p>像只天生丽质的鸿鹄</p>
<p>要多少沉浮</p>
<p>才能生死不顾</p>
<p>寥寥此生虚度</p>
<iframe src="//player.bilibili.com/player.html?aid=48944897&cid=85715082&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>这个年纪</title>
    <url>/2020/01/23/%E8%BF%99%E4%B8%AA%E5%B9%B4%E7%BA%AA/</url>
    <content><![CDATA[<p>这个年纪<br>作曲 : 齐一<br>作词 : 齐一</p>
<p>当我发现我已到了该成家的年纪</p>
<p>但我的女人呢，但我的女人呢</p>
<p>当我习惯把实话都变成了童话</p>
<p>那我的单纯呢，那我的单纯呢</p>
<p>这个年纪我已不再将就有些事情无法强求</p>
<p>该来的总会来该走的也无法挽留</p>
<p>青春慢慢从身边溜走我开始变的怀旧</p>
<p>喝光了这杯酒就再也无法回头</p>
<p>这个年纪的我们爱情跟不上分开的节奏</p>
<p>这个年纪的我们更珍惜难得的自由</p>
<p>这个年纪的我们比起从前更容易感动</p>
<p>这个年纪的我们徘徊在理想与现实之中</p>
<p>这个年纪我已不再将就有些事情无法强求</p>
<p>该来的总会来该走的也无法挽留</p>
<p>青春慢慢从身边溜走我开始变的怀旧</p>
<p>喝光了这杯酒就再也无法回头</p>
<p>这个年纪的我们爱情跟不上分开的节奏</p>
<p>这个年纪的我们更珍惜难得的自由</p>
<p>这个年纪的我们比起从前更容易感动</p>
<p>这个年纪的我们徘徊在理想与现实之中</p>
<p>不知不觉孤独不再可耻了</p>
<p>不知不觉爸爸的情绪变得脆弱了</p>
<p>不知不觉一把柴米油盐也成为压力了</p>
<p>不知不觉我们也开始懂事了</p>
<p>呐呐呐呐呐 呐呐呐呐呐</p>
<p>呐呐呐呐呐 呐呐呐呐呐</p>
<p>呐呐呐呐呐 呐呐呐呐呐</p>
<p>呐呐呐呐呐 呐呐呐呐呐</p>
<p><video class="media" src="blob:https://music.163.com/c7e24f71-cfff-4b58-841c-34464754611a"></video></p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>你的答案</title>
    <url>/2020/01/23/%E4%BD%A0%E7%9A%84%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>你的答案<br>作曲 : 刘涛<br>作词 : 林晨阳 /刘涛<br>编曲 Arranger：谭侃侃</p>
<p>也许世界就这样</p>
<p>我也还在路上</p>
<p>没有人能诉说</p>
<p>也许我只能沉默</p>
<p>眼泪湿润眼眶</p>
<p>可又不甘懦弱</p>
<p>低着头 期待白昼</p>
<p>接受所有的嘲讽</p>
<p>向着风 拥抱彩虹</p>
<p>勇敢的向前走</p>
<p>黎明的那道光</p>
<p>会越过黑暗</p>
<p>打破一切恐惧我能</p>
<p>找到答案</p>
<p>哪怕要逆着光</p>
<p>就驱散黑暗</p>
<p>丢弃所有的负担</p>
<p>不再孤单</p>
<p>不再孤单</p>
<p>也许世界就这样</p>
<p>我也还在路上</p>
<p>没有人能诉说</p>
<p>也许我只能沉默</p>
<p>眼泪湿润眼眶</p>
<p>可又不甘懦弱</p>
<p>低着头 期待白昼</p>
<p>接受所有的嘲讽</p>
<p>向着风 拥抱彩虹</p>
<p>勇敢的向前走</p>
<p>黎明的那道光</p>
<p>会越过黑暗</p>
<p>打破一切恐惧我能</p>
<p>找到答案</p>
<p>哪怕要逆着光</p>
<p>就驱散黑暗</p>
<p>丢弃所有的负担</p>
<p>不再孤单</p>
<p>不再孤单</p>
<p>黎明的那道光</p>
<p>会越过黑暗</p>
<p>打破一切恐惧我能</p>
<p>找到答案</p>
<p>哪怕要逆着光</p>
<p>就驱散黑暗</p>
<p>有一万种的力量</p>
<p>淹没孤单</p>
<p>不再孤单</p>
<p><video class="media" src="blob:https://music.163.com/f4df5b7f-7d2d-4430-9171-d7a2e264dbc2"></video></p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>修身(一)</title>
    <url>/2020/01/14/%E4%BF%AE%E8%BA%AB%E4%B8%80/</url>
    <content><![CDATA[<p>一个人在成长的过程里，总会遇到很多，比如心里的矛盾，现实里的阻碍。<br>美好的想法那是自己惬意的美妙的梦想。<br>一个人如何得到自己想要的，如何实现自己的理想，又如何能够改变自己现在的状态？<br>我相信这是太多的人都面临的一个问题。</p>
<p>只是才疏学浅，希望读者能够提出最为宝贵的意见。</p>
<p>所以我只谈一点，那就是修身。</p>
<p>修身齐家治国平天下，这句话都不是陌生的，但是如何做到？<br>且不说治国平天下，那如何齐起家？<br>所以得先修其身啊。</p>
<p>怎么修身？</p>
<p>一个很笼统的话题，那有没有标准？<br>有没有规律，有没有可以快速见到效果的？<br>这就是我们在不断总结出来的一些，现在分享给大家。</p>
<h2 id="1-修口"><a href="#1-修口" class="headerlink" title="1.修口"></a>1.修口</h2><ol>
<li>你能让别人舒服，能够让这个此时此刻的环境和谐，能够达到基本目标，能够简单易行，这一点能够得到已经很不错了。</li>
<li>你能通过自己能为，表达清楚和规划执行，能够明确方向的长远，那种高度，深度，并且可以按照别人接受的顺序讲出来，这还只是你做到了一半，最重要就是执行过程里那种利弊得失，时间空间布局，容易出错的，容易变化的也能补充到位，这就很不容易了。这便是个人的基本趋于综合能力了。</li>
<li>要成为大才，那你还需要按照自然规律，道德，符合规律还不够，还需要创造，得到进步，推动力，你的创造力，奇特的开发在没有条件的时候创造出来的那才是别人震撼和让你口才有魂的基本。这是我粗浅的理解。那么话说回来最基本的修口具体是什么呢？</li>
</ol>
<p>我认为要做到四不。</p>
<h3 id="第一不"><a href="#第一不" class="headerlink" title="第一不"></a>第一不</h3><p>第一不，就是不插嘴。<br>其实很多人有个很不好的习惯，就是喜欢插嘴。<br>试问下，你如果在说话的时候，别人也插嘴你是怎样的感受？<br>既然你不喜欢你很讨厌，那别人说话的时候你插嘴呢？<br>为何不要插嘴！</p>
<p>我认真的思考了一下有这样的原因。</p>
<ol>
<li>你真的把对方的意思理解了吗？还是用你那个人的感觉判断去理解了？</li>
<li>别人信息情报具体了吗？说清楚了没有？还是根本就没有开始？</li>
<li>你都不知道别人目的，不仅仅是事的目的，最重要的是还有人，你要知道他如此说是不是因为可以想到兵法里的话，如何激怒对方？还是在隐藏什么？</li>
</ol>
<p>所以你​需要安静冷静。<br>这不仅仅是智慧，还会是你能够获得面子与尊重。<br>因为你这个细节决定了说话的气氛。<br>所以千万别乱插嘴！<br>但是还有一点，不是一概而论的，就是当你该插嘴的时候必须要插嘴了，所以这个平衡需要自己能够把握一个度。</p>
<h3 id="第二不"><a href="#第二不" class="headerlink" title="第二不"></a>第二不</h3><p>第二不，不争论。<br>你争赢了输了关系，你争输了会输得很惨。<br>大家都知道，争锋对麦芒的！<br>可现实里，又有多少人如此愚蠢？<br>我们大家确实都在争都在论，但是我认为我们得有合适的方法需要正确解决眼前的所有。<br>其实这里就如战场一样。<br>其实你的社会也如是战场，那么你知道了战场，就是生死存亡就是你争我夺的地方。<br>所以难免的就是争论也就会出现输赢出现心里的状态中的悲喜与酸痛。<br>而每个人都一样希望自己是一个智者是一个强者是一个得到支持的人，尤其是在自己说话的时候，所以这里我认为，如何做到与得到你的目标，你应该做到的三点:</p>
<ol>
<li>快速恢复对得失中利益的判断，调整自己情绪，去认同对方。</li>
<li>还需要很认真的去思考别人的意思和言外之意。</li>
<li>明确做的方向，做的方法。</li>
</ol>
<p>其实大家最终要得到的只是一个，那就是大伙达成共识。<br>在这里关于争论与不争论就写到这里，其实还有更加具体的希望可以在以后的过程里分享。</p>
<h3 id="第三不"><a href="#第三不" class="headerlink" title="第三不"></a>第三不</h3><p>第三不，不否定与不反驳。<br>很多时候，我们总是喜欢反驳习惯了否定。<br>你不认同别人别人一辈子都不会认同你，你反驳了别人那是对别人的不尊重最重要的是还会带来了很大的程度伤害。<br>试问下，你懂别人吗？<br>你又了解清楚别人说的事吗？<br>你又明白别人那个时候发生什么？<br>你又明白别人的难处吗？<br>你又知道那个时候别人最应该做的和不得不做的是什么吗？<br>所以人与人之间的相处，就是因为自己往往按照自己的思考去思考，还有很多的时候都是好为人师指手画脚的，试问下你真的是神吗？<br>不，你不是，既然不是的，也无非就是一个凡人，那有必要如此吗？<br>在这里我们得深深思考！<br>为何那些大成家他们能够让身边的人从内心里舒服，明白吗？<br>所以笔者个人认为，一切好商量，就会成为绝大多数的未来的法宝！​<br>所以当我们理解了，明确了我们自己的日子也定然好过起来，尤其是夫妻之间，尤其是最好的关系之间，人往往犯的错就是很难控制住这一切。<br>所以还有更多的法宝，希望读者可以随时与我们交流。</p>
<h3 id="第四不"><a href="#第四不" class="headerlink" title="第四不"></a>第四不</h3><p>第四不，不嘴巴变形。<br>其实这是最讨厌也是最没用最没有礼貌的。<br>只要你用心观察身边的人，说话嘴巴变形的人，他的性格与命运，就当做实践的作业吧。<br>为何人喜欢菩萨？<br>喜欢拜佛？<br>不喜欢雷公脸？<br>知道吗？<br>这里牵系了我下面要说的眼。<br>还有更多的知识内容，也需要后面发表…<br>所以修口，很重要，有了四不，就不断的检查自己不断的告诉自己修炼好。</p>
<blockquote class="blockquote-center" id="guard"></blockquote>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>异地恋如何维持长久？</title>
    <url>/2020/01/14/%E5%BC%82%E5%9C%B0%E6%81%8B%E5%A6%82%E4%BD%95%E7%BB%B4%E6%8C%81%E9%95%BF%E4%B9%85/</url>
    <content><![CDATA[<p>异地恋，真的不是一张机票就能解决的事，说的很真实，不是我们不在坚持，而是我们遇到了这些…</p>
<h2 id="表达障碍"><a href="#表达障碍" class="headerlink" title="表达障碍"></a>表达障碍</h2><p>短信听不到语气，电话看不到表情。<br>其实我没生气，你当真了；我在笑呢，你看不到吧；我哭了呢？抱着手机哭倦了睡过又醒了，你在忙吗？</p>
<h2 id="共同语言"><a href="#共同语言" class="headerlink" title="共同语言"></a>共同语言</h2><p>如果两个人在一起，两个人的交往圈会溶为共同的圈子，话题永远都在更新。<br>而不在一起的两个人，对彼此身边的环境都会因为陌生而失去兴趣，慢慢的，能说的话只有空洞的“我想你”<br>我在努力找话题呢，不要回信息说”喔，嗯，好”了好吗？</p>
<h2 id="不安全感"><a href="#不安全感" class="headerlink" title="不安全感"></a>不安全感</h2><p>看了10次手机了，你还是没有回信。你在哪，和谁，在干什么？<br>刚刚拒绝了别人的好意，却禁不住想，你身边的莺莺燕燕，一如我身边的花花草草吗？</p>
<h2 id="远水不救近火"><a href="#远水不救近火" class="headerlink" title="远水不救近火"></a>远水不救近火</h2><p>我这里下雨了，来伞的是同学的弟弟；我吃饭忘带钱了，来解围的是朋友的朋友。原来你不吭声是因为你生病了，可我再担忧，也不能在你身边端一杯水呢。</p>
<h2 id="距离产生幻觉"><a href="#距离产生幻觉" class="headerlink" title="距离产生幻觉"></a>距离产生幻觉</h2><p>其实我有些小虚荣，照片有时候修掉了眼袋才给你看；其实你有些小自负，认定的事情就以为自己一定对。<br>为了大老远的爱你，我拒绝接受身边一切说你不好的言论，什么都往好的方向想。你也是吧。<br>其实我们都不是对方想象的那样好。</p>
<h2 id="距离产生误会"><a href="#距离产生误会" class="headerlink" title="距离产生误会"></a>距离产生误会</h2><p>我兴冲冲地发短信给你讲刚刚的趣事，你隔了半天说“喔”，我不知道你在上课的嘛，所以我生闷气了。<br>你给我发了八条短信两个电话我也没回，愤怒得嗷嗷直叫，我在做头发呢，包包寄存了嘛，哪知道手机响着响着没电了。<br>其实我们都知道对方不是故意的，但情绪来了，总需要宣泄的。</p>
<h2 id="善意的谎言"><a href="#善意的谎言" class="headerlink" title="善意的谎言"></a>善意的谎言</h2><p>我碰巧和相熟的男生去看电影了，想了想，对你说和女生去的。<br>你独自去了我们约好要一起去的地方，犹豫再三，对我说你哪也没去。<br>不愿让对方多想，却因为偶尔的疏忽，放对方想的更多。</p>
<h2 id="寂寞"><a href="#寂寞" class="headerlink" title="寂寞"></a>寂寞</h2><p>一个人不寂寞，想念一个人才寂寞。<br>你说，来，抱抱。于是我把自己裹在被窝里，闭上眼，恩，抱抱。<br>从学校回家的路上，你还抬头看月亮吗？</p>
<h2 id="信念坍塌"><a href="#信念坍塌" class="headerlink" title="信念坍塌"></a>信念坍塌</h2><p>我看到身边一对一对的，男生帮女生打开水送饭，在宿舍楼下唧唧我我，周末还能一起爬山，没忍住就对在地图对角线上的你发牢骚，其实是想听你的鼓励。<br>刚刚好你接到朋友异地恋分手倾诉的电话，那么容易就把自己带入了戏，无心的抱怨雪上加霜。<br>有时候折腾一下，只为证明自己的重要性。<br>哪知脆弱基础上的高楼只须多压一根头发的重量，也许就崩溃了…</p>
<blockquote class="blockquote-center">没有人可以带走你的痛，所以也别让任何人带走你的幸福</blockquote>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>穷,也要站在富人堆里</title>
    <url>/2020/01/11/%E7%8A%B9%E5%A4%AA%E4%BA%BA%E6%99%BA%E6%85%A7%E6%B3%95%E5%88%99100%E6%9D%A1-%E7%A9%B7-%E4%B9%9F%E8%A6%81%E7%AB%99%E5%9C%A8%E5%AF%8C%E4%BA%BA%E5%A0%86%E9%87%8C/</url>
    <content><![CDATA[<p>在每一个犹太人家里，当小孩稍稍懂事时，母亲就会翻开圣典，点一滴蜂蜜在上面，然后叫小孩子去吻经书上那滴蜂蜜。</p>
<p>犹太人的孩子几乎都要回答母亲同一个问题:“假如有一天，你的房子突然起火，你会带什么东西逃跑?”如果孩子回答是钱或钻石，那么母亲会进一步问：“有一种无形、无色也无气味的宝贝，你知道是什么吗？”要是孩子答不出来，母亲就会说:“孩子，你应带走的不是别的，而是这个宝贝，这个宝贝就是智慧。智慧是任何人都抢不走的。你只要活着，智慧就永远跟随着你。”</p>
<blockquote>
<p>有个日本学者名叫千岛佑郎，他先后在以色列和美国专门研究犹太商法已达30余年。千岛佑郎不愧是个博士，他的观点很有意思。他说:“有一种穷人算是穷到了家。他们宁愿位列一支穷人的队伍之首做一辈子穷人，也不愿跑到一支富人的队伍之尾去做一会儿富人。”他讲的题目是《穷，也要站在富人堆里》。他借助讲述犹太史和犹太圣典《塔木德》，来阐述这些典籍与《穷，也要站在富人堆里》的关系，并一一例举了犹太商法的32种智慧，这时，一个迟到的听众递上一张纸条，问什么是犹太人经商法则。<br>千岛佑郎大声说:我在解释之前，先向你提三个问题吧。<br>第一个问题，如果有两个犹太人掉进了一个大烟囱，其中一个身上满是烟灰，而另一个却很干净，那么他们谁会去洗澡?<br>“当然是那个身上脏的人!”<br>“错!那个被弄脏的人看到身上干净的人，认为自己一定也是干净的，而干净的人看到脏人，认为自己可能和他一样脏，所以是干净的人要去洗澡.”<br>第二个问题，他们后来又掉进了那个大烟囱，情况和上次一样，哪一个会去澡堂?<br>“这还用说吗，是那个干净的人！”“又错了！干净的人上一次洗桑时发现自己并不脏，而那个脏人则明白了干净的人为什么要去洗澡，所以这次脏人去了。”<br>第三个问题，他们再一次掉进大烟囱，去洗澡的是哪一个?<br>“这?是那个脏人。不，是那个干净的人！”<br>“你还是错了!你见过两个人一起掉进同一个烟囱，结果一个干净，一个脏的事情吗?” 黑压压的听众一时寂静，只有千岛佑郎的声音在回响着:“这就是犹太商法，这就是《穷，也要站在富人堆里》的灵魂!穷是一种切肤没齿的感受，富是一种矜持倨傲的快态，穷人赞美富人积累财富的结果，却忽略了富人通达财路的智慧。”</p>
</blockquote>
<p>迈耶·罗斯柴尔德出生在一个备受歧视的犹太人居住区，但他仅仅花了几年的时间，便建立起了世界上最大的金融王国。</p>
<p>在迈耶大约10岁的时候，父亲便开始传授他做生意的方法，迈耶不但从父亲那里学到了赚钱的技巧，也培养了对古钱币和其他古董的兴趣，他十分起劲的收集中东、俄国以及欧洲的古旧钱币，加以整体出售。</p>
<p>终于有一天，迈耶得到了向一位将军兜售的机会。他把他收集到的古钱币统统拿出来给将军和他的朋友观赏，并侃侃而谈每一枚钱币的来历和典故，尽管他那时只是个刚满20的年轻人，可他那博古通今的古钱币知识和幽默风趣的谈吐却深深吸引了所有的人。</p>
<p>此外，他还别出心裁地利用犹太人音乐作为讲解时的配乐，更取悦了在场的人们。迈耶暗想，这正是千载难逢的好机会，于是他针对他的顾客都属于上流这一特点，为他的古钱币生意开扩了一条独特的途径，并下功夫搞了一个一般商人无法模仿的噱头，他将古钱币以部购的方式，有计划的推销给各地的皇亲贵族。他还把稀罕奇珍或来历不凡的古币编印成精美的目录册，并一附上亲笔信，奇给那些有希望购买的顾客。</p>
<p>某天，他得到当地的领主比海姆公爵的召见，一直在等候着这一机会的迈耶，便以几乎赠送的价格，不惜血本地向公爵卖出了他收藏的珍贵古代徽章和钱币。</p>
<p>迈耶十分清楚的意识到，要在这个犹太人备受歧视的社会里脱颗而出，接近手握巨大权势的领主并博得其欢心，是最有效的手段。</p>
<p>他借这次受公爵召见的机会，不但把花了很多心血以高价收集的古钱币以低得高谱的价格卖给公爵，同时还极力帮助公爵收集古币，经常为他介绍一些能够使其获得数倍利润的顾客，不遗余力的帮助公爵赚钱。</p>
<p>这种把金钱、心血和精力彻底投入于某个人的做法，日后便成为罗斯柴尔德家族的一种基本战略。如若遇到诸如贵族、领主、大金融家等具有巨大潜在利益的人物，他们就甘愿作出巨大的牺牲与其打交道，为之提供情报，献上热情的服务。等双方建立起无法动摇的深厚关系之后，再从这类强权者身上获得更大的利益。</p>
<p>在迈耶25岁那年，他获得了“宫廷御用商人”的头衔。在他45岁那年，法国爆发了大革命，比海姆公爵作为欧洲最大的融家之一，自然不会错过这一良机，他大规模的从事军火买卖，并把他庞大的资金借给缺少军费的君主和贵族以赚取高额利息。</p>
<p>趁着纷乱的时世，借着公爵提供的巨大威望和便利，迈耶为自己赚取了暴利，为罗斯柴尔德家族奠定了不可动摇的根基。后来，他的家族在一百多年之中，积累了四亿英镑的惊人财富。</p>
<p>穷到富的转变是大多数人憧憬的，但没有致富的思想和手段，富有殷实只是聊以自慰的幻想。穷人不能只是慨叹命运不济。穷大只有站在富人堆里，汲取他们致富的思想，比肩他们成功的状态，才能真正实现致富的目标。</p>
<blockquote class="blockquote-center">不欢喜，不自卑</blockquote>]]></content>
      <categories>
        <category>犹太人智慧法则100条</category>
      </categories>
      <tags>
        <tag>犹太人智慧法则100条</tag>
      </tags>
  </entry>
  <entry>
    <title>2019总结</title>
    <url>/2019/12/31/2019%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>嗯~ o(<em>￣▽￣</em>)o<br>这是一个2019年度总结<br>这一年来我真的几度没有抗住，还好过来了，时间真的是一个很有趣的东西，它能让很多时候的痛苦和开心，慢慢&gt; 缓过去</p>
</blockquote>
<h2 id="日落"><a href="#日落" class="headerlink" title="日落"></a>日落</h2><p>这一年刚开始就成了断了线的风筝，每当回想起来的时候都会让呼吸接近窒息，我也体会了一次慢半拍的感觉</p>
<blockquote>
<p>最开始的时候真的没有感觉<br>直到我确定那是真的以后</p>
</blockquote>
<p>中间很长的时间都在麻痹自己<br>也是这个我离开了那个地方<br>走到了另外的地方<br>一切都像从头开始一样<br>虽然有点可笑<br>但好像又是真的<br>可能会很久很长</p>
<h2 id="月升"><a href="#月升" class="headerlink" title="月升"></a>月升</h2><p>相信在这一年我能找到我的目标<br>毕竟我还活着<br>还是需要找到我存在的意义<br>也希望明年我不会那么无聊</p>
<h2 id="繁星"><a href="#繁星" class="headerlink" title="繁星"></a>繁星</h2><p>谢谢，这一年的你们<br>谢谢，这一年的包容<br>谢谢，这一年的遭遇<br>谢谢，这一年的成长<br>谢谢，这一年的天空<br>谢谢，这一年的大地<br>谢谢，这一年的心情<br>谢谢，这一年的决定<br>谢谢…..<br>谢谢，这一年的结束<br>我们来年加油，来年继续</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=470402746&auto=1&height=66"></iframe>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Lemon</title>
    <url>/2019/12/30/Lemon/</url>
    <content><![CDATA[<p>Lemon<br>歌手 : 米津玄師<br>作曲 : 米津玄師<br>作词 : 米津玄師</p>
<p>夢ならばどれほどよかったでしょう<br>如果这一切都是梦境该有多好</p>
<p>未だにあなたのことを夢にみる<br>至今仍能与你在梦中相遇</p>
<p>忘れた物を取りに帰るように<br>如同取回遗忘之物一般</p>
<p>古びた思い出の埃を払う<br>细细拂去将回忆覆盖的尘埃</p>
<p>戻らない幸せがあることを<br>最终是你让我懂得了</p>
<p>最後にあなたが教えてくれた<br>这世间亦有无法挽回的幸福</p>
<p>言えずに隠してた昏い過去も<br>那些未对他人提及过的黑暗往事</p>
<p>あなたがいなきゃ永遠に昏いまま<br>如果不曾有你的话 它们将永远沉睡在黑暗中</p>
<p>きっともうこれ以上 傷つくことなど<br>我知道这世上一定没有</p>
<p>ありはしないとわかっている<br>比这更令人难过的事情了</p>
<p>あの日の悲しみさえ<br>那日的悲伤</p>
<p>あの日の苦しみさえ<br>与那日的痛苦</p>
<p>そのすべてを愛してた あなたとともに<br>连同深爱着这一切的你</p>
<p>胸に残り離れない<br>化作了深深烙印在我心中的</p>
<p>苦いレモンの匂い<br>苦涩柠檬的香气</p>
<p>雨が降り止むまでは帰れない<br>在雨过天晴前都无法归去</p>
<p>今でもあなたはわたしの光<br>时至今日 你仍是我的光芒</p>
<p>暗闇であなたの背をなぞった<br>在黑暗中追寻着你的身影</p>
<p>その輪郭を鮮明に覚えている<br>那轮廓至今仍鲜明地刻印于心</p>
<p>受け止めきれないものと出会うたび<br>每当遇到无法承受的苦痛时</p>
<p>溢れてやまないのは涙だけ<br>总是不禁泪如泉涌</p>
<p>何をしていたの<br>你都经历过什么</p>
<p>何を見ていたの<br>又目睹过什么呢</p>
<p>わたしの知らない横顔で<br>脸上浮现着我不曾见过的神情</p>
<p>どこかであなたが今<br>如果你正在什么地方</p>
<p>わたしと同じ様な<br>与我一样</p>
<p>涙にくれ 淋しさの中にいるなら<br>终日过着以泪洗面的寂寞生活的话</p>
<p>わたしのことなどどうか 忘れてください<br>就请你将我的一切全部遗忘吧</p>
<p>そんなことを心から願うほどに<br>这是我发自内深处唯一的祈愿</p>
<p>今でもあなたはわたしの光<br>时至今日 你仍是我的光芒</p>
<p>自分が思うより 恋をしていたあなたに<br>我深深地恋慕着你 甚至超出了我自己的想象</p>
<p>あれから思うように 息ができない<br>自此每当想起你 都如同窒息般痛苦</p>
<p>あんなに側にいたのにまるで嘘みたい<br>你曾亲密伴我身旁 如今却如烟云般消散</p>
<p>とても忘れられないそれだけが確か<br>唯一能确定的是 我永远都不会将你遗忘</p>
<p>あの日の悲しみさえ<br>那日的悲伤</p>
<p>あの日の苦しみさえ<br>与那日的痛苦</p>
<p>その全てを愛してたあなたと共に<br>连同深爱着这一切的你</p>
<p>胸に残り離れない<br>化作了深深烙印在我心中的</p>
<p>苦いレモンの匂い<br>苦涩柠檬的香气</p>
<p>雨が降り止むまでは帰れない<br>在雨过天晴前都无法归去</p>
<p>切り分けた果実の片方の様に<br>如同被切开的半个柠檬一般</p>
<p>今でもあなたはわたしの光<br>时至今日 你仍是我的光芒</p>
<iframe src="//player.bilibili.com/player.html?aid=28491533&cid=49302940&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>晚安</title>
    <url>/2019/12/28/%E6%99%9A%E5%AE%89/</url>
    <content><![CDATA[<p>晚安<br>歌手 : 丢火车<br>作曲 : 球子<br>作词 : 丢火车<br>晚安 愿长夜无梦 在所有夜晚安眠<br>晚安 望路途遥远 都有人陪伴身边<br>想说的话都没有说完 还是会有些遗憾<br>这一生 有些短<br>晚安<br>晚安 在醒来之前 我才会说出再见<br>晚安 在天亮之后 那事非与你无关<br>我们离开荒芜的绿洲<br>回到没有阳光的白昼<br>你醒了 尽管我<br>所有的美梦都没做完<br>你会不会突然地想起我<br>在某个没有睡意的清醒时刻<br>想把身上所有枷锁 全部挣脱<br>只为自己做了选择<br>你会不会突然地忘记了<br>就这样等待到底是为了什么<br>不安的心 渐渐干涸 失去了颜色<br>再也不会想起我<br>晚安<br>晚安 愿长夜无梦 在所有夜晚安眠<br>晚安 望路途遥远 都有人陪伴身边<br>我们离开荒芜的绿洲<br>回到没有阳光的白昼<br>你醒了 尽管我<br>所有的美梦都没做完<br>晚安 晚安<br>晚安 晚安<br>晚安 晚安<br>晚安向沉睡自己告别<br>你会不会突然地想起我<br>在某个没有睡意的清醒时刻<br>想把身上所有枷锁 全部挣脱<br>只为自己做了选择<br>你会不会突然地忘记了<br>就这样等待到底是为了什么<br>不安的心 渐渐干涸 失去了颜色<br>再也不会想起我<br>晚安 愿长夜无梦 在所有夜晚安眠<br>晚安 望路途遥远 都有人陪伴身边</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=34923114&auto=1&height=66"></iframe>

<blockquote class="blockquote-center">想你，在最开心的时刻</blockquote>]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>没有人，在年少时想成为一个普通人</title>
    <url>/2019/11/04/%E6%B2%A1%E6%9C%89%E4%BA%BA-%E5%9C%A8%E5%B9%B4%E5%B0%91%E6%97%B6%E6%83%B3%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E4%BA%BA/</url>
    <content><![CDATA[<p>尊敬的老师<br>亲爱们<br>大家好<br>我是838班的张锡峰<br>相信很多同学应该认识我<br>在大家眼里我扮演更多的通常是个谐星的角色<br>可是大家似乎忘记了<br>在我这看似狂野<br>实则狂野的外表下<br>也隐藏着一颗憧憬阳光的心<br>所以<br>我站在这里<br>与大家分享关于学习我的看法<br>我演讲的主题是：青春梦想<br>话出这世间<br>唯有青春与梦想不可辜负</p>
<p>花开正好<br>微风不燥<br>我们扬帆<br>起航<br>首先<br>青春<br>青春是什么颜色的<br>是五月的花海<br>灿烂无比<br>是海边的浪花<br>永不停息<br>是仲夏的骄阳<br>激情四射，<br>青春在衡中<br>是绚丽多彩</p>
<p>原来啊<br>我常常想<br>别人尊重我<br>是因为我很优秀<br>可是<br>到了衡中才发现<br>别人尊重我<br>是因为<br>别人很优秀<br>这<br>是衡中学子<br>独有的<br>青春魅力</p>
<p>同样<br>正值青春，<br>我们有犯错的权利，<br>记得第一次交改错本<br>我问老师要改多少，<br>老师说<br>根据个人情况<br>在精不在多<br>哦呜<br>是吗<br>这可是您说的<br>说时迟那时快<br>我顿时绽放了一个耀眼笑容<br>我心不在焉<br>草草了事<br>可是<br>改错发下来时却是<br>一片万紫千红的样子<br>上面<br>有详细的批注<br>评语是这样的<br>这改错改的不错<br>有些题改着改着就错了<br>我们老师青春活泼的力量<br>就这样让学习生活妙趣横生</p>
<p>其次<br>是这青春的学习气氛<br>当你满眼都是追求卓越的字样时<br>便也<br>没理由落后了<br>连我这个<br>被同学们誉为古娜拉黑暗之神的人<br>也<br>早已经<br>在前往卓越的路上</p>
<p>我喜欢在某个课间琢磨那些<br>优雅的<br>美丽的数学题<br>小东西<br>真是别致<br>我喜欢<br>在某天清晨头昏脑胀时<br>回想刚刚学过的<br>系统命名法<br>哇<br>这一瞬间有100万个可能<br>我喜欢某天晚上躺在床上<br>回想曾经背过的老子<br>知人者智，自知者明<br>胜人者有力，自胜者强<br>我好困啊</p>
<p>第二<br>梦想有一条路<br>人烟稀少<br>寸步难行<br>但是<br>却不得不坚持前进<br>因为他的尽头<br>种着梦想<br>同学们<br>你的梦想是什么<br>相信<br>很多人的回答都会是清北这样的顶尖名校<br>我们选择他们不仅仅因为他们是名校<br>还因为他们坐落的城市<br>他们美丽的传说<br>对于痴迷于地理学科的我来说<br>外面的世界<br>外面的城市就是我的梦想<br>这里<br>广东<br>对外开放的前沿，<br>我把它做成卡贴随身携带<br>这里<br>上海<br>全中国最大的城市<br>我把它拍成照片贴在课桌上<br>这里<br>西安<br>大唐不夜城<br>我做梦都会想起它<br>看完这些<br>不知道同学们心里有什么感触<br>此刻<br>你的心里是否充满了对未来的渴望<br>我问同学们一个问题<br>请大家伸出右手<br>看<br>他还想什么<br>像右手<br>这都被你发现了吗<br>同学们<br>果然见多识广啊<br>请大家<br>五指并拢<br>放于腰间<br>慢慢高举<br>举过头顶<br>张开<br>成功了吗<br>那恭喜你<br>你给自己<br>放了个烟花</p>
<p>可是<br>烟花虽美<br>转瞬即逝<br>现在请同学们伸出的烟花<br>把它攥成拳<br>大家看<br>它又像什么<br>好<br>我们不要再来了<br>请大家把你的右拳置于你的耳边<br>如果你能清楚地听到脉搏的律动<br>那么我告诉你<br>这<br>是生命<br>我们梦想很美<br>很远大<br>但是只有把掌握成拳<br>用尽全力<br>挥向生活<br>这样<br>才是青春路上<br>该有的姿态</p>
<p>同学们<br>你<br>有没有感到一种震撼<br>相信<br>很多人都会跟我一样<br>因为这是一种念想<br>一种发自内心<br>由内而外的<br>对城市<br>对未来的渴望<br>少年们早已不想拘泥于这里<br>只能在所谓<br>抖音<br>电影里<br>只观望别人的生活<br>可是<br>为什么我们就只能做那个躲在阴暗的角落里<br>新鲜的舞台之上<br>光鲜亮丽的别人的那个<br>卑微的人<br>这样不行<br>一点都不好玩<br>我们<br>会走出去<br>顺境也好<br>逆境也好<br>人生<br>本就是一场与种种困难无休无尽的斗争<br>一场<br>敌众我寡的斗争<br>我曾把自己向往大学热爱的城市<br>拍成照片贴在课桌上<br>每当我精疲力竭时<br>便要看下他<br>然后质问自己<br>就这样啦<br>你就这点东西<br>你真的真的到了最后歇斯底里不能坚持的地步了吗<br>你的理想是诗<br>理想是梦<br>理想是远方的田野<br>是穿越世界的旅行<br>但现在你能做的所有<br>只是<br>把手握紧<br>厚积薄发<br>你<br>只有付出<br>付出你的时间<br>赌上你的尊严<br>拿出你的全部<br>你的everything<br>当别人打游戏时你在学习<br>当别人睡懒觉时你在学习<br>你含着泪在深夜里舞蹈<br>在回忆里奔跑<br>没有人<br>在年少时想成为一个普通人<br>尽管生活<br>它会剥夺你的所爱<br>践踏你的尊严<br>把你踩在脚下<br>遍体鳞伤<br>但你<br>怎能<br>倒下<br>你的身后<br>是挚爱的人<br>那些受过的伤终将成为你的勋章<br>都是你<br>送给未来的自己最好的礼物<br>我<br>也有梦想啊<br>我告诉自己<br>总有一天<br>我会站在金色的舞台上<br>聚光灯打向我<br>摄像机对准我<br>所有人的目光注视着我<br>我能站在台上侃侃而谈<br>此刻<br>世界只有我一<br>我要让平日轻蔑我的对手知道<br>我要让他们亲口说出的三个字<br>你<br>赢了<br>如果说<br>青春<br>是足迹<br>那梦想<br>一定<br>叫做远方<br>请同学们相信<br>生活明朗<br>万物可爱<br>人间值得<br>未来可期</p>
<iframe src="//player.bilibili.com/player.html?aid=53043610&cid=92800991&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"style=" width: 100%;height: 600px;"> </iframe>

<blockquote class="blockquote-center">没有人，在年少时成为一个普通人</blockquote>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>那年你27、8岁</title>
    <url>/2019/11/01/%E9%82%A3%E5%B9%B4%E4%BD%A027-8%E5%B2%81/</url>
    <content><![CDATA[<p>18岁以后，他已经不是为了自己而活着</p>
<p>18岁，你上了大学。</p>
<p>20岁，你大二结束，开始悔恨<br>自己前两年幼稚的行为<br>于是开始努力</p>
<p>22岁你大学毕业了，却发现<br>找不到一份令自己满意的工作</p>
<p>26岁，你看着身边的人都结了婚<br>婚礼的份子钱逐年递增<br>春节回家，父母从带你串亲戚<br>变成了带你去见相亲对象<br>见了十几个姑娘<br>你每次都觉得和那个她比<br>差了一点</p>
<p>28岁那年，你遇到了一个和你遭遇差不多的姑娘<br>你们有一搭没一搭聊着<br>她说：你还不错<br>你喝了一口可乐说：你也是<br>你还不确定喜不喜欢她<br>双方家长就已经摆好了订婚宴<br>结婚的前一周，你和朋友出去喝酒<br>你说，不想结婚<br>朋友说，你啊，就是想太多。谁不是这么过来的？</p>
<p>29岁，你们终于结了婚<br>婚礼办的不大不小，朋友来的不多不少<br>攒了几年想要去实现理想的钱<br>搭在了这一场百人的私人庙会上<br>婚礼进行到中间<br>司仪带着标准的商业化微笑<br>对着台下的亲朋喊道<br>要不要让他们亲一个！<br>台下那些人跟着一起起哄<br>不知道为什么<br>你简简单单的亲了一口<br>俩人恢复到了一开始的站位<br>你小声说了一句：我爱你<br>那个昨天还看不惯你倒腾模型的新娘<br>愣了一下说：我也爱你<br>你不确定她是不是对你说的<br>就像你不确定是不是对她说的一样<br>婚礼结束后，并没有你想象的浪漫<br>你听着外屋的新娘一笔一笔的算着份子钱<br>想着不过才两年，怎么就变成这样了<br>想着想着，洞房夜就睡着了</p>
<p>30岁，她怀孕了<br>辞掉了工作，在家养胎<br>你在公司逐渐有了点地位<br>手里管着十来个人<br>独立负责一个项目<br>结婚前陪嫁的那辆20万左右的车<br>也变成了你一个人的独享<br>但你依然不敢放松<br>每次加班<br>电话那头都是抱怨与委屈<br>但你不能争辩什么<br>谁让她怀了你的孩子<br>在这一刻<br>不论是她的父母还是你的父母<br>都无条件的站在这一边</p>
<p>31岁，孩子落地了<br>前前后后连孕检带住院费花了10万块钱<br>不过无所谓<br>你看着你的孩子，怎么看怎么喜欢<br>高兴的仿佛这是你的新生</p>
<p>32岁，这是人生最不愿意重复的一年<br>平均睡眠3小时<br>孩子每一个小时都要闹腾一次<br>第二天拖着睡不醒的眼睛去上班<br>老板说你上班不干活<br>回家媳妇说你不干活<br>你想了半天不明白，那谁干活呢？<br>那辆开了3年的车<br>成为了你真正的家<br>你不在抱怨路上拥堵的交通<br>你甚至开始希望<br>再多堵一会<br>回到家，你关了发动机<br>在车上点了一根烟<br>这是你每天最幸福的十分钟<br>车前是功名利禄，车尾是柴米油盐</p>
<p>35岁你因为身体越来越差<br>加班越来越少<br>晋升的速度也越来越缓慢<br>那天下班，媳妇告诉你<br>孩子要上幼儿园了<br>双语的一个月3000<br>你皱了皱眉头，那边就已经不耐烦了<br>“四单元的老王家孩子，一个月6000”<br>“你已经这样了，你想让孩子也输？”<br>你没说话，回屋给媳妇转了6000块钱<br>这笔钱，你原本打算给自己过个生日，买个新电脑</p>
<p>38岁，孩子上了一年级<br>老师说一年级最关键，打好基础很重要<br>你笑着说，是是是，老师您多照顾<br>新生接待的老师看着你不明事理的脸<br>给你指了一条明路<br>“课外辅导班，一个月2200”</p>
<p>40岁的时候，孩子上了三年级<br>老师说，三年级，最关键，承上启下很重要<br>你笑着说：是是是，正打算再报个补习班</p>
<p>44岁，孩子上了初中<br>有一天回到家，她对你说<br>爸爸，我想学钢琴<br>你没什么犹豫的<br>你以为这些年，你已经习惯了<br>但那句“爸爸现在买不起”你始终说不出口<br>好在孩子比较懂事<br>她说：爸爸没事，要不我先学陶笛也可以<br>你看着这么懂事的孩子，却开心不起来</p>
<p>46岁，孩子上了一个不好不差的高中<br>有一天你在开会，接到了老师的电话<br>电话里说你的孩子在学校打架了<br>叫你去一趟<br>你唯唯诺诺的<br>和那个比你还小5岁的领导请了个假<br>到学校又被老师训了一通<br>无非台词就是那一句<br>你们做家长的就知道工作，能不能陪陪孩子<br>你看着这个老师，有点可笑<br>好像当时说：家长在外辛苦点<br>多赚点钱让孩子多补补课的和他不是一个人</p>
<p>50岁，孩子上了大学<br>很争气，是一个一本<br>他学的专业你有点看不懂<br>你只知道工作不一定好找<br>而且学费还死贵<br>你和他深夜想聊聊<br>准备了半斤白酒，一碟花生米<br>你说着那些曾经你最讨厌的话<br>还是要为以后工作着想<br>挑个热门的专业<br>活着比热爱重要<br>你们从交流变成了争吵<br>你发现，你老了<br>老到可能都打不过这个18岁的孩子<br>你说不过他，只能说一句：我是你爸爸！<br>孩子看着你，知道再怎么争辩都没用<br>这场确立你最后威严的酒局不欢而散<br>你听的不真切<br>在孩子回自己屋的路上好像叨叨了一句<br>“我不想活的像你一样”<br>怎么就哭了呢？50岁的人了<br>一定是酒太辣了，对不对<br>一定是酒太辣了</p>
<p>55岁，孩子工作了，似乎有一点理解你了<br>但你却反了过来，你说不要妥协</p>
<p>56岁，孩子也结婚了<br>你问他喜欢那个姑娘么<br>他愣了愣说：喜欢吧</p>
<p>60岁，辛苦了一辈子，想出去走走<br>身边的那个人过了30年<br>你依旧分不清到底喜不喜欢<br>你们开始规划旅游路线<br>这么多年了<br>你们还是存在分歧，还是在争吵<br>某个瞬间，你觉得<br>这样可能也挺好<br>一切都准备好了<br>儿子说：爸妈，我工作太忙了<br>可以帮我照顾一下孩子么<br>你们退了机票，又回到了30年前</p>
<p>70岁，孩子的孩子也长大了，不用天天操心了<br>你下定决心说：一定要去玩一趟<br>可是手边的拐杖<br>只能支持你走到楼下的花园<br>75岁，你在医院的病床上<br>身边聚满了人，你迷迷糊糊的看见医生摇了摇头<br>周围那些人神情肃穆<br>你明白了，你要死掉了<br>你没有感到一丝害怕<br>你突然问自己，我到底是什么时候死掉的呢？<br>你想起来30岁的那场婚礼<br>原来，那时候，你就死掉了吧<br>依照惯例<br>死前的3秒，你的大脑要走马灯<br>倒叙你这75个年头的一生<br>画面一张一张的过<br>1秒<br>2秒<br>两秒过去了<br>你面无表情的看着这两秒内的回忆<br>第3秒<br>突然你笑了<br>原来已经回到了15岁的那一年<br>你看见一个男孩<br>他叼着一袋牛奶，背着书包<br>从另一个女孩家的阳台下跑过<br>那个男孩朝窗户里看了看<br>那是15岁的你暗恋的那个女孩子<br>你想不起来她长什么样子了<br>最后一秒你努力的回忆着<br>然后终于笑了出来<br>3秒过去了<br>身边的人突然间开始嚎啕大哭<br>你可能听不清了<br>你最后听到的嘈杂的声音<br>是一群十五六的少年 起着哄说的<br>答应他<br>答应他<br>答应他</p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>钱,没有高低贵贱之分</title>
    <url>/2019/10/30/%E7%8A%B9%E5%A4%AA%E4%BA%BA%E6%99%BA%E6%85%A7%E6%B3%95%E5%88%99100%E6%9D%A1-%E9%92%B1-%E6%B2%A1%E6%9C%89%E9%AB%98%E4%BD%8E%E8%B4%B5%E8%B4%B1%E4%B9%8B%E5%88%86/</url>
    <content><![CDATA[<p>2000年前，犹太教的拉比们就已经开始教育他们的同胞，“钱不是罪恶，钱是神对人的祝福”，“《圣经》发射光明，金钱散发温暖”，“身体依心而生存，心则依靠钱包而生存”。金钱是成功的标志，是实现人生价值的工具，所以<br>“金钱是给美好人生的祝福，是人给上帝的礼物”。</p>
<p>《塔木德》中说：“金钱平等，因此，人格平等，于是怀有赚大钱的欲望才好。金钱对于任何人来说，都是平等的，它没有高低贵贱的差别。”这是犹太人的经商法则。</p>
<blockquote>
<p>有一位犹太人在一个公众场合演讲，为了证明人在任何时候都要看得起自己，他拿起了20美元，高举过头顶。</p>
<p>“看，这是20美元，崭新的20美元，有谁想要？”结果所有的人都举起了手。</p>
<p>然后，他把这张纸币在手里揉了揉，纸币变得皱巴巴的了，然后又问观众：“现在有人想要这20美元吗？”所有的人举起了手。</p>
<p>他把这张纸币放在地下，用脚狠狠地踩了几下，钱币已经变得又脏又烂了。他拿起钱来，又问：“现在还有人想要吗？”</p>
<p>结果还是所有的人都举起了手，于是他说：“朋友们，钱在任何的时候都是钱，它不会因为你揉了它，你把它踩烂，它的价值就会有任何的变化，它依然可以在商店里花出去。”</p>
</blockquote>
<p>为什么那张钞票在那个演讲者的手里揉皱了，又被他踩脏弄破了，还是有人想要它呢，因为梦票就是钞票，钞票是没有高低费贱的，它不会因为受到了什么“待遇”就有所差别，它的价值还是和以前一样，和其他等面值的钞票的价值是一样的。只要他们的价值一样，钞票都是平等的。</p>
<p>犹太人就是这样的观念，所以他们总是不怕生意细微，即使连小的生意也是不会放弃的，因而在他们的经商历史中，他们喜欢把“钞票不问出处”这句话挂在嘴上，实际上是在教人们创造和积累财富必须处心积虑，必须巧捕商机，必须妙用手腕。</p>
<p>钱是货币，是一个人拥有的物质财富的多少的标志，他本身不存在贵贱问感。犹太人的赚钱观念和我们的传统观念不一样，他们丝毫不认为拉三轮、扛麻袋较就低贱，而当老板、做经理就高贵，钱在谁的口袋里都一样是钱，他们不会到了另一个人的口袋中就不是钱了。</p>
<p>因此他们在赚钱的时候，不会觉得钱是低贱或高贵的，他们不会因为自己目前所从事的职业不好而感到自愧不如，他们在从事所谓的低贱的职业的时候，心态也表现得十分平和。</p>
<p>犹太人对钱的观念自有所持，特别是犹太商人，他们认为“金钱无姓氏，更无履历表”。他们不像有些国家和民族那样，把钱分为“干净的钱”或“不干净的钱”。他们自信，通过经营赚来的钱，是心安理得的。因此，他们通过千方百计的经营，尽量赚取更多的钱，不管这些钱是农夫出卖了产品得来的，还是赌徒赢来的，还是知识分子脑力劳动得来的，都是收之无愧，泰然处之。</p>
<p>赚钱有术的犹太人数不胜数，以放债发迹的亚伦就是典型的一例。</p>
<blockquote>
<p>这位移居英国的犹太人从打工开始，用积蓄的一点小钱做些小生意。由于生意的扩大，他需要资金周转，不得不向钱庄或银行借钱。他在自己的实践中发觉，向别人借钱的代价确实太高，往往与商业经营获得的利润相差无儿。他想，自己辛辛苦苦经营全为银行打工，而且风险比银行还大，倒不如自己从事放债业务合算。</p>
<p>几年后，他开始了放债业务。他一边维持小生意经营，一边抽出部分资本货给急需用钱的人。另外，他又从银行货来利率相对较低的钱，以较高的利率转贷给别人，从中赚取差额利润。有些等钱应急的生产者或个人，宁愿以月息20%借货，这样，等于100元放贷1年，可获得240%的回报率，这比投资做买卖更能赚钱，亚伦就是盯着这个赚钱的路子，迅速走上发迹之路的，亚伦63岁逝世时，留一下的钱财在当时英国是首屈一指的。</p>
</blockquote>
<p>犹太人的经商活动，有一个看似简单却很难做到的特点，他们对顾客总是视同仁，而不带一丝成见。在犹太人看来，因为成见而坏了可以赚钱的生意，简直是太不值得了。</p>
<p>犹太人散居世界各地，对各国人他们都视为同胞。无论是住在华盛顿、莫期科或伦教等地，犹太人之间都经常保持密切的联系。</p>
<p>要想赚钱，就得打破原有的成见，这是犹太人经商得出的启示，就像金钱没有肮脏和干净之分一样，犹太人对赚钱的对象也是不加区分的。只要能赚钱，达成生意协议，能从你的手中得到钱，这种生意就可以做。在犹太人的脑海里，在进行贸易往来时，无论你是美国人，还是俄国人；无论你是欧洲人还是非洲人，只要你和他的这笔交易能给他带来利润，他就可以和你交易。</p>
<p>要赚钱，就不要顾虑太多，不能被原来的传统习惯和观念所束缚。要敢于打破旧传统，接受新观念。也就是说要想赚钱，就要打破成见。试想一下，如果因为和对方的思想意识不同，自己在原来成见的作用下，主动放弃了一次赚大钱的机会，岂不是太可惜，太不值得了！我们知道，金钱是没有国籍的，所以，赚钱就不应当区分国籍，为自己设置赚钱的种种限制。聪明的犹太人很早就认识到这点，所以他们很团结，结合在一起共同赚外国人的钱，这就是他们成功的原因所在！</p>
<p>由于犹太人对金钱不问出处，这样保证了他们的思想是完全自由的，丝毫不受世俗观念的拘束。在他们的眼里，什么生意都可以做，什么钱都可以赚，即使“卖棺材的也可以赚钱”</p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>犹太人智慧法则100条</category>
      </categories>
      <tags>
        <tag>犹太人智慧法则100条</tag>
      </tags>
  </entry>
  <entry>
    <title>前言</title>
    <url>/2019/10/29/%E7%8A%B9%E5%A4%AA%E4%BA%BA%E6%99%BA%E6%85%A7%E6%B3%95%E5%88%99100%E6%9D%A1-%E5%89%8D%E8%A8%80/</url>
    <content><![CDATA[<p>犹太民族是一个谜一样的民族</p>
<p>在人类历史上的长河中，可以说没有哪一个民族像犹太民族这样，没有家园，没有土地，没有生存的权利，被异族追杀、迫害，四处漂泊、流浪，饱受屈辱和磨难，饥饿和折磨。但也没有哪一个民族能像他们这样在恶劣的环境中，凭着他们独特的智慧和坚强不屈的精神生存下来，并谱写了人类史上璀璨的文明。</p>
<p>据《福布斯》杂志报道，世界前400名亿万富翁中，有60人是犹太人，占总数的15%。犹太人凭借独特的经营技巧和众多富甲天下的商贾，摘取了“世界第一商人”的桂冠。美国前400个富豪家族中，犹太人占了23%。如果仅限于前40人，实际上40%是犹太人。犹太人获诺贝尔奖的人数超过240人，是世界各民族平均数的28倍。其中获得诺贝尔奖的科学家中，有17%是犹太人。世界10大哲学家中，有8人就是犹太人……</p>
<p>犹太民族之所以令世界瞩目，一切源于犹太人运用自己杰出的智慧，生生不息地延续着民族的圣火，创造着民族的伟大辉煌和历史，还创造着世界的伟大知识和财富。</p>
<p>“三个犹太人坐在一起，就可以决定世界！”这是世人对犹太人非凡智慧的肯定。</p>
<p>犹太商人是商人中的智者，更是商人中的魔鬼，他们能够从零开始，从一无所有起步，最终成为亿万富翁。冒险是犹太人的习惯，犹太民族特有的冒险精神令犹太商人在产品上，在经营手段上，在许许多多方面打破常规，引领变革。任何东西到了犹太人手里，都会变成商品，他们早已把合同、公司乃至文化、艺术甚至于他们的上帝都商品化了。犹太商人之所以能成为世界上最成功的商人，犹太生意经之所以成为智慧的生意经，就是因为智慧与金钱同在与统一。</p>
<p>对于犹太人来说，人生就是一张谈判桌，他们无时不在与上帝、敌人、对手进行谈判。</p>
<p>犹太人在谈判时特别小心谨慎，从不信口开河，并在谈判前尽可能地做好大量的准备工作，对谈判中所有可能出现的问题都要预测到，并拿出相应的对策，做到成竹在胸。因而，犹太人在谈判时幽默风趣，能够轻易地控制谈判气氛，并取得谈判的胜利。</p>
<p>犹太民族既没有罗马帝国式的强大武功，也没有中华民族般的强盛国力，有的只是不堪一击的弱小和备受歧视的卑贱。然而，犹太民族区别于其他民族的根本地方就在于它的“一神救”信仰，生生不息的民族意志，还有非凡的处世智慧。</p>
<p>无论是历法还是礼俗，无论是节日还是姓名，无不深深地打着犹太宗数的格印。犹太民族是一个热爱生活的民族，犹太人认为，生活中无论遭遇到何种困难，都要让自己享受生活的快乐，几乎所有的犹太先知们，都无一例外地鼓励人们从自己所拥有的一切资源中，寻找幸福美好的生活。</p>
<p>被驱逐和被歧视的经历，以及不断迁徙的挑战和痛苦使得这个民族上千万遍地思考自己的未来，面对惨痛的人生经历，他们积极思考，积极行动，找到了民族生存之道——“智慧是任何人都抢不走的。”这是犹太人的圣训。所以，犹太民族视教育如敬神，教师与学校是仅次于上帝的字眼，这也是犹太民族历经浩劫却永存的秘诀之一。他们认为，一个人是天才还是庸才，并不取决于天赋，而是取决于教育，只要教育得法，普通人同样可以顺利成长为一个优秀人才。正是犹太人这种超凡的教育智慧，才使得犹太民族涌现出了一批又一批世界大师级的杰出人物……</p>
<p>如果你没有真正地去了解另一种族、另一宗教信仰和另一文化群体的人们，就无法理解像摩根、洛克菲勒、爱因斯坦、弗洛伊德、哈默、索罗斯……这些犹太人巨擎的成功理念。</p>
<p>本书是浓缩犹太人千年智慧的经典阅读范本。是纵横商海的智慧宝典，管理精英的案头必备。</p>
<p>一滴水可以折射太阳的光辉，一本书可以影响人生和命运。愿本书能使你“以智慧立地，以聪明定天；以知识使深渊裂开，使天空滴下甘露。”</p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>犹太人智慧法则100条</category>
      </categories>
      <tags>
        <tag>犹太人智慧法则100条</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-算法练习</title>
    <url>/2019/05/06/%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="心里的准备"><a href="#心里的准备" class="headerlink" title="心里的准备"></a>心里的准备</h2><p><img src="%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/1.png" alt=""></p>
<h2 id="算法练习的网站"><a href="#算法练习的网站" class="headerlink" title="算法练习的网站"></a>算法练习的网站</h2><p><a href="https://leetcode.com/problemset/all/" target="_blank" rel="noopener">https://leetcode.com/problemset/all/</a><br>或者<br><a href="https://leetcode-cn.com/problemset/all/" target="_blank" rel="noopener">https://leetcode-cn.com/problemset/all/</a><br><img src="%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/2.png" alt=""></p>
<ul>
<li>做题的时候用上切题四件套</li>
</ul>
<p><img src="%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/3.png" alt=""></p>
<h2 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h2><p><img src="%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/4.png" alt=""></p>
<h2 id="坚持"><a href="#坚持" class="headerlink" title="坚持"></a>坚持</h2><p><img src="%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/5.png" alt=""></p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-复杂度</title>
    <url>/2019/05/06/%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<h2 id="课程的进度"><a href="#课程的进度" class="headerlink" title="课程的进度"></a>课程的进度</h2><p><img src="%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6/1.png" alt=""></p>
<h2 id="算法的复杂度"><a href="#算法的复杂度" class="headerlink" title="算法的复杂度"></a>算法的复杂度</h2><ul>
<li>时间复杂度</li>
<li>空间复杂度</li>
</ul>
<p><img src="%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6/2.png" alt=""></p>
<h2 id="常用复杂度"><a href="#常用复杂度" class="headerlink" title="常用复杂度"></a>常用复杂度</h2><p>多块代码复杂度只看最高复杂度</p>
<p><img src="%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6/3.png" alt=""></p>
<h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><h3 id="常数统一为O-1"><a href="#常数统一为O-1" class="headerlink" title="常数统一为O(1)"></a>常数统一为O(1)</h3><p><img src="%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6/4.png" alt=""><br><img src="%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6/5.png" alt=""><br><img src="%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6/6.png" alt=""><br><img src="%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6/7.png" alt=""></p>
<h3 id="算法的使用对比"><a href="#算法的使用对比" class="headerlink" title="算法的使用对比"></a>算法的使用对比</h3><p><img src="%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6/8.png" alt=""></p>
<h3 id="递归的复杂度计算"><a href="#递归的复杂度计算" class="headerlink" title="递归的复杂度计算"></a>递归的复杂度计算</h3><p>斐波拉契数列</p>
<p><img src="%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6/9.png" alt=""></p>
<p>每次计算都要重新计算一便前面的数据，复杂度应该为O(2^N)</p>
<p><img src="%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6/10.png" alt=""></p>
<h4 id="常见递归及递归复杂度计算网站"><a href="#常见递归及递归复杂度计算网站" class="headerlink" title="常见递归及递归复杂度计算网站"></a>常见递归及递归复杂度计算网站</h4><p><img src="%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6/11.png" alt=""></p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-学习方式</title>
    <url>/2019/05/06/%E7%AE%97%E6%B3%95-%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>明确！目标！</p>
</blockquote>
<p>学习最重要的是方式，更重要也是坚持</p>
<p><img src="%E7%AE%97%E6%B3%95-%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%BC%8F/1.png" alt=""></p>
<h2 id="Chunk-it-up-切碎知识点"><a href="#Chunk-it-up-切碎知识点" class="headerlink" title="Chunk it up(切碎知识点)"></a>Chunk it up(切碎知识点)</h2><p><img src="%E7%AE%97%E6%B3%95-%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%BC%8F/2.png" alt=""><br><img src="%E7%AE%97%E6%B3%95-%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%BC%8F/3.png" alt=""><br><img src="%E7%AE%97%E6%B3%95-%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%BC%8F/6.png" alt=""></p>
<h2 id="Deliberate-practicing-刻意练习"><a href="#Deliberate-practicing-刻意练习" class="headerlink" title="Deliberate practicing(刻意练习)"></a>Deliberate practicing(刻意练习)</h2><p><img src="%E7%AE%97%E6%B3%95-%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%BC%8F/4.png" alt=""></p>
<h2 id="Feedback-反馈"><a href="#Feedback-反馈" class="headerlink" title="Feedback(反馈)"></a>Feedback(反馈)</h2><p><img src="%E7%AE%97%E6%B3%95-%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%BC%8F/5.png" alt=""></p>
<h2 id="算法的解析"><a href="#算法的解析" class="headerlink" title="算法的解析"></a>算法的解析</h2><p><img src="%E7%AE%97%E6%B3%95-%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%BC%8F/7.png" alt=""></p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot打war包</title>
    <url>/2019/05/03/SpringBoot%E6%89%93war%E5%8C%85/</url>
    <content><![CDATA[<ol>
<li><p>更改pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加spring-boot-starter-tomcat的provided依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupld</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactld</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加maven-war-plugin插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$(project.artifactld)<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupld</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactld</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改启动类</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">@ <span class="type">SpringBootApplication</span> </span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletlnitializer</span> </span>&#123;</span><br><span class="line">	public static void main(<span class="type">String</span>[] args)&#123;</span><br><span class="line">		<span class="type">SpringApplication</span>.run(<span class="type">MainApplication</span><span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">	<span class="keyword">protected</span> <span class="type">SpringApplicationBuilder</span> configure(<span class="type">SpringApplicationBuilder</span> builder)&#123;</span><br><span class="line">		<span class="keyword">return</span> builder.sources(<span class="type">MainApplication</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>目录下<br><code>mvn clean package</code></p>
</li>
</ol>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter</title>
    <url>/2019/05/03/JMeter/</url>
    <content><![CDATA[<h1 id="JMeter入门"><a href="#JMeter入门" class="headerlink" title="JMeter入门"></a>JMeter入门</h1><p>官方网站：<a href="https://jmeter.apache.org/" target="_blank" rel="noopener">https://jmeter.apache.org/</a><br>软件下载：<a href="https://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">https://jmeter.apache.org/download_jmeter.cgi</a><br>用户手册：<a href="https://jmeter.apache.org/usermanual/index.html" target="_blank" rel="noopener">https://jmeter.apache.org/usermanual/index.html</a></p>
<p>下载后解压，找到目录 bin 下的 jmeter.bat 文件，双击启动<br><img src="JMeter/1.png" alt=""><br><img src="JMeter/2.png" alt=""></p>
<h2 id="设置中文界面"><a href="#设置中文界面" class="headerlink" title="设置中文界面"></a>设置中文界面</h2><p><img src="JMeter/3.png" alt=""></p>
<h2 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h2><ol>
<li>设置线程组<br><img src="JMeter/4.png" alt=""></li>
</ol>
<ul>
<li>线程数为并发数</li>
<li>Ramp-Up时间（秒）为启动全部线程的时间</li>
</ul>
<ol start="2">
<li>添加HTTP请求默认值</li>
</ol>
<p><img src="JMeter/5.png" alt=""><br><img src="JMeter/6.png" alt=""></p>
<ul>
<li>只需要配置web服务器，就不用每次都配置请求（端口不填默认80）</li>
</ul>
<ol start="3">
<li>添加取样器</li>
</ol>
<p><img src="JMeter/7.png" alt=""><br><img src="JMeter/8.png" alt=""></p>
<ul>
<li>这里就不用添加web服务器了</li>
</ul>
<ol start="4">
<li>添加监听器</li>
</ol>
<p><img src="JMeter/9.png" alt=""></p>
<p>因为查看的结果的不同，添加你觉得适合的监听器</p>
<p><img src="JMeter/10.png" alt=""></p>
<p>我添加的了一个聚合报告，在点击运行的时候回弹出一个对话框，问是否保存测试计划，根据你自己的需求决定</p>
<h2 id="设置不同的参数"><a href="#设置不同的参数" class="headerlink" title="设置不同的参数"></a>设置不同的参数</h2><ol>
<li>先添加HTTP请求默认值</li>
</ol>
<p><img src="JMeter/11.png" alt=""></p>
<ol start="2">
<li>添加Http请求</li>
</ol>
<p><img src="JMeter/12.png" alt=""></p>
<ol start="3">
<li>准备样本文件</li>
</ol>
<p><img src="JMeter/13.png" alt=""></p>
<ol start="4">
<li>添加CSV数据文件</li>
</ol>
<p><img src="JMeter/14.png" alt=""></p>
<ul>
<li>选中你的样本文件</li>
<li>可以添加多个数据，分隔符可以自己定义，推荐‘,’</li>
<li>设置对应每行的变量名，也要用分隔符分隔</li>
</ul>
<p><img src="JMeter/15.png" alt=""></p>
<ol start="5">
<li>添加变量</li>
</ol>
<p>${定义的变量名}<br><img src="JMeter/16.png" alt=""></p>
<ol start="6">
<li>添加监听器</li>
</ol>
<p>我选择了查看结果树</p>
<p>这样就能看到每次请求的链接</p>
<p><img src="JMeter/17.png" alt=""></p>
<h2 id="Redis压测"><a href="#Redis压测" class="headerlink" title="Redis压测"></a>Redis压测</h2><ol>
<li>100个并发连接，100000个请求<br><code>redis-benchmark -h 127.0.0.1 -p 6379 -c 100 -n 100000</code></li>
<li>存取大小为100字节的数据包<br><code>redis-benchmark -h 127.0.0.1 -p 6379 -q -d 100</code></li>
<li>只测试某些操作的性能<br><code>redis-benchmark -t set,lpush -q -n 100000</code></li>
<li>只测试某些数值存取的性能<br><code>redis-benchmark -n 100000 -q script load &quot;redis.call(set&#39;,&#39;foo&#39;,&#39;bar)&quot;</code></li>
</ol>
<h2 id="JMeter命令行"><a href="#JMeter命令行" class="headerlink" title="JMeter命令行"></a>JMeter命令行</h2><ol>
<li>在windows上录好jmx</li>
<li>命令行：<code>sh jmeter.sh -n -t XXX.jmx -l result.jtl</code></li>
<li>把result.jtl导入到jmeter</li>
</ol>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>JMeter</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>redis安装在liunx</title>
    <url>/2019/04/21/redis%E5%AE%89%E8%A3%85-20190421/</url>
    <content><![CDATA[<p>下载包<br><a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a><br>如包名为redis-5.0.4.tar.gz</p>
<p>上传至服务器：如/tmp<br>移动到目录下<br><code>cd /tmp</code></p>
<ol>
<li>解压<br><code>tar -zvxf redis-5.0.4.tar.gz</code></li>
<li>移动到/usr/local并重名名为redis<br><code>mv redis-5.0.4 /usr/local/redis</code></li>
<li>切换目录<br><code>cd /usr/local/reids/</code></li>
<li>编译<br><code>make</code></li>
<li>添加启动目录<br><code>make install</code></li>
<li>测试访问<br><code>redis-s &gt; tab &gt;显示 redis-server 即可</code></li>
<li>打开配置文件<br><code>vi redis.conf</code></li>
<li>更改<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#服务器访问</span></span><br><span class="line"><span class="string">bind</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">&gt;</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> </span><br><span class="line"><span class="comment">#后台执行</span></span><br><span class="line"><span class="string">daemonize</span> <span class="literal">no</span> <span class="string">&gt;</span> <span class="literal">yes</span></span><br><span class="line"><span class="comment">#访问密码</span></span><br><span class="line"><span class="string">requirepass</span> <span class="string">&gt;</span> <span class="number">1234567</span></span><br></pre></td></tr></table></figure>
完成后<br><code>:wq</code></li>
<li>启动服务<br><code>redis-server ./redis.conf</code><br>进程查看<code>ps -ef | grep redis</code></li>
<li>访问服务<br><code>redis-cli</code></li>
<li>退出<br><code>exit</code></li>
<li>关闭<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br><span class="line">shutdown save</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure></li>
<li>配置成服务<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">./install_server.sh </span><br><span class="line"><span class="number">1.</span>端口</span><br><span class="line"><span class="number">2.</span>配置文件</span><br><span class="line"><span class="number">3.</span>log文件</span><br><span class="line"><span class="number">4.</span>数据目录</span><br><span class="line"><span class="number">5.</span>可执行文件</span><br></pre></td></tr></table></figure>
检测<br><code>chkconfig --list | grep redis</code></li>
</ol>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>获取ip</title>
    <url>/2019/04/06/%E8%8E%B7%E5%8F%96ip-20190406/</url>
    <content><![CDATA[<p>util</p>
<a id="more"></a>

<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.<span class="keyword">extern</span>.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpUtil</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">String</span> ERROR_IP = <span class="string">"127.0.0.1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Pattern pattern = Pattern.</span><br><span class="line">            compile(<span class="string">"(2[5][0-5]|2[0-4]\\d|1\\d&#123;2&#125;|\\d&#123;1,2&#125;)\\.(25[0-5]|2[0-4]\\d|1\\d&#123;2&#125;|\\d&#123;1,2&#125;)\\.(25[0-5]|2[0-4]\\d|1\\d&#123;2&#125;|\\d&#123;1,2&#125;)\\.(25[0-5]|2[0-4]\\d|1\\d&#123;2&#125;|\\d&#123;1,2&#125;)"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取外网IP</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param request</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">getRemoteIp</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">String</span> ip = request.getHeader(<span class="string">"x-real-ip"</span>);</span><br><span class="line">        <span class="keyword">if</span> (ip == null) &#123;</span><br><span class="line">            ip = request.getRemoteAddr();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过滤反向代理的ip</span></span><br><span class="line">        <span class="keyword">String</span>[] stemps = ip.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">if</span> (stemps != null &amp;&amp; stemps.length &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//得到第一个IP，即客户端真实IP</span></span><br><span class="line">            ip = stemps[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ip = ip.trim();</span><br><span class="line">        <span class="keyword">if</span> (ip.length() &gt; <span class="number">23</span>) &#123;</span><br><span class="line">            ip = ip.substring(<span class="number">0</span>, <span class="number">23</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户的真实ip</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param request</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">getUserIP</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 优先取X-Real-IP</span></span><br><span class="line">        <span class="keyword">String</span> ip = request.getHeader(<span class="string">"X-Real-IP"</span>);</span><br><span class="line">        <span class="keyword">if</span> (ip == null || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">"x-forwarded-for"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ip == null || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getRemoteAddr();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"0:0:0:0:0:0:0:1"</span>.equals(ip)) &#123;</span><br><span class="line">                ip = ERROR_IP;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = ERROR_IP;</span><br><span class="line">            <span class="keyword">return</span> ip;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pos = ip.indexOf(<span class="string">','</span>);</span><br><span class="line">        <span class="keyword">if</span> (pos &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            ip = ip.substring(<span class="number">0</span>, pos);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">getLastIpSegment</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">String</span> ip = getUserIP(request);</span><br><span class="line">        <span class="keyword">if</span> (ip != null) &#123;</span><br><span class="line">            ip = ip.substring(ip.lastIndexOf(<span class="string">'.'</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ip = <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValidIP</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">String</span> ip = getUserIP(request);</span><br><span class="line">        <span class="keyword">return</span> isValidIP(ip);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断我们获取的ip是否是一个符合规则ip</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param ip</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValidIP</span><span class="params">(<span class="keyword">String</span> ip)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(ip)) &#123;</span><br><span class="line">            <span class="built_in">log</span>.debug(<span class="string">"ip is null. valid result is false"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Matcher matcher = pattern.matcher(ip);</span><br><span class="line">        <span class="keyword">boolean</span> <span class="built_in">isValid</span> = matcher.matches();</span><br><span class="line">        <span class="built_in">log</span>.debug(<span class="string">"valid ip:"</span> + ip + <span class="string">" result is: "</span> + <span class="built_in">isValid</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isValid</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">getLastServerIpSegment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">String</span> ip = getServerIP();</span><br><span class="line">        <span class="keyword">if</span> (ip != null) &#123;</span><br><span class="line">            ip = ip.substring(ip.lastIndexOf(<span class="string">'.'</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ip = <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">getServerIP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InetAddress inet;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inet = InetAddress.getLocalHost();</span><br><span class="line">            <span class="keyword">String</span> hostAddress = inet.getHostAddress();</span><br><span class="line">            <span class="keyword">return</span> hostAddress;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"127.0.0.1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mail</title>
    <url>/2019/04/06/Mail-20190406/</url>
    <content><![CDATA[<p>util</p>
<a id="more"></a>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.zuohy.beans.Mail;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.mail.EmailException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.mail.HtmlEmail;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> MailUtil &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">boolean</span> send(Mail mail) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">        <span class="built_in">String</span> <span class="keyword">from</span> = <span class="string">""</span>;</span><br><span class="line">        int port = <span class="number">25</span>;</span><br><span class="line">        <span class="built_in">String</span> host = <span class="string">""</span>;</span><br><span class="line">        <span class="built_in">String</span> pass = <span class="string">""</span>;</span><br><span class="line">        <span class="built_in">String</span> nickname = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        HtmlEmail email = <span class="keyword">new</span> HtmlEmail();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            email.setHostName(host);</span><br><span class="line">            email.setCharset(<span class="string">"UTF-8"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">String</span> str : mail.getReceivers()) &#123;</span><br><span class="line">                email.addTo(str);</span><br><span class="line">            &#125;</span><br><span class="line">            email.setFrom(<span class="keyword">from</span>, nickname);</span><br><span class="line">            email.setSmtpPort(port);</span><br><span class="line">            email.setAuthentication(<span class="keyword">from</span>, pass);</span><br><span class="line">            email.setSubject(mail.getSubject());</span><br><span class="line">            email.setMsg(mail.getMessage());</span><br><span class="line">            email.send();</span><br><span class="line">            log.info(<span class="string">"&#123;&#125; 发送邮件到 &#123;&#125;"</span>, <span class="keyword">from</span>, StringUtils.join(mail.getReceivers(), <span class="string">","</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (EmailException e) &#123;</span><br><span class="line">            log.error(<span class="keyword">from</span> + <span class="string">"发送邮件到"</span> + StringUtils.join(mail.getReceivers(), <span class="string">","</span>) + <span class="string">"失败"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 邮件</span></span><br><span class="line"><span class="comment"> * User: dummmmmmmy</span></span><br><span class="line"><span class="comment"> * Date: 2018-12-06</span></span><br><span class="line"><span class="comment"> * Time: 23:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Mail &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> subject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;<span class="built_in">String</span>&gt; receivers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MD5加密</title>
    <url>/2019/04/06/MD5%E5%8A%A0%E5%AF%86-20190406/</url>
    <content><![CDATA[<p>util</p>
<a id="more"></a>

<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line"><span class="keyword">public</span> class MD5Util &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">String</span> encrypt(<span class="keyword">String</span> s) &#123;</span><br><span class="line">        <span class="built_in">char</span> hexDigits[] = &#123; <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span> &#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] btInput = s.getBytes();</span><br><span class="line">            <span class="comment">// 获得MD5摘要算法的 MessageDigest 对象</span></span><br><span class="line">            MessageDigest mdInst = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            <span class="comment">// 使用指定的字节更新摘要</span></span><br><span class="line">            mdInst.update(btInput);</span><br><span class="line">            <span class="comment">// 获得密文</span></span><br><span class="line">            <span class="built_in">byte</span>[] md = mdInst.digest();</span><br><span class="line">            <span class="comment">// 把密文转换成十六进制的字符串形式</span></span><br><span class="line">            <span class="built_in">int</span> j = md.length;</span><br><span class="line">            <span class="built_in">char</span> <span class="built_in">str</span>[] = <span class="keyword">new</span> <span class="built_in">char</span>[j * <span class="number">2</span>];</span><br><span class="line">            <span class="built_in">int</span> k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">                <span class="built_in">byte</span> byte0 = md[i];</span><br><span class="line">                <span class="built_in">str</span>[k++] = hexDigits[byte0 &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">0xf</span>];</span><br><span class="line">                <span class="built_in">str</span>[k++] = hexDigits[byte0 &amp; <span class="number">0xf</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">String</span>(<span class="built_in">str</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="built_in">log</span>.error(<span class="string">"generate md5 error, &#123;&#125;"</span>, s, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>密文搜索</title>
    <url>/2019/04/06/%E5%AF%86%E6%96%87%E6%90%9C%E7%B4%A2-20190406/</url>
    <content><![CDATA[<p>福尔摩斯从X星收到一份资料，全部是小写字母组成。<br>他的助手提供了另一份资料：许多长度为8的密码列表。<br>福尔摩斯发现，这些密码是被打乱后隐藏在先前那份资料中的。</p>
<p>请你编写一个程序，从第一份资料中搜索可能隐藏密码的位置。要考虑密码的所有排列可能性。</p>
<p>数据格式：</p>
<p>输入第一行：一个字符串s，全部由小写字母组成，长度小于1024*1024<br>紧接着一行是一个整数n,表示以下有n行密码，1&lt;=n&lt;=1000<br>紧接着是n行字符串，都是小写字母组成，长度都为8</p>
<p>要求输出：<br>一个整数, 表示每行密码的所有排列在s中匹配次数的总和。</p>
<p>例如：<br>用户输入：<br>aaaabbbbaabbcccc<br>2<br>aaaabbbb<br>abcabccc</p>
<p>则程序应该输出：<br>4</p>
<p>这是因为：第一个密码匹配了3次，第二个密码匹配了1次，一共4次。</p>
<p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 512M<br>CPU消耗 &lt; 5000ms</p>
<p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p>
<p>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意：不要使用package语句。不要使用jdk1.7及以上版本的特性。<br>注意：主类的名字必须是：Main，否则按无效代码处理。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">String</span> input = scanner.next();</span><br><span class="line">		<span class="keyword">int</span> number = scanner.nextInt();</span><br><span class="line">		<span class="keyword">int</span> sun = <span class="number">0</span>;</span><br><span class="line">		ArrayList in = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= input.length() - <span class="number">8</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">String</span> cut = input.substring(i, i + <span class="number">8</span>);</span><br><span class="line">			cut = breakDown(cut);</span><br><span class="line">			in.add(cut);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; number; i++) &#123;</span><br><span class="line">			<span class="keyword">String</span> pass = scanner.next();</span><br><span class="line">			pass = breakDown(pass);</span><br><span class="line">			<span class="keyword">int</span> num = Testing(in, pass);</span><br><span class="line">			sun += num;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.<span class="built_in">println</span>(sun);</span><br><span class="line">		scanner.<span class="built_in">close</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Testing</span><span class="params">(ArrayList in, <span class="keyword">String</span> pass)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; in.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (in.<span class="built_in">get</span>(i).equals(pass)) &#123;</span><br><span class="line">				num++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">breakDown</span><span class="params">(<span class="keyword">String</span> pass)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">char</span>[] charArray = pass.toCharArray();</span><br><span class="line">		Arrays.sort(charArray);</span><br><span class="line">		pass = <span class="keyword">String</span>.valueOf(charArray);</span><br><span class="line">		<span class="keyword">return</span> pass;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax小计</title>
    <url>/2019/04/06/Ajax-20190406/</url>
    <content><![CDATA[<h1 id="XMLHttpRequest发送请求"><a href="#XMLHttpRequest发送请求" class="headerlink" title="XMLHttpRequest发送请求"></a>XMLHttpRequest发送请求</h1><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">				<span class="comment">//1.获取a节点，并为其添加onclick响应函数</span></span><br><span class="line">				<span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>)[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">					<span class="comment">//3.创建一个XMLHttpRequest对象  </span></span><br><span class="line">					<span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">					<span class="comment">//4.准备发送请求的数据：url</span></span><br><span class="line">					<span class="keyword">var</span> <span class="built_in">url</span> = <span class="keyword">this</span>.href + <span class="string">"?time="</span> + <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">					<span class="keyword">var</span> method = <span class="string">"GET"</span>;</span><br><span class="line">					<span class="comment">//5.调用XMLHttpRequest对象的open方法</span></span><br><span class="line">					request.open(method, <span class="built_in">url</span>);</span><br><span class="line">					<span class="comment">//6.调用XMLHttpRequest对象的send方法</span></span><br><span class="line">					request.send(<span class="literal">null</span>);</span><br><span class="line">					<span class="comment">//7.为XMLHttpRequest对象添加onreadystatechange响应函数</span></span><br><span class="line">					request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">						<span class="comment">//8.判断响应是否完成：XMLHttpRequest对象的readyState属性值为4的时候</span></span><br><span class="line">						<span class="keyword">if</span>(request.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">							<span class="comment">//9.再判断响应是否可用：XMLHttpRequest对象status属性为200</span></span><br><span class="line">							<span class="keyword">if</span>(request.status == <span class="number">200</span> || request.status == <span class="number">304</span>) &#123;</span><br><span class="line">								<span class="comment">//10.打印响应结果responseText</span></span><br><span class="line">								<span class="built_in">console</span>.log(request.responseText);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="comment">//2.取消a节点的默认行为</span></span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Jquery中的Ajax"><a href="#Jquery中的Ajax" class="headerlink" title="Jquery中的Ajax"></a>Jquery中的Ajax</h1><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;$(<span class="string">"a"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">					<span class="comment">//url</span></span><br><span class="line">					<span class="comment">//args :JSON格式</span></span><br><span class="line">					<span class="comment">//function :回调函数：当响应结束时，回调函数被触发。响应结果在data中</span></span><br><span class="line">					</span><br><span class="line">					<span class="comment">//使用load方法处理Ajax</span></span><br><span class="line">					<span class="keyword">var</span> <span class="built_in">url</span> = <span class="keyword">this</span>.href;</span><br><span class="line">					<span class="keyword">var</span> args = &#123;</span><br><span class="line">						<span class="string">"time"</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">					&#125;;</span><br><span class="line">					<span class="comment">//结果是直接插入HTML节点中</span></span><br><span class="line">					$(<span class="string">"#con"</span>).load(<span class="built_in">url</span>, args);</span><br><span class="line"></span><br><span class="line">					<span class="comment">//使用load方法处理Ajax,加上选择器</span></span><br><span class="line">					<span class="keyword">var</span> <span class="built_in">url</span> = <span class="keyword">this</span>.href + <span class="string">"h2 a"</span>;</span><br><span class="line">					<span class="keyword">var</span> args = &#123;</span><br><span class="line">						<span class="string">"time"</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">					&#125;;</span><br><span class="line">					$(<span class="string">"#con"</span>).load(<span class="built_in">url</span>, args);</span><br><span class="line"></span><br><span class="line">					<span class="comment">//GET请求,返回结果在返回结果里面需要自己指定</span></span><br><span class="line">					<span class="keyword">var</span> <span class="built_in">url</span> = <span class="keyword">this</span>.href;</span><br><span class="line">					<span class="keyword">var</span> args = &#123;</span><br><span class="line">						<span class="string">"time"</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">					&#125;;</span><br><span class="line">					$.get(<span class="built_in">url</span>, args, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">						$(<span class="string">"#con"</span>).empty().append(data);</span><br><span class="line">					&#125;);</span><br><span class="line">					</span><br><span class="line">					<span class="comment">//POST请求,返回结果在返回结果里面需要自己指定</span></span><br><span class="line">					<span class="keyword">var</span> <span class="built_in">url</span> = <span class="keyword">this</span>.href;</span><br><span class="line">					<span class="keyword">var</span> args = &#123;</span><br><span class="line">						<span class="string">"time"</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">					&#125;;</span><br><span class="line">					$.post(<span class="built_in">url</span>, args, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">						$(<span class="string">"#con"</span>).empty().append(data);</span><br><span class="line">					&#125;);</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Json格式"><a href="#Json格式" class="headerlink" title="Json格式"></a>Json格式</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonObject = &#123;</span><br><span class="line">			<span class="string">"name"</span>: <span class="string">"guigui"</span>,</span><br><span class="line">			<span class="string">"age"</span>: <span class="number">12</span>,</span><br><span class="line">			<span class="string">"address"</span>: &#123;</span><br><span class="line">				<span class="string">"city"</span>: <span class="string">"sc"</span>,</span><br><span class="line">				<span class="string">"school"</span>: <span class="string">"sc"</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="string">"teaching"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">				alert(<span class="string">"Java"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		alert(jsonObject.name);</span><br><span class="line">		alert(jsonObject.address.city);</span><br><span class="line"></span><br><span class="line">		jsonObject.teaching();</span><br><span class="line">		<span class="comment">//把字符串转为json</span></span><br><span class="line">		<span class="keyword">var</span> jsonStr = <span class="string">"&#123;'name':'guigui'&#125;"</span>;</span><br><span class="line">		jsonStr =  <span class="built_in">eval</span>(<span class="string">"("</span> + jsonStr + <span class="string">")"</span>);</span><br><span class="line">		alert(jsonStr.name);</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA自定义后的快捷键-仿Eclipse</title>
    <url>/2019/04/06/IDEA2-20190406/</url>
    <content><![CDATA[<ol>
<li>执行(run) alt+r</li>
<li>提示补全 (Class Name Completion) alt+/</li>
<li>单行注释 ctrl + /</li>
<li>多行注释 ctrl + shift + /</li>
<li>向下复制一行 (Duplicate Lines) ctrl+alt+down</li>
<li>删除一行或选中行 (delete line) ctrl+d</li>
<li>向下移动行(move statement down) alt+down</li>
<li>向上移动行(move statement up) alt+up</li>
<li>向下开始新的一行(start new line) shift+enter</li>
<li>向上开始新的一行 (Start New Line before current) ctrl+shift+enter</li>
<li>如何查看源码 (class) ctrl + 选中指定的结构 或 ctrl + shift + t</li>
<li>万能解错/生成返回值变量 alt + enter</li>
<li>退回到前一个编辑的页面 (back) alt + left</li>
<li>进入到下一个编辑的页面(针对于上条) (forward) alt + right</li>
<li>查看继承关系(type hierarchy) F4</li>
<li>格式化代码(reformat code) ctrl+shift+F</li>
<li>提示方法参数类型(Parameter Info) ctrl+alt+/</li>
<li>复制代码 ctrl + c</li>
<li>撤销 ctrl + z</li>
<li>反撤销 ctrl + y</li>
<li>剪切 ctrl + x</li>
<li>粘贴 ctrl + v</li>
<li>保存 ctrl + s</li>
<li>全选 ctrl + a</li>
<li>选中数行，整体往后移动 tab</li>
<li>选中数行，整体往前移动 shift + tab</li>
<li>查看类的结构：类似于 eclipse 的 outline ctrl+o</li>
<li>重构：修改变量名与方法名(rename) alt+shift+r</li>
<li>大写转小写/小写转大写(toggle case) ctrl+shift+y</li>
<li>生成构造器/get/set/toString alt +shift + s</li>
<li>查看文档说明(quick documentation) F2</li>
<li>收起所有的方法(collapse all) alt + shift + c</li>
<li>打开所有方法(expand all) alt+shift+x</li>
<li>打开代码所在硬盘文件夹(show in explorer) ctrl+shift+x</li>
<li>生成 try-catch 等(surround with) alt+shift+z</li>
<li>局部变量抽取为成员变量(introduce field) alt+shift+f</li>
<li>查找/替换(当前) ctrl+f</li>
<li>查找(全局) ctrl+h</li>
<li>查找文件 double Shift</li>
<li>查看类的继承结构图(Show UML Diagram) ctrl + shift + u</li>
<li>查看方法的多层重写结构(method hierarchy) ctrl+alt+h</li>
<li>添加到收藏(add to favorites) ctrl+alt+f</li>
<li>抽取方法(Extract Method) alt+shift+m</li>
<li>打开最近修改的文件(Recently Files) ctrl+E</li>
<li>关闭当前打开的代码栏(close) ctrl + w</li>
<li>关闭打开的所有代码栏(close all) ctrl + shift + w</li>
<li>快速搜索类中的错误(next highlighted error) ctrl + shift + q</li>
<li>选择要粘贴的内容(Show in Explorer) ctrl+shift+v 49 查找方法在哪里被调用(Call Hierarchy) ctrl+shift+h</li>
</ol>
<p><a href="IDEA2-20190406/快捷键.rar">快捷键包</a></p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA常用模板</title>
    <url>/2019/04/06/IDEA1-20190406/</url>
    <content><![CDATA[<a id="more"></a>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Test</span> &#123;</span><br><span class="line">    <span class="comment">//常用模板</span></span><br><span class="line">    <span class="comment">//psvm</span></span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//sout</span></span><br><span class="line">        System.<span class="keyword">out</span>.println();</span><br><span class="line"><span class="comment">//变种 soutp/soutm/soutv/xxx.sout</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"args = ["</span> + args + <span class="string">"]"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Test.main"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"args = "</span> + args);</span><br><span class="line">        <span class="built_in">int</span> num = <span class="number">0</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(num);</span><br><span class="line"><span class="comment">//fori</span></span><br><span class="line">        <span class="built_in">int</span>[] arr = new <span class="built_in">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//变种 iter/itar</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i : arr) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="built_in">int</span> i1 = arr[i];</span><br><span class="line">            System.<span class="keyword">out</span>.println(i1);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//list.for</span></span><br><span class="line">        ArrayList list = new ArrayList();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//变种 list.fori/list.forr</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = list.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ifn</span></span><br><span class="line">        ArrayList list2 = new ArrayList();</span><br><span class="line">        list2.add(<span class="number">1</span>);</span><br><span class="line">        list2.add(<span class="number">2</span>);</span><br><span class="line">        list2.add(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (list2 == <span class="literal">null</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//变种 inn/xxx.nn/xxx.null</span></span><br><span class="line">        <span class="keyword">if</span> (list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">if</span> (list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">if</span> (list2 == <span class="literal">null</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//prsf</span></span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> <span class="built_in">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//psf</span></span><br><span class="line">    <span class="keyword">public</span> static <span class="keyword">final</span> <span class="built_in">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//psgi</span></span><br><span class="line">    <span class="keyword">public</span> static <span class="keyword">final</span> <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//psgs</span></span><br><span class="line">    <span class="keyword">public</span> static <span class="keyword">final</span> String s = <span class="string">"0"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Solr</title>
    <url>/2019/04/06/solr-20190406/</url>
    <content><![CDATA[<h1 id="索引搜索"><a href="#索引搜索" class="headerlink" title="索引搜索"></a>索引搜索</h1><ul>
<li>环境配置<ul>
<li>下载解压</li>
<li>solr.bat<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">e:</span><br><span class="line">cd E:<span class="symbol">\M</span>ySVN<span class="symbol">\r</span>epository<span class="symbol">\s</span>olr-7.5.0<span class="symbol">\b</span>in</span><br><span class="line">solr start -p 8989</span><br></pre></td></tr></table></figure></li>
<li>运行<br><code>http://localhost:8989/solr/#/~cores</code></li>
<li>创建core（报错）</li>
<li>solr-7.5.0\server\solr\configsets_default目录下，把conf文件夹复制到solr-7.5.0\server\solr\new_core 目录下，然后再执行Add core</li>
</ul>
</li>
<li>数据库配置<ul>
<li>Jar包<br>JDBC驱动<br><img src="solr-20190406/1.png" alt=""></li>
<li>放入server\solr-webapp\webapp\WEB-INF\lib</li>
<li>\example\example-DIH\solr\db\conf覆盖\server\solr\test_core\conf</li>
<li>修改db-data-config.xml<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;dataConfig&gt;</span><br><span class="line">	&lt;dataSource driver="com.mysql.cj.jdbc.Driver" url="jdbc:mysql://localhost:3306/test?serverTimezone=UTC&amp;amp;characterEncoding=utf-8" <span class="keyword">user</span>="root" <span class="keyword">password</span>="123456"/&gt;</span><br><span class="line">	&lt;document&gt;</span><br><span class="line">	    &lt;entity <span class="type">name</span>="user" query="select * from user" pk="user_id"&gt;</span><br><span class="line">	            &lt;field column="user_id" <span class="type">name</span>="userId" /&gt;</span><br><span class="line">				&lt;field column="user_name" <span class="type">name</span>="userName" /&gt;</span><br><span class="line">				&lt;field column="user_pass" <span class="type">name</span>="userPass" /&gt;</span><br><span class="line">				&lt;field column="user_time" <span class="type">name</span>="userTime" /&gt;</span><br><span class="line">	    &lt;/entity&gt;</span><br><span class="line">	&lt;/document&gt;</span><br><span class="line">&lt;/dataConfig&gt;</span><br><span class="line">配置说明：</span><br><span class="line">dataSource<span class="comment">--&gt;数据库连接，用户名密码配置</span></span><br><span class="line">entity<span class="comment">--&gt;sql定义</span></span><br><span class="line">field<span class="comment">--&gt;字段定义，column对应数据库字段，name对应solr的索引字段名</span></span><br></pre></td></tr></table></figure></li>
<li>修改managed-schema<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;field <span class="attribute">name</span>=<span class="string">"userId"</span> <span class="attribute">type</span>=<span class="string">"string"</span> <span class="attribute">indexed</span>=<span class="string">"true"</span> <span class="attribute">stored</span>=<span class="string">"true"</span> <span class="attribute">required</span>=<span class="string">"true"</span> <span class="attribute">multiValued</span>=<span class="string">"false"</span> /&gt; </span><br><span class="line">&lt;field <span class="attribute">name</span>=<span class="string">"userName"</span> <span class="attribute">type</span>=<span class="string">"text_general"</span> <span class="attribute">indexed</span>=<span class="string">"true"</span> <span class="attribute">stored</span>=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;field <span class="attribute">name</span>=<span class="string">"userPass"</span> <span class="attribute">type</span>=<span class="string">"text_general"</span> <span class="attribute">indexed</span>=<span class="string">"true"</span> <span class="attribute">stored</span>=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;field <span class="attribute">name</span>=<span class="string">"userTime"</span> <span class="attribute">type</span>=<span class="string">"pdate"</span> <span class="attribute">indexed</span>=<span class="string">"false"</span> <span class="attribute">stored</span>=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p>注意：我们copy来的配置文件中有一些关键字已经配置了，如id，name，那就不需要重新配置field，只需要配置没有的。</p>
<p>如果你的表主键id不是叫id，那么你定义的field需要指定required=”true”,并把默认的id的required=”true”属性去掉，并把<uniqueKey>id</uniqueKey>修改成你的主键id值，否则数据导入不进去。</p>
<p>说明：因为只是做个基础的搜索业务，没有精细该schema文件，精益求精的小伙伴可以把冗余字段都干掉试试。</p>
<p>到此，配置完成，接下来我们操作导入数据</p>
<h2 id="清空数据"><a href="#清空数据" class="headerlink" title="清空数据"></a>清空数据</h2><p><img src="solr-20190406/2.png" alt=""></p>
<p><code>&lt;delete&gt;&lt;query&gt;*:*&lt;/query&gt;&lt;/delete&gt;&lt;commit/&gt;</code></p>
<h1 id="增量更新索引"><a href="#增量更新索引" class="headerlink" title="增量更新索引"></a>增量更新索引</h1><ul>
<li>准备jar包</li>
</ul>
<p><a href="solr-20190406/apache-solr-dataimportscheduler-1.4.jar">下载</a><br>放入\server\solr-webapp\webapp\WEB-INF</p>
<ul>
<li>添加监听</li>
</ul>
<p>打开web.xml</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line"> &lt;listener-class&gt; org<span class="selector-class">.apache</span><span class="selector-class">.solr</span><span class="selector-class">.handler</span><span class="selector-class">.dataimport</span><span class="selector-class">.scheduler</span>.ApplicationListener</span><br><span class="line"> &lt;/listener-class&gt;</span><br><span class="line">&lt;/listener&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>增加dataimport.properties配置</li>
</ul>
<p>增加增量导入配置文件<br>重点是目录<br>是在\server\solr目录下创建conf文件再在下面创建dataimport.properties文件</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#################################################</span></span><br><span class="line"><span class="meta">#                                               #</span></span><br><span class="line"><span class="meta">#       dataimport scheduler properties         #</span></span><br><span class="line"><span class="meta">#                                               #</span></span><br><span class="line"><span class="meta">#################################################</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#  to sync or not to sync</span></span><br><span class="line"><span class="meta">#  1 - active; anything else - inactive</span></span><br><span class="line">syncEnabled=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#  which cores to schedule</span></span><br><span class="line"><span class="meta">#  in a multi-core environment you can decide which cores you want syncronized</span></span><br><span class="line"><span class="meta">#  leave empty or comment it out if using single-core deployment</span></span><br><span class="line"><span class="meta">#  修改成你所使用的core</span></span><br><span class="line">syncCores=my_core</span><br><span class="line"></span><br><span class="line"><span class="meta">#  solr server name or IP address</span></span><br><span class="line"><span class="meta">#  [defaults to localhost if empty]</span></span><br><span class="line">server=localhost</span><br><span class="line"></span><br><span class="line"><span class="meta">#  solr server port</span></span><br><span class="line"><span class="meta">#  [defaults to 80 if empty]</span></span><br><span class="line"><span class="meta">#  安装solr的端口</span></span><br><span class="line">port=<span class="number">8983</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#  application name/context</span></span><br><span class="line"><span class="meta">#  [defaults to current ServletContextListener's context (app) name]</span></span><br><span class="line">webapp=solr</span><br><span class="line"></span><br><span class="line"><span class="meta">#  URL params [mandatory]</span></span><br><span class="line"><span class="meta">#  remainder of URL</span></span><br><span class="line"><span class="meta">#  这里改成下面的形式，solr同步数据时请求的链接</span></span><br><span class="line">params=/dataimport?command=delta-import&amp;clean=<span class="literal">false</span>&amp;commit=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#  schedule interval</span></span><br><span class="line"><span class="meta">#  number of minutes between two runs</span></span><br><span class="line"><span class="meta">#  [defaults to 30 if empty]</span></span><br><span class="line"><span class="meta">#这里是设置定时任务的，单位是分钟，也就是多长时间你检测一次数据同步，根据项目需求修改</span></span><br><span class="line"><span class="meta">#  开始测试的时候为了方便看到效果，时间可以设置短一点</span></span><br><span class="line">interval=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#  重做索引的时间间隔，单位分钟，默认7200，即5天; </span></span><br><span class="line"><span class="meta">#  为空,为0,或者注释掉:表示永不重做索引</span></span><br><span class="line">reBuildIndexInterval=<span class="number">7200</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#  重做索引的参数</span></span><br><span class="line">reBuildIndexParams=/select?qt=/dataimport&amp;command=full-import&amp;clean=<span class="literal">true</span>&amp;commit=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#  重做索引时间间隔的计时开始时间，第一次真正执行的时间=reBuildIndexBeginTime+reBuildIndexInterval*60*1000；</span></span><br><span class="line"><span class="meta">#  两种格式：2012-04-11 01:00:00 或者  01:00:00，后一种会自动补全日期部分为服务启动时的日期</span></span><br><span class="line">reBuildIndexBeginTime=<span class="number">01</span>:<span class="number">00</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改db-data-config.xml</li>
</ul>
<p>需要在entity配置</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">deltaImportQuery="<span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="string">'$&#123;dataimporter.delta.user_id&#125;'</span><span class="string">"</span></span><br><span class="line"><span class="string">deltaQuery="</span><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="string">`user_time`</span> &gt; <span class="string">'$&#123;dataimporter.last_index_time&#125;'</span><span class="string">"</span></span><br></pre></td></tr></table></figure>
<p>如叫studentId，那么，这个取变量就应该写成${dataimporter.delta.studentId}<br>${dataimporter.last_index_time}  固定写法，更新的判断条件，上一次的修改时间需要大于上一次索引的更新时间。<br>需要user_time字段</p>
<h1 id="分词技术"><a href="#分词技术" class="headerlink" title="分词技术"></a>分词技术</h1><ul>
<li>IK分词的jar包</li>
</ul>
<p><a href="solr-20190406/ikanalyzer-solr6.5.zip">下载</a></p>
<ul>
<li>把ik-analyzer-solr5-5.x.jar放入\server\solr-webapp\webapp\WEB-INF\lib</li>
<li>修改\server\solr\new_core\conf 目录下的managed-schema 文件<br>添加<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_ik"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"index"</span> <span class="attr">useSmart</span>=<span class="string">"false"</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKAnalyzer"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"query"</span> <span class="attr">useSmart</span>=<span class="string">"false"</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKAnalyzer"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义ik分词器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_ik"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">	     <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span> <span class="attr">useSmart</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">	     <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.LowerCaseFilterFactory"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"query"</span>&gt;</span></span><br><span class="line">	     <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span> <span class="attr">useSmart</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">	     <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"solr.LowerCaseFilterFactory"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure>
name=”text_ik”,分词器名称，在后面的filed定义的时候，可以直接引用。<br>如，type定义为”text_ik”，则代表该字段将进行分词索引<br><code>&lt;field name=&quot;userName&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</code></li>
</ul>
<h1 id="Java调用接口"><a href="#Java调用接口" class="headerlink" title="Java调用接口"></a>Java调用接口</h1><ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.solr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>solr-solrj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>7.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>调用</li>
</ul>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">public void solrQuery() throws IOException, SolrServerException &#123;</span><br><span class="line"> String solrUrl = <span class="string">"http://127.0.0.1:8983/solr/new_core"</span>; </span><br><span class="line">	HttpSolrClient solrClient = new HttpSolrClient.Builder(solrUrl).build(); <span class="comment">// 创建搜索对象 </span></span><br><span class="line">	SolrQuery <span class="keyword">query</span> = new SolrQuery(); <span class="comment">// 设置搜索条件 </span></span><br><span class="line">	<span class="keyword">query</span>.<span class="keyword">set</span>(<span class="string">"q"</span>,<span class="string">"name:张三是好人"</span>); <span class="comment">// 分页参数 </span></span><br><span class="line">	<span class="keyword">query</span>.setStart(0); <span class="comment">// 设置每页显示多少条 </span></span><br><span class="line">	<span class="keyword">query</span>.setRows(10); <span class="comment">//发起搜索请求 </span></span><br><span class="line">	QueryResponse response = solrClient.<span class="keyword">query</span>(<span class="keyword">query</span>); <span class="comment">// 查询结果 </span></span><br><span class="line">	SolrDocumentList docs = response.getResults(); <span class="comment">// 查询结果总数 </span></span><br><span class="line">	long <span class="keyword">count</span>= docs.getNumFound();</span><br><span class="line">	System.<span class="keyword">out</span>.println(<span class="string">"总条数为"</span>+<span class="keyword">count</span>+<span class="string">"条"</span>); </span><br><span class="line">	<span class="keyword">for</span> (SolrDocument doc : docs) &#123; </span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"id:"</span>+ doc.<span class="built_in">get</span>(<span class="string">"id"</span>) + <span class="string">",name:"</span>+ doc.<span class="built_in">get</span>(<span class="string">"name"</span>) + <span class="string">",uuid:"</span>+ doc.<span class="built_in">get</span>(<span class="string">"uuid"</span>));</span><br><span class="line">		&#125; </span><br><span class="line">	solrClient.<span class="keyword">close</span>(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Solr</tag>
      </tags>
  </entry>
  <entry>
    <title>Thread Local</title>
    <url>/2019/04/06/Java3-20190406/</url>
    <content><![CDATA[<blockquote>
<p>高并发处理 : 在当前进程取出对象，不会冲突<br>放入的东西<br>各个线程保存的东西是分开只与进程有关系<br>每个进程会处理自己的内容</p>
</blockquote>
<h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><p>ThreadLocal的是一个本地线程副本变量工具类。</p>
<p>主要用于将私有线程和该线程存放的副本对象做一个映射，各个线程之间的变量互不干扰，在高并发场景下，可以实现无状态的调用，特别适用于各个线程依赖不通的变量值完成操作的场景。</p>
<a id="more"></a>

<p>原理大佬说的很清楚了》<a href="https://www.jianshu.com/p/98b68c97df9b" target="_blank" rel="noopener">https://www.jianshu.com/p/98b68c97df9b</a></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SysUser&gt; userHolder = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;HttpServletRequest&gt; requestHolder = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(SysUser sysUser)</span></span>&#123;</span><br><span class="line">       userHolder.<span class="built_in">set</span>(sysUser);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">       requestHolder.<span class="built_in">set</span>(request);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SysUser <span class="title">getCurrentUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> userHolder.<span class="built_in">get</span>();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpServletRequest <span class="title">getCurrentRequest</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> requestHolder.<span class="built_in">get</span>();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>&#123;</span><br><span class="line">       userHolder.<span class="built_in">remove</span>();</span><br><span class="line">       requestHolder.<span class="built_in">remove</span>();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数组</title>
    <url>/2019/04/06/Java2-20190406/</url>
    <content><![CDATA[<h1 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h1><a id="more"></a>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">		 <span class="comment">// 这样拷贝数组没有隔离性</span></span><br><span class="line">		 String<span class="literal">[]</span> ss1 = &#123; <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> &#125;;</span><br><span class="line">		 <span class="comment">// 把ss1对数组的引用传递给变量ss2,两个变量指向的是用一个数组</span></span><br><span class="line">		 String<span class="literal">[]</span> ss2 = ss1;</span><br><span class="line">		 ss2<span class="literal">[<span class="number">0</span>]</span> = <span class="string">"4"</span>;</span><br><span class="line">		 <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">ss1</span>)</span>);</span><br><span class="line">	&#125;</span><br><span class="line">public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">		<span class="comment">// 方法1</span></span><br><span class="line">		<span class="comment">// 推荐</span></span><br><span class="line">		String<span class="literal">[]</span> ss1 = &#123; <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> &#125;;</span><br><span class="line">		<span class="comment">// 通过new关键字再内存中开辟一块空间，ss2指向的是新的数组对象</span></span><br><span class="line">		String<span class="literal">[]</span> ss2 = <span class="keyword">new</span> String<span class="literal">[<span class="identifier">ss1</span>.<span class="identifier">length</span>]</span>;</span><br><span class="line">		for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ss2.length; i++) &#123;</span><br><span class="line">			ss2<span class="literal">[<span class="identifier">i</span>]</span> = ss1<span class="literal">[<span class="identifier">i</span>]</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ss2<span class="literal">[<span class="number">0</span>]</span> = <span class="string">"张三"</span>;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">ss1</span>)</span>);</span><br><span class="line">	&#125;</span><br><span class="line">public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">		<span class="comment">// 方法2</span></span><br><span class="line">		<span class="comment">// API提供的方式，底层用C++写的，所以速度很快，比for循环的效率高</span></span><br><span class="line">		String<span class="literal">[]</span> ss1 = &#123; <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> &#125;;</span><br><span class="line">		String<span class="literal">[]</span> ss2 = <span class="keyword">new</span> String<span class="literal">[<span class="identifier">ss1</span>.<span class="identifier">length</span>]</span>;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>arraycopy(ss1, <span class="number">0</span>, ss2, <span class="number">0</span>, ss1.length);</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * (Object src,int srcPos,Object dest,int destPos,int length)</span></span><br><span class="line"><span class="comment">		 * src:源数组,srcPos:源数组要复制的起始位置;dest:目的数组;destPos:目的数组放置的起始位置;length:复制的长度</span></span><br><span class="line"><span class="comment">		 * 注意：src and dest都必须是同类型或者可以进行转换类型的数组．</span></span><br><span class="line"><span class="comment">		 * 有趣的是这个函数可以实现自己到自己复制，比如：</span></span><br><span class="line"><span class="comment">		 * int[] fun =&#123;0,1,2,3,4,5,6&#125;; </span></span><br><span class="line"><span class="comment">		 * System.arraycopy(fun,0,fun,3,3);</span></span><br><span class="line"><span class="comment">		 * 则结果为：&#123;0,1,2,0,1,2,6&#125;;</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">ss2</span>)</span>);</span><br><span class="line">	&#125;</span><br><span class="line">public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">		<span class="comment">//方法3</span></span><br><span class="line">		String<span class="literal">[]</span> ss1 = &#123; <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> &#125;;</span><br><span class="line">		String<span class="literal">[]</span> ss2 = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">Of(<span class="params">ss1</span>, <span class="params">ss1</span>.<span class="params">length</span>)</span>;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 *该方法对应不同的数据类型都有各自的重载方法</span></span><br><span class="line"><span class="comment">		 *original - 要复制的数组</span></span><br><span class="line"><span class="comment">		 *newLength - 要返回的副本的长度</span></span><br><span class="line"><span class="comment">		 *newType - 要返回的副本的类型</span></span><br><span class="line"><span class="comment">		 *仔细观察发现，copyOf()内部调用了System.arraycopy()方法</span></span><br><span class="line"><span class="comment">		 *区别在于：</span></span><br><span class="line"><span class="comment">		 *arraycopy()需要目标数组，将原数组拷贝到你自己定义的数组里，而且可以选择拷贝的起点和长度以及放入新数组中的位置</span></span><br><span class="line"><span class="comment">		 *copyOf()是系统自动在内部新建一个数组，调用arraycopy()将original内容复制到copy中去，并且长度为newLength。返回copy; 即将原数组拷贝到一个长度为newLength的新数组中，并返回该数组。</span></span><br><span class="line"><span class="comment">		 *总结</span></span><br><span class="line"><span class="comment">		 *Array.copyOf()可以看作是受限的System.arraycopy()，它主要是用来将原数组全部拷贝到一个新长度的数组，适用于数组扩容。</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">ss2</span>)</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数组扩容"><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">		String<span class="literal">[]</span> ss1 = &#123; <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> &#125;;</span><br><span class="line">		ss1 = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">Of(<span class="params">ss1</span>, <span class="params">ss1</span>.<span class="params">length</span> + 2)</span>;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(ss1.length);</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">ss1</span>)</span>);</span><br><span class="line">		<span class="comment">// 5</span></span><br><span class="line">		<span class="comment">// [1, 2, 3, null, null]</span></span><br><span class="line">	&#125;</span><br><span class="line">常见面试题: 统计字符的位置</span><br><span class="line">	public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">		String str = <span class="string">"统计一个字符再字符串中的所有位置"</span>;</span><br><span class="line">		<span class="built_in">int</span><span class="literal">[]</span> arry = count<span class="constructor">All(<span class="params">str</span>, '字')</span>;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">arry</span>)</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> static <span class="built_in">int</span><span class="literal">[]</span> count<span class="constructor">All(String <span class="params">str</span>, <span class="params">char</span> <span class="params">ch</span>)</span> &#123;</span><br><span class="line">		<span class="built_in">int</span><span class="literal">[]</span> <span class="built_in">array</span> = &#123;&#125;;<span class="comment">// 创建一个空数组</span></span><br><span class="line">		for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; str.length<span class="literal">()</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (ch<span class="operator"> == </span>str.<span class="built_in">char</span><span class="constructor">At(<span class="params">i</span>)</span>) &#123;</span><br><span class="line">				<span class="comment">// charAt(i)遍历String每个字符</span></span><br><span class="line">				<span class="built_in">array</span> = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">Of(<span class="params">array</span>, <span class="params">array</span>.<span class="params">length</span> + 1)</span>;</span><br><span class="line">				<span class="comment">// 扩容</span></span><br><span class="line">				<span class="built_in">array</span><span class="literal">[<span class="identifier">array</span>.<span class="identifier">length</span> - <span class="number">1</span>]</span> = i;</span><br><span class="line">				<span class="comment">// 刚扩容的位置</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return <span class="built_in">array</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="comment">//Java提供排序方法</span></span><br><span class="line">		<span class="built_in">int</span>[] ss1= &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">		Arrays.sort(ss1);</span><br><span class="line">		System.<span class="keyword">out</span>.println(Arrays.toString(ss1));</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="comment">// 方法1</span></span><br><span class="line">		<span class="comment">// 冒泡排序，前一个数与后一个数进行比较</span></span><br><span class="line">		<span class="built_in">int</span>[] ss1 = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span> &#125;;</span><br><span class="line">		<span class="built_in">int</span> temp = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ss1.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt; ss1.length; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (ss1[j] &lt; ss1[i]) &#123;</span><br><span class="line">					temp = ss1[i];</span><br><span class="line">					ss1[i] = ss1[j];</span><br><span class="line">					ss1[j] = temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.<span class="keyword">out</span>.println(Arrays.toString(ss1));</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="comment">// 方法2</span></span><br><span class="line">		<span class="comment">// 选择排序</span></span><br><span class="line">		<span class="built_in">int</span>[] ss1 = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span> &#125;;</span><br><span class="line">		<span class="built_in">int</span> temp = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ss1.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="built_in">int</span> min = i;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt; ss1.length; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (ss1[min] &gt; ss1[j]) &#123;</span><br><span class="line">					<span class="comment">// 找到比选定下标小的数</span></span><br><span class="line">					min = j;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (min != i) &#123;</span><br><span class="line">				<span class="comment">// 交换位置</span></span><br><span class="line">				temp = ss1[i];</span><br><span class="line">				ss1[i] = ss1[min];</span><br><span class="line">				ss1[min] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.<span class="keyword">out</span>.println(Arrays.toString(ss1));</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="comment">// 方法3</span></span><br><span class="line">		<span class="comment">// 插入排序</span></span><br><span class="line">		<span class="built_in">int</span>[] ss1 = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span> &#125;;</span><br><span class="line">		<span class="built_in">int</span> temp = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; ss1.length; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">				<span class="keyword">if</span> (ss1[j] &lt; ss1[j - <span class="number">1</span>]) &#123;</span><br><span class="line">					temp = ss1[j];</span><br><span class="line">					ss1[j] = ss1[j - <span class="number">1</span>];</span><br><span class="line">					ss1[j - <span class="number">1</span>] = temp;</span><br><span class="line">				&#125; <span class="keyword">else</span></span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.<span class="keyword">out</span>.println(Arrays.toString(ss1));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有序数组,二分查找</span></span><br><span class="line">	static <span class="built_in">int</span> bingarySerarch(<span class="built_in">int</span>[] <span class="built_in">array</span>, <span class="built_in">int</span> num) &#123;</span><br><span class="line">		<span class="built_in">int</span> low = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">int</span> high = <span class="built_in">array</span>.length - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">			<span class="built_in">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span> (num &gt; <span class="built_in">array</span>[mid]) &#123;</span><br><span class="line">				low = mid + <span class="number">1</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="built_in">array</span>[mid]) &#123;</span><br><span class="line">				high = mid - <span class="number">1</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> mid;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">// 无序数组，采用遍历，也可以先排序，后采用二分查找</span></span><br><span class="line">	static <span class="built_in">int</span> search(<span class="built_in">int</span>[] <span class="built_in">array</span>, <span class="built_in">int</span> num) &#123;</span><br><span class="line">		<span class="built_in">int</span> index = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>.length; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (num == <span class="built_in">array</span>[i]) &#123;</span><br><span class="line">				index = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> index;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">// Java 提供的查找方式。查看源码，它的本质就是二分查找</span></span><br><span class="line">	static <span class="built_in">void</span> test(<span class="built_in">int</span>[] <span class="built_in">array</span>, <span class="built_in">int</span> num) &#123;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * binarySearch(Object[], Object key) a: 要搜索的数组 key：要搜索的值</span></span><br><span class="line"><span class="comment">		 * 如果key在数组中，则返回搜索值的索引；否则返回-1或“-”（插入点）。插入点是索引键将要插入数组的那一点，即第一个大于该键的元素的索引。 技巧： [1]</span></span><br><span class="line"><span class="comment">		 * 搜索值不是数组元素，且在数组范围内，从1开始计数，得“ - 插入点索引值”； [2] 搜索值是数组元素，从0开始计数，得搜索值的索引值； [3]</span></span><br><span class="line"><span class="comment">		 * 搜索值不是数组元素，且大于数组内元素，索引值为 – (length + 1); [4] 搜索值不是数组元素，且小于数组内元素，索引值为 – 1。</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="built_in">int</span> index = Arrays.binarySearch(<span class="built_in">array</span>, <span class="number">8</span>);</span><br><span class="line">		System.<span class="keyword">out</span>.println(index);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>


<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java核心数据结构(List、Map、Set)原理与使用技巧</title>
    <url>/2019/04/06/Java1-20190406/</url>
    <content><![CDATA[<blockquote>
<p>JDK提供了一组主要的数据结构实现，如List、Map、Set等常用数据结构。这些数据都继承自java.util.Collection接口，并位于java.util包内</p>
</blockquote>
<h1 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h1><p>最重要的三种List接口实现：ArrayList、Vector、LinkedList。它们的类图如下：</p>
<p><img src="Java1-20190406/1.png" alt=""></p>
<p>可以看到，3种List均来自AbstratList的实现。</p>
<p>而AbstratList直接实现了List接口，并扩展自AbstratCollection。</p>
<p>ArrayList和Vector使用了数组实现，可以认为，ArrayList封装了对内部数组的操作。比如向数组中添加、删除、插入新的元素或数组的扩展和重定义。对ArrayList或者Vector的操作，等价于对内部对象数组的操作。</p>
<p>ArrayList和Vector几乎使用了相同的算法，它们的唯一区别可以认为是对多线程的支持。ArrayList没有对一个方法做线程同步，因此不是线程安全的。Vector中绝大多数方法都做了线程同步，是一种线程安全的实现。因此ArrayList和Vector的性能特性相差无几。</p>
<p>LinkedList使用了循环双向链表数据结构。LinkedList由一系列表项连接而成。一个表项总是包含3个部分：元素内容、前驱表项和后驱表项。如图所示：</p>
<p><img src="Java1-20190406/2.png" alt=""></p>
<p>LinkedList的表项源码：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">private static class <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; next;</span><br><span class="line">    <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Node</span><span class="title">(Node</span><span class="tag">&lt;E&gt;</span> prev, E element, <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; next) &#123;</span><br><span class="line">        this.item = element;</span><br><span class="line">        this.next = next;</span><br><span class="line">        this.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>无论LinkedList是否为空，链表都有一个header表项，它既是链表的开始，也表示链表的结尾。它的后驱表项便是链表的第一个元素，前驱表项便是链表的最后一个元素。如图所示：</p>
<p><img src="Java1-20190406/3.png" alt=""></p>
<p>下面比较下ArrayList和LinkedList的不同。</p>
<h2 id="增加元素到列表尾端"><a href="#增加元素到列表尾端" class="headerlink" title="增加元素到列表尾端"></a>增加元素到列表尾端</h2><p>对于ArrayList来说，只要当前容量足够大，add()操作的效率是非常高的。</p>
<p>只有当ArrayList对容量的需求超过当前数组的大小时，才需要进行扩容。扩容会进行大量的数组复制操作。而复制时最终调用的是System.arraycopy()方法，因此，add()效率还是相当高的。</p>
<p>LinkedList由于使用了链表的结构，因此不需要维护容量的大小。这点比ArrayList有优势，不过，由于每次元素增加都需要新建Node对象，并进行更多的赋值操作。在频繁的系统调用中，对性能会产生一定影响。</p>
<h2 id="插入元素到列表任意位置"><a href="#插入元素到列表任意位置" class="headerlink" title="插入元素到列表任意位置"></a>插入元素到列表任意位置</h2><p>ArrayList是基于数组实现的，而数组是一块连续的内存空间，每次插入操作，都会进行一次数组复制。大量的数组复制会导致系统性能低下。</p>
<p>LinkedList是基于链表实现的，在任意位置插入和在尾端增加是一样的。所以，如果系统应用需要对List对象在任意位置进行频繁的插入操作，可以考虑用LinkedList替代ArrayList。</p>
<h2 id="容量参数"><a href="#容量参数" class="headerlink" title="容量参数"></a>容量参数</h2><p>容量参数是ArrayList 和 Vector等基于数组的List的特有性能参数，它表示初始数组的大小。</p>
<p>合理的设置容量参数，可以减少数组扩容，提升系统性能。</p>
<p>默认ArrayList的数组初始大小为10。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> static <span class="keyword">final</span> <span class="built_in">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h2 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h2><p>常用的三种列表遍历方式：ForEach操作、迭代器和for循环。</p>
<p>对于ForEach操作，反编译可知实际上是将ForEach循环体作为迭代器处理。不过ForEach比自定义的迭代器多了一步赋值操作，性能不如直接使用迭代器的方式。</p>
<p>使用For循环通过随机访问遍历列表，ArrayList表现很好，速度最快；但是LinkedList的表现非常差，应避免使用，这是因为对LinkedList的随机访问时，总会进行一次列表的遍历操作。</p>
<h1 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h1><p>Map是一种非常常用的数据结构。围绕着Map接口，最主要的实现类有Hashtable, HashMap, LinkedHashMap 和 TreeMap，在Hashtable中，还有Properties 类的实现。</p>
<p><img src="Java1-20190406/4.png" alt=""></p>
<p>Hashtable和hashMap的区别在于Hashtable的大部分方法都做了线程同步，而HashMap没有，</p>
<p>因此，Hashtable是线程安全的，HashMap不是。</p>
<p>其次，Hashtable 不允许key或value使用null值，而HashMap可以。</p>
<p>第三，它们在内部对key的hash算法和hash值到内存索引的映射算法不同。</p>
<p>由于HashMap使用广泛，本文以HashMap为例，阐述它的实现原理。</p>
<h2 id="HashMap的实现原理"><a href="#HashMap的实现原理" class="headerlink" title="HashMap的实现原理"></a>HashMap的实现原理</h2><p>简单来说，HashMap就是将key做hash算法，然后将hash值映射到内存地址，直接取得key所对应的数据。</p>
<p>在HashMap中，底层数据结构使用的是数组。所谓的内存地址，就是数组的下标索引。</p>
<p>用代码简单表示如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">object[key_hash]</span> = value<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="Hash冲突"><a href="#Hash冲突" class="headerlink" title="Hash冲突"></a>Hash冲突</h2><p>当需要存放的两个元素1和2经hash计算后，发现对应在内存中的同一个地址。此时HashMap又会如何处理以保证数据的完整存放？</p>
<p>在HashMap的底层使用数组，但数组内的元素不是简单的值，而是一个Entity类的对象。每一个Entity表项包括key，value，next，hash几项。注意这里的next部分，它指向另外一个Entity。</p>
<p>当put()操作有冲突时，新的Entity会替换原有的值，为了保证旧值不丢失，会将next指向旧值。这便实现了在一个数组空间内存放多个值项。因此，HashMap实际上是一个链表的数组。</p>
<p>而在进行get()操作时，如果定位到的数组元素不含链表（当前entry的next指向null），则直接返回；如果定位到的数组元素包含链表，则需要遍历链表，通过key对象的equals方法逐一比对查找。</p>
<h2 id="容量参数-1"><a href="#容量参数-1" class="headerlink" title="容量参数"></a>容量参数</h2><p>和ArrayList一样，基于数组的结构，不可避免的需要在数组空间不足时，进行扩展。而数组的重组比较耗时，因此对其做一定的优化很有必要了。</p>
<p>HashMap提供了两个可以指定初始化大小的构造函数：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="constructor">HashMap(<span class="params">int</span> <span class="params">initialCapacity</span>)</span> </span><br><span class="line">          构造一个带指定初始容量和默认负载因子 (<span class="number">0.75</span>) 的空 HashMap。</span><br><span class="line"></span><br><span class="line"><span class="constructor">HashMap(<span class="params">int</span> <span class="params">initialCapacity</span>, <span class="params">float</span> <span class="params">loadFactor</span>)</span> </span><br><span class="line">          构造一个带指定初始容量和负载因子的空 HashMap。</span><br></pre></td></tr></table></figure>

<p>其中，HashMap会使用大于等于initialCapacity并且是2的指数次幂的最小的整数作为内置数组的大小。</p>
<p>负载因子又叫做填充比，它是介于0和1之间的浮点数。</p>
<p>负载因子 = 实际元素个数 / 内部数组总大小</p>
<p>负载因子的作用就是决定HashMap的阈值（threshold）。</p>
<p>阈值 = 数组总容量 × 负载因子</p>
<p>当HashMap的实际容量超过阈值便会进行扩容，每次扩容将新的数组大小设置为原大小的1.5倍。</p>
<p>默认情况下，HashMap的初始大小是16，负载因子为0.75。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">static <span class="keyword">final</span> <span class="built_in">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line">static <span class="keyword">final</span> <span class="built_in">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure>

<h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>LinkedHashMap继承自HashMap，因此，它具备了HashMap的优良特性，并在此基础上，LinkedHashMap又在内部增加了一个链表，用以存放元素的顺序。</p>
<p>因此，LinkedHashMap可以简单理解为一个维护了元素次序表的HashMap.</p>
<p>LinkedHashMap提供两种类型的顺序：一是元素插入时的顺序；二是最近访问的顺序。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="constructor">LinkedHashMap(<span class="params">int</span> <span class="params">initialCapacity</span>, <span class="params">float</span> <span class="params">loadFactor</span>, <span class="params">boolean</span> <span class="params">accessOrder</span>)</span> </span><br><span class="line">          构造一个带指定初始容量、负载因子和排序模式的空 LinkedHashMap 实例</span><br></pre></td></tr></table></figure>

<p>其中accessOrder为true时，按照元素最后访问时间排序；当accessOrder为false 时，按照插入顺序排序。默认为 false 。</p>
<p>在内部实现中，LinkedHashMap通过继承HashMap.Entity类，实现LinkedHashMap.Entity，为HashMap.Entity增加了before和after属性用以记录某一表项的前驱和后继，并构成循环链表。</p>
<h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>TreeMap可以简单理解为一种可以进行排序的Map实现。与LinkedHashMap不同，LinkedHashMap是根据元素增加或者访问的先后顺序进行排序，而TreeMap则根据元素的Key进行排序。为了确定Key的排序算法，可以使用两种方式指定：</p>
<ul>
<li>在TreeMap的构造函数中注入一个Comparator：</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="constructor">TreeMap(Comparator&lt;? <span class="params">super</span> K&gt; <span class="params">comparator</span>)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用一个实现了 Comparable 接口的 Key。</li>
</ul>
<p>TreeMap的内部实现是基于红黑树的。红黑树是一种平衡查找树，这里不做过多介绍。</p>
<p>TreeMap 其它排序接口如下：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">subMap(K fromKey, K toKey) </span><br><span class="line">          返回此映射的部分视图，其键值的范围从 fromKey（包括）到 toKey（不包括）。</span><br><span class="line"></span><br><span class="line">tailMap(K fromKey) </span><br><span class="line">          返回此映射的部分视图，其键大于等于 fromKey。</span><br><span class="line"></span><br><span class="line">firstKey() </span><br><span class="line">          返回此映射中当前第一个（最低）键。</span><br><span class="line"></span><br><span class="line">headMap(K toKey) </span><br><span class="line">          返回此映射的部分视图，其键值严格小于 toKey。</span><br><span class="line"></span><br><span class="line">一个简单示例如下：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyKey</span> <span class="title">implements</span> <span class="title">Comparable</span>&lt;MyKey&gt; &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyKey</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(MyKey o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o.id &lt; <span class="keyword">this</span>.id)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (o.id &gt; <span class="keyword">this</span>.id)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        MyKey myKey1 = <span class="keyword">new</span> MyKey(<span class="number">1</span>);</span><br><span class="line">        MyKey myKey2 = <span class="keyword">new</span> MyKey(<span class="number">2</span>);</span><br><span class="line">        MyKey myKey3 = <span class="keyword">new</span> MyKey(<span class="number">3</span>);</span><br><span class="line">        Map&lt;MyKey,Object&gt; <span class="built_in">map</span> = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(myKey1,<span class="string">"一号"</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(myKey3,<span class="string">"三号"</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(myKey2,<span class="string">"二号"</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;MyKey&gt; iterator = <span class="built_in">map</span>.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(iterator.next()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h1><p>Set并没有在Collection接口之上增加额外的操作，Set集合中的元素是不能重复的。<br>其中最为重要的是HashSet、LinkedHashSet、TreeSet 的实现。这里不再一一赘述，因为所有的这些Set实现都只是对应的Map的一种封装而已。</p>
<h1 id="优化集合访问代码"><a href="#优化集合访问代码" class="headerlink" title="优化集合访问代码"></a>优化集合访问代码</h1><h2 id="分离循环中被重复调用的代码"><a href="#分离循环中被重复调用的代码" class="headerlink" title="分离循环中被重复调用的代码"></a>分离循环中被重复调用的代码</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">举个例子，当我们要使用<span class="keyword">for</span>循环遍历集合时</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;collection.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">&#125;</span><br><span class="line">很明显，每次循环都会调用<span class="built_in">size</span>()方法，并且每次都会返回相同的数值。分离所有类似的代码对提升循环性能有着积极地意义。因此，可以将上段代码改造成</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">size</span>= collection.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">&#125;</span><br><span class="line">当元素的数量越多时，这样的处理就越有意义。</span><br></pre></td></tr></table></figure>

<h2 id="省略相同的操作"><a href="#省略相同的操作" class="headerlink" title="省略相同的操作"></a>省略相同的操作</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">假设我们有一段类似的操作如下</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">size</span>= collection.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span>.<span class="built_in">get</span>(i)==<span class="number">1</span>||<span class="built_in">list</span>.<span class="built_in">get</span>(i)==<span class="number">2</span>||<span class="built_in">list</span>.<span class="built_in">get</span>(i)==<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">虽然每次循环调用<span class="built_in">get</span>(i)的返回值不同，但在同一次调用中，结果是相同的，因此可以提取这些相同的操作。</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">size</span>= collection.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> ((k = <span class="built_in">list</span>.<span class="built_in">get</span>(i))==<span class="number">1</span>||k==<span class="number">2</span>||k==<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="减少方法调用"><a href="#减少方法调用" class="headerlink" title="减少方法调用"></a>减少方法调用</h2><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">方法调用是需要消耗系统堆栈的，如果可以，则尽量访问内部元素，而不要调用对应的接口，函数调用是需要消耗系统资源的，直接访问元素会更高效。</span><br><span class="line">假设上面的代码是Vector.class的子类的部分代码，那么可以这么改写</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">size</span> = <span class="keyword">this</span>.elementCount;</span><br><span class="line"><span class="keyword">Object</span> k=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i =<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> ((k = elementData[i])==<span class="string">"1"</span>||k==<span class="string">"2"</span>||k==<span class="string">"3"</span>)&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">可以看到，原本的 <span class="built_in">size</span>() 和 <span class="built_in">get</span>() 方法被直接替代为访问原始变量，这对系统性能的提升是非常有用的。</span><br></pre></td></tr></table></figure>

<h1 id="RandomAccess接口"><a href="#RandomAccess接口" class="headerlink" title="RandomAccess接口"></a>RandomAccess接口</h1><p>RandomAccess接口是一个标志接口，本身并没有提供任何方法，任何实现RandomAccess接口的对象都可以认为是支持快速随机访问的对象。此接口的主要目的是标识那些可以支持快速随机访问的List实现。</p>
<p>在JDK中，任何一个基于数组的List实现都实现了RandomAccess接口，而基于链表的实现则没有。这很好理解，只有数组能够快速随机访问，（比如：通过 object[5]，object[6]可以直接查找并返回对象），而对链表的随机访问需要进行链表的遍历。</p>
<p>在实际操作中，可以根据list instanceof RandomAccess来判断对象是否实现 RandomAccess接口，从而选择是使用随机访问还是iterator迭代器进行访问。</p>
<p>在应用程序中，如果需要通过索引下标对 List 做随机访问，尽量不要使用 LinkedList，ArrayList和Vector都是不错的选择。</p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery-a标签</title>
    <url>/2019/04/06/JQuery-20190406/</url>
    <content><![CDATA[<a id="more"></a>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">拦截元素发生默认的行为</span><br><span class="line"><span class="function"><span class="title">preventDefault</span><span class="params">()</span></span> </span><br><span class="line"></span><br><span class="line">阻止冒泡事件</span><br><span class="line"><span class="function"><span class="title">stopPropagation</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql基础</title>
    <url>/2019/04/06/Mysql%E5%9F%BA%E7%A1%80-20190406/</url>
    <content><![CDATA[<p>远程连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'密码'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure>
<p>初始化密码</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ALTER<span class="built_in"> USER </span><span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'密码'</span>;</span><br></pre></td></tr></table></figure>

<p>更改表中字段字符集</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表<span class="built_in"> DEFAULT </span>CHARACTER <span class="builtin-name">SET</span> utf8;</span><br></pre></td></tr></table></figure>

<p>查看字符集</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表 ;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Table适应手机端</title>
    <url>/2019/04/05/Table%E9%80%82%E5%BA%94%E6%89%8B%E6%9C%BA%E7%AB%AF-20190405/</url>
    <content><![CDATA[<p>表格字段一多，在手机上就无法直视了</p>
<p>所以想着把表格转成ul</p>
<p>这段代码取之网络</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.fn.setTable = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> el=<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.start=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(el).find(<span class="string">"ul"</span>).remove();</span><br><span class="line">        $(el).map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> list = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">var</span> name = [];</span><br><span class="line">            <span class="keyword">if</span> ($(<span class="keyword">this</span>).find(<span class="string">"th"</span>).length == <span class="number">0</span>) &#123;</span><br><span class="line">                name = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="keyword">this</span>).find(<span class="string">"th"</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    name.push($(<span class="keyword">this</span>).html());</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            $(<span class="keyword">this</span>).find(<span class="string">"tbody tr"</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> ul = <span class="string">'&lt;ul&gt;'</span>;</span><br><span class="line">                $(<span class="keyword">this</span>).find(<span class="string">"td"</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params">index, item</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(name) &#123;</span><br><span class="line">                        ul += <span class="string">'&lt;li&gt;'</span> + name[index] + <span class="string">":&amp;nbsp;"</span> + $(<span class="keyword">this</span>).html() + <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        ul += <span class="string">'&lt;li&gt;'</span> +<span class="string">"&amp;nbsp;"</span> + $(<span class="keyword">this</span>).html() + <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                ul += <span class="string">'&lt;/ul&gt;'</span>;</span><br><span class="line">                list += ul;</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="keyword">this</span>).find(<span class="string">"table"</span>).hide();</span><br><span class="line">            $(<span class="keyword">this</span>).append(list);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> _this=<span class="keyword">this</span>;</span><br><span class="line">    $(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($(<span class="built_in">window</span>).width()&lt;<span class="number">767</span>)&#123;</span><br><span class="line">           _this.start();</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(el).find(<span class="string">"table"</span>).show();</span><br><span class="line">            $(el).find(<span class="string">"ul"</span>).hide();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span>($(<span class="built_in">window</span>).width()&lt;<span class="number">767</span>)&#123;</span><br><span class="line">        _this.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>调用也简单</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/table2ul.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span> </span><br><span class="line"><span class="javascript">	$(<span class="string">".table-list"</span>).setTable(); </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面是基础源码，这个修改一下应该是可以应付大部分了</p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-8函数式编程2</title>
    <url>/2019/02/03/Java-8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B2-20190203/</url>
    <content><![CDATA[<blockquote>
<p>前言</p>
<p>Java 8 Lambdas，Richard Warburton 著（O’Reilly，2014）。版权所有， 978-1-449-37077-0</p>
<ul>
<li>如何编写出简单、干净、易读的代码 —— 尤其是对于集合的操作？</li>
<li>如何简单地使用并行计算提高性能？</li>
<li>如何准确地为问题建模，并且开发出更好的领域特定语言？</li>
<li>如何写出不易出错，并且更简单的并发代码？</li>
<li>如何测试和调试 Lambda 表达式？</li>
</ul>
<p>将<strong>Lambda 表达式</strong>加入 Java，并不只是为了提高开发人员的生产效率，业界也对这一特性有根本性的需求。</p>
</blockquote>
<h1 id="流"><a href="#流" class="headerlink" title="流"></a>流</h1><p>Java 8 中新增的特性旨在帮助程序员写出更好的代码，其中对核心类库的改进是很关键的一部分。</p>
<p>对核心类库的改进主要包括集合类的 API 和新引入的流（Stream）。</p>
<p>流使程序员得以站在更高的抽象层次上对集合进行操作。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul>
<li>Artist : 创作音乐的个人或团队<ul>
<li>name ：艺术家的名字</li>
<li>members ：乐队成员</li>
<li>origin ：乐队来自哪里</li>
<li>Track : 专辑中的一支曲目<ul>
<li>name : 曲目名称</li>
</ul>
</li>
<li>Album ： 专辑，若干曲目组成<ul>
<li>name ：专辑名</li>
<li>tracks ： 专辑上所有曲目的列表</li>
<li>musicians ：参与创作本专辑的艺术家列表 </li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="从外部迭代到内部迭代"><a href="#从外部迭代到内部迭代" class="headerlink" title="从外部迭代到内部迭代"></a>从外部迭代到内部迭代</h2><p>Java 程序员在使用集合类时，一个通用的模式是在集合上进行迭代，然后处理返回的每一个元素。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">使用 <span class="keyword">for</span> 循环计算来自伦敦的艺术家人数</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> count = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span> (Artist artist : allArtists) &#123; </span><br><span class="line">    <span class="keyword">if</span> (artist.isFrom(<span class="string">"London"</span>)) &#123; </span><br><span class="line">        count++; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">尽管这样的操作可行，但存在几个问题</span><br><span class="line"><span class="number">1.</span>每次迭代集合类时，都需要写很多样板代码。</span><br><span class="line"><span class="number">2.</span>将<span class="keyword">for</span> 循环改造成并行方式运行也很麻烦，需要修改每个 <span class="keyword">for</span> 循环才能实现。</span><br><span class="line"><span class="number">3.</span>上述代码无法流畅传达程序员的意图。</span><br><span class="line">	<span class="keyword">for</span> 循环的样板代码模糊了代码的本意，程序员必须阅读整个循环体才能理解。</span><br><span class="line">	若是单一的 <span class="keyword">for</span> 循环，倒也问题不大，但面对一个满是循环（尤其是嵌套循环）的庞大代码库时，负担就重了。</span><br></pre></td></tr></table></figure>

<p>for 循环其实是一个封装了迭代的语法糖，看看它的工作原理。</p>
<p>首先调用 iterator 方法，产生一个新的 Iterator 对象，进而控制整个迭代过程，这就是<strong>外部迭代</strong>。</p>
<p>迭代过程通过显式调用 Iterator 对象的 hasNext 和 next 方法完成迭代。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">使用迭代器计算来自伦敦的艺术家人数</span><br><span class="line"></span><br><span class="line">int <span class="built_in">count</span> = <span class="number">0</span><span class="comment">; </span></span><br><span class="line">Iterator&lt;Artist&gt; iterator = allArtists.iterator()<span class="comment">; </span></span><br><span class="line">while(iterator.hasNext()) &#123; </span><br><span class="line">    Artist artist = iterator.next()<span class="comment">; </span></span><br><span class="line">    if (artist.isFrom(<span class="string">"London"</span>)) &#123; </span><br><span class="line">        <span class="built_in">count</span>++<span class="comment">; </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>内部迭代</strong></p>
<p>首先要注意 stream() 方法的调用，它和调用 iterator() 的作用一样。</p>
<p>该方法不是返回一个控制迭代的 Iterator 对象，而是返回内部迭代中的相应接口：Stream。</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">使用内部迭代计算来自伦敦的艺术家人数</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">count</span> = allArtists.stream()</span><br><span class="line">			.filter(artist -&gt; artist.isFrom(<span class="string">"London"</span>))</span><br><span class="line">			.<span class="keyword">count</span>();</span><br><span class="line"></span><br><span class="line">被分解为两步更简单的操作：</span><br><span class="line">	找出所有来自伦敦的艺术家</span><br><span class="line">	计算他们的人数</span><br></pre></td></tr></table></figure>

<p>每种操作都对应 Stream 接口的一个方法。<br>为了找出来自伦敦的艺术家，需要对 Stream 对象进行过滤：filter。过滤在这里是指“只保留通过某项测试的对象”。<br>测试由一个函数完成，根据艺术家是否来自伦敦，该函数返回 true 或者 false。<br>由于 Stream API 的函数式编程风格，我们并没有改变集合的内容，而是描述出 Stream 里的内容。<br>count() 方法计算给定 Stream 里包含多少个对象。</p>
<blockquote>
<p>Stream 是用函数式编程方式在集合类上进行复杂操作的工具。</p>
</blockquote>
<h2 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h2><p>整个过程被分解为两种更简单的操作：过滤和计数，看似有化简为繁之嫌<br>但 迭代只有一个for循环 ，两种操作是否以为着需要两次循环？ 答案并不是，只需要对列表迭代一次。</p>
<p>通常，在Java中调用一个方法，计算机会随机执行操作：比如，System.out.println(“Hello World”);会在终端上输出一条信息。<br>Streatm里的一些方法却略有不同，他们虽是普通Java方法，但返回的Stream对象却不是一个新集合，而是<strong>创建新集合的配方</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">只过滤，不计数</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">allArtists</span><span class="selector-class">.stream</span>()<span class="selector-class">.filter</span>(<span class="selector-tag">artist</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">artist</span><span class="selector-class">.isFrom</span>("<span class="selector-tag">London</span>"));</span><br></pre></td></tr></table></figure>

<p>这行代码并未做什么实际性的工作，filter 只刻画出了 Stream，但没有产生新的集合。<br>像filter 这样只描述 Stream，最终不产生新集合的方法叫<strong>作惰性求值方法</strong>；<br>而像 count 这样最终会从 Stream 产生值的方法叫作<strong>及早求值方法</strong>。</p>
<p>在过滤器中加入一条 println 语句，来输出艺术家的名字，就能轻而易举地看出其中的不同。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">由于使用了惰性求值，没有输出艺术家的名字</span><br><span class="line"></span><br><span class="line">allArtists.stream() </span><br><span class="line">          .<span class="keyword">filter</span>(artist -&gt; &#123; </span><br><span class="line">              <span class="keyword">System</span>.<span class="keyword">out</span>.println(artist.getName()); </span><br><span class="line">              <span class="keyword">return</span> artist.isFrom("London"); </span><br><span class="line">           &#125;);</span><br><span class="line"></span><br><span class="line">运行这段代码，程序不会输出任何信息！</span><br></pre></td></tr></table></figure>

<p>如果将同样的输出语句加入一个拥有终止操作的流,艺术家的名字就会被输出。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">count</span> = allArtists.stream() </span><br><span class="line">                       .filter(artist -&gt; &#123; </span><br><span class="line">                           System.out.<span class="keyword">println</span>(artist.getName()); </span><br><span class="line">                           <span class="keyword">return</span> artist.isFrom(<span class="string">"London"</span>); </span><br><span class="line">                       &#125;) </span><br><span class="line">                       .<span class="keyword">count</span>();</span><br></pre></td></tr></table></figure>

<p>判断一个操作是惰性求值还是及早求值很简单：只需看它的返回值。<br>如果返回值是 Stream，那么是惰性求值；如果返回值是另一个值或为空，那么就是及早求值。<br>使用这些操作的理想方式就是形成一个惰性求值的链，最后用一个及早求值的操作返回想要的结果，这正是它的合理之处。</p>
<h2 id="常用的流操作"><a href="#常用的流操作" class="headerlink" title="常用的流操作"></a>常用的流操作</h2><p>为了更好地理解 Stream API，掌握一些常用的 Stream 操作十分必要。除此处讲述的几种重要操作之外，该 API 的 Javadoc 中还有更多信息。</p>
<h3 id="collect-toList"><a href="#collect-toList" class="headerlink" title="collect(toList())"></a>collect(toList())</h3><blockquote>
<p>collect(toList()) 方法由 Stream 里的值生成一个列表，是一个及早求值操作。</p>
</blockquote>
<p>Stream 的 of 方法使用一组初始值生成新的 Stream。<br>事实上，collect 的用法不仅限于此，它是一个非常通用的强大结构。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; collected = <span class="module-access"><span class="module"><span class="identifier">Stream</span>.</span></span><span class="keyword">of</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</span><br><span class="line">                               .collect(<span class="module-access"><span class="module"><span class="identifier">Collectors</span>.</span></span><span class="keyword">to</span><span class="constructor">List()</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这段程序展示了如何使用 collect(<span class="keyword">to</span><span class="constructor">List()</span>) 方法从 Stream 中生成一个列表。</span><br><span class="line">由于很多 Stream 操作都是惰性求值，因此调用 Stream 上一系列方法之后，还需要最后再调用一个类似 collect 的及早求值方法。</span><br></pre></td></tr></table></figure>



<blockquote>
<p>愿你前程似锦再无波澜。</p>
</blockquote>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-8函数式编程1</title>
    <url>/2019/02/01/Java-8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B1-20190201/</url>
    <content><![CDATA[<blockquote>
<p>前言</p>
<p>Java 8 Lambdas，Richard Warburton 著（O’Reilly，2014）。版权所有， 978-1-449-37077-0</p>
<ul>
<li>如何编写出简单、干净、易读的代码 —— 尤其是对于集合的操作？</li>
<li>如何简单地使用并行计算提高性能？</li>
<li>如何准确地为问题建模，并且开发出更好的领域特定语言？</li>
<li>如何写出不易出错，并且更简单的并发代码？</li>
<li>如何测试和调试 Lambda 表达式？</li>
</ul>
<p>将<strong>Lambda 表达式</strong>加入 Java，并不只是为了提高开发人员的生产效率，业界也对这一特性有根本性的需求。</p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在开始探索 Lambda 表达式之前，首先我们要知道它因何而生。</p>
<h2 id="为什么需要再次修改Java"><a href="#为什么需要再次修改Java" class="headerlink" title="为什么需要再次修改Java"></a>为什么需要再次修改Java</h2><p>Java还欠缺高效的并行操作</p>
<p>面向对象编程是对数据进行抽象，函数式编程是对行为进行抽象</p>
<h2 id="什么是函数式编程"><a href="#什么是函数式编程" class="headerlink" title="什么是函数式编程"></a>什么是函数式编程</h2><p>在思考问题时，使用不可变值和函数，函数对一个值进行处理，映射成另一个值</p>
<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>Java 8 的最大变化是引入了 Lambda 表达式</p>
<h2 id="第一个Lambda表达式"><a href="#第一个Lambda表达式" class="headerlink" title="第一个Lambda表达式"></a>第一个Lambda表达式</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">button.add<span class="constructor">ActionListener(<span class="params">new</span> ActionListener()</span> &#123; </span><br><span class="line">    public void action<span class="constructor">Performed(ActionEvent <span class="params">event</span>)</span> &#123; </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"button clicked"</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">==</span><br><span class="line"></span><br><span class="line">button.add<span class="constructor">ActionListener(<span class="params">event</span> -&gt; System.<span class="params">out</span>.<span class="params">println</span>(<span class="string">"button clicked"</span>)</span>);</span><br></pre></td></tr></table></figure>

<p>和传入一个实现某接口的对象不同，我们传入了一段代码块——一个没有名字的函数。event 是参数名，和上面匿名内部类示例中的是同一个参数。-&gt; 将参数和 Lambda 表达式的主体分开，而主体是用户点击按钮时会运行的一些代码。</p>
<p>和使用匿名内部类的另一处不同在于声明 event 参数的方式。使用匿名内部类时需要显式地声明参数类型 ActionEvent  event，而在 Lambda 表达式中无需指定类型，程序依然可以编译。这是因为 javac 根据程序的上下文（addActionListener 方法的签名）在后台推断出了参数 event 的类型。这意味着如果参数类型不言而明，则无需显式指定。</p>
<blockquote>
<p>尽管与之前相比，Lambda 表达式中的参数需要的样板代码很少，但是 Java 8仍然是一种静态类型语言。为了增加可读性并迁就我们的习惯，声明参数时也可以包括类型信息，而且有时编译器不一定能根据上下文推断出参数的类型！</p>
</blockquote>
<h2 id="如何辨别Lambda表达式"><a href="#如何辨别Lambda表达式" class="headerlink" title="如何辨别Lambda表达式"></a>如何辨别Lambda表达式</h2><p>编写 Lambda 表达式的不同形式</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">Runnable <span class="function"><span class="title">noArguments</span> = <span class="params">()</span> -&gt;</span> System.out.println(<span class="string">"Hello World"</span>); </span><br><span class="line"></span><br><span class="line">Lambda 表达式不包含参数，使用空括号 () 表示没有参数。</span><br><span class="line">该 Lambda 表达式实现了 Runnable 接口，该接口也只有一个 run 方法，没有参数，且返回类型为 <span class="literal">void</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">ActionListener oneArgument = <span class="keyword">event</span> -&gt; System.<span class="keyword">out</span>.println(<span class="string">"button clicked"</span>);</span><br><span class="line"> </span><br><span class="line">Lambda 表达式包含且只包含一个参数，可省略参数的括号。</span><br></pre></td></tr></table></figure>

<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">Runnable multiStatement = <span class="function"><span class="params">()</span> -&gt;</span> &#123;</span><br><span class="line">	System.out.<span class="built_in">print</span>(<span class="string">"Hello"</span>); </span><br><span class="line">	System.out.println(<span class="string">" World"</span>); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Lambda 表达式的主体不仅可以是一个表达式，而且也可以是一段代码块，使用大括号（&#123;&#125;）将代码块括起来。</span><br><span class="line">该代码块和普通方法遵循的规则别无二致，可以用返回或抛出异常来退出。</span><br><span class="line">只有一行代码的 Lambda 表达式也可使用大括号，用以明确 Lambda表达式从何处开始、到哪里结束。</span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">BinaryOperator&lt;Long&gt; <span class="keyword">add</span><span class="bash"> = (x, y) -&gt; x + y;</span></span><br><span class="line"></span><br><span class="line">Lambda 表达式也可以表示包含多个参数的方法。</span><br><span class="line">这时就有必要思考怎样去阅读该 Lambda 表达式。</span><br><span class="line">这行代码并不是将两个数字相加，而是创建了一个函数，用来计算两个数字相加的结果。</span><br><span class="line">变量 <span class="keyword">add</span><span class="bash"> 的类型是 BinaryOperator&lt;Long&gt;，它不是两个数字的和，而是将两个数字相加的那行代码。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">BinaryOperator&lt;Long&gt; addExplicit = (Long <span class="symbol">x</span>, Long <span class="symbol">y</span>) -&gt; <span class="symbol">x</span> + <span class="symbol">y</span>; </span><br><span class="line"></span><br><span class="line">显式声明参数类型</span><br></pre></td></tr></table></figure>

<blockquote>
<p>目标类型是指 Lambda 表达式所在上下文环境的类型。<br>比如，将 Lambda 表达式赋值给一个局部变量，或传递给一个方法作为参数，局部变量或方法参数的类型就是 Lambda 表达式的目标类型。</p>
</blockquote>
<p>Lambda 表达式的类型依赖于上下文环境，是由编译器推断出来的。</p>
<p>Java 中初始化数组时，数组的类型就是根据上下文推断出来的。另一个常见的例子是 null，只有将 null 赋值给一个变量，才能知道它的类型。</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">final String[]<span class="built_in"> array </span>= &#123; <span class="string">"hello"</span>, <span class="string">"world"</span> &#125;;</span><br><span class="line">等号右边的代码并没有声明类型，系统根据上下文推断出类型信息</span><br></pre></td></tr></table></figure>

<h2 id="引用值，而不是变量"><a href="#引用值，而不是变量" class="headerlink" title="引用值，而不是变量"></a>引用值，而不是变量</h2><p>需要引用它所在方法里的变量。这时，需要将变量声明为 final</p>
<p>将变量声明为 final，意味着不能为其重复赋值。同时也意味着在使用 final 变量时，实际上是在使用赋给该变量的一个特定的值。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">匿名内部类中使用 <span class="keyword">final</span> 局部变量</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">String</span> name = getUserName(); </span><br><span class="line">button.addActionListener(<span class="keyword">new</span> ActionListener() &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> actionPerformed(ActionEvent event) &#123; </span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"hi "</span> + name); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Java 8 虽然放松了这一限制，可以引用非 final 变量，但是该变量在既成事实上必须是final。</p>
<p>虽然无需将变量声明为 final，但在 Lambda 表达式中，也无法用作非终态变量。</p>
<p>如果坚持用作非终态变量，编译器就会报错。</p>
<p>既成事实上的 final 是指只能给该变量赋值一次。</p>
<p>换句话说，Lambda 表达式引用的是值，而不是变量。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Lambda 表达式中引用既成事实上的 final 变量</span><br><span class="line">name 就是一个既成事实上的 final 变量</span><br><span class="line"></span><br><span class="line">String name = get<span class="constructor">UserName()</span>; </span><br><span class="line">button.add<span class="constructor">ActionListener(<span class="params">event</span> -&gt; System.<span class="params">out</span>.<span class="params">println</span>(<span class="string">"hi "</span> + <span class="params">name</span>)</span>);</span><br></pre></td></tr></table></figure>

<p>final 就像代码中的线路噪声，省去之后代码更易读。</p>
<p>当然，有些情况下，显式地使用 final代码更易懂。</p>
<p>是否使用这种既成事实上的 final 变量，完全取决于个人喜好。</p>
<p>如果你试图给该变量多次赋值，然后在 Lambda 表达式中引用它，编译器就会报错。</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">未使用既成事实上的 <span class="keyword">final</span> 变量，导致无法通过编译（ Lambda 表达式中引用的局部变量必须是 <span class="keyword">final</span> 或既成事实上的 <span class="keyword">final</span> 变量）</span><br><span class="line"></span><br><span class="line">String <span class="keyword">name</span> = getUserName(); </span><br><span class="line"><span class="keyword">name</span> = formatUserName(<span class="keyword">name</span>); </span><br><span class="line">button.addActionListener(event -&gt; System.<span class="keyword">out</span>.println(<span class="string">"hi "</span> + <span class="keyword">name</span>));</span><br><span class="line"></span><br><span class="line">显示出错信息：local variables referenced from a Lambda expression must be <span class="keyword">final</span> or effectively <span class="keyword">final</span></span><br></pre></td></tr></table></figure>

<h2 id="函数接口"><a href="#函数接口" class="headerlink" title="函数接口"></a>函数接口</h2><blockquote>
<p>函数接口是只有一个抽象方法的接口，用作 Lambda 表达式的类型。</p>
</blockquote>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ActionListener 接口：接受 ActionEvent 类型的参数，返回空</span><br><span class="line"></span><br><span class="line">public<span class="built_in"> interface </span>ActionListener extends EventListener &#123; </span><br><span class="line">    public void actionPerformed(ActionEvent event); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ActionListener 只有一个抽象方法：actionPerformed，被用来表示行为：接受一个参数，返回空。</span><br><span class="line">记住，由于 actionPerformed 定义在一个接口里，因此 abstract 关键字不是必需的。</span><br><span class="line">该接口也继承自一个不具有任何方法的父接口：EventListener。</span><br></pre></td></tr></table></figure>

<p>这就是函数接口，接口中单一方法的命名并不重要，只要方法签名和 Lambda 表达式的类型匹配即可。</p>
<p>可在函数接口中为参数起一个有意义的名字，增加代码易读性，便于更透彻地理解参数的用途。</p>
<p>Java一些重要的函数接口</p>
<table>
<thead>
<tr>
<th align="center">接口</th>
<th align="center">参数</th>
<th align="center">返回类型</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Predicate<T></td>
<td align="center">T</td>
<td align="center">boolean</td>
<td align="center">用来判断真假</td>
</tr>
<tr>
<td align="center">Consumer<T></td>
<td align="center">T</td>
<td align="center">void</td>
<td align="center">输出一个值</td>
</tr>
<tr>
<td align="center">Function&lt;T,R&gt;</td>
<td align="center">T</td>
<td align="center">R</td>
<td align="center">获取Artist对象的名字</td>
</tr>
<tr>
<td align="center">Supplier<T></td>
<td align="center">None</td>
<td align="center">T</td>
<td align="center">工厂方法</td>
</tr>
<tr>
<td align="center">UnaryOperator<T></td>
<td align="center">T</td>
<td align="center">T</td>
<td align="center">逻辑非(!)</td>
</tr>
<tr>
<td align="center">BinaryOperator<T></td>
<td align="center">(T,T)</td>
<td align="center">T</td>
<td align="center">求两个数的乘积(*)</td>
</tr>
</tbody></table>
<h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><p>Lambda 表达式中的类型推断，实际上是 Java 7 就引入的目标类型推断的扩展。</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt; oldWordCounts = <span class="literal">new</span> HashMap&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt;();</span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt; diamondWordCounts = <span class="literal">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure>
<p>javac 根据 Lambda 表达式上下文信息就能推断出参数的正确类型。</p>
<p>程序依然要经过类型检查来保证运行的安全性，但不用再显式声明类型罢了。这就是所谓的类型推断。</p>
<p>用 Lambda 表达式检测一个 Integer 是否大于 5。这实际上是一个 Predicate——用来判断真假的函数接口</p>
<p><code>Predicate&lt;Integer&gt; atLeast5 = x -&gt; x &gt; 5;</code></p>
<p>Predicate 也是一个 Lambda 表达式，和前文中 ActionListener 不同的是，它还返回一个值。</p>
<p>表达式 x  &gt;  5 是 Lambda 表达式的主体。</p>
<p>这样的情况下，返回值就是Lambda 表达式主体的值。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Predicate 接口的源码，接受一个对象，返回一个布尔值</span><br><span class="line"></span><br><span class="line">public<span class="built_in"> interface </span>Predicate&lt;T&gt; &#123; </span><br><span class="line">    boolean test(T t); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Predicate 只有一个泛型类型的参数，Integer 用于其中。</span><br><span class="line">Lambda表达式实现了 Predicate 接口，因此它的单一参数被推断为 Integer 类型。</span><br><span class="line">javac 还可检查Lambda 表达式的返回值是不是 boolean，这正是 Predicate 方法的返回类型。</span><br></pre></td></tr></table></figure>

<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">略显复杂的类型推断</span><br><span class="line"></span><br><span class="line">BinaryOperator&lt;Long&gt; addLongs = (<span class="symbol">x</span>, <span class="symbol">y</span>) -&gt; <span class="symbol">x</span> + <span class="symbol">y</span>;</span><br><span class="line"></span><br><span class="line">一个略显复杂的函数接口：BinaryOperator。</span><br><span class="line">该接口接受两个参数，返回一个值，参数和值的类型均相同。</span><br><span class="line">实例中所用的类型是 Long。</span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">没有泛型，代码则通不过编译</span><br><span class="line"></span><br><span class="line">BinaryOperator <span class="keyword">add</span> = (x, y) -&gt; x + y;</span><br><span class="line"></span><br><span class="line">编译器给出的报错信息如下：</span><br><span class="line"><span class="keyword">Operator</span> <span class="string">'&amp; #x002B;'</span> cannot be applied <span class="keyword">to</span> java.lang.<span class="keyword">Object</span>, java.lang.<span class="keyword">Object</span>.</span><br></pre></td></tr></table></figure>

<p>BinaryOperator 毕竟是一个具有泛型参数的函数接口，该类型既是参数 x 和 y 的类型，也是返回值的类型。<br>上面的例子中并没有给出变量add 的任何泛型信息，给出的正是原始类型的定义。<br>因此，编译器认为参数和返回值都是java.lang.Object 实例。</p>
<h2 id="要点回顾"><a href="#要点回顾" class="headerlink" title="要点回顾"></a>要点回顾</h2><ul>
<li>Lambda 表达式是一个匿名方法，将行为像数据一样进行传递。</li>
<li>Lambda 表达式的常见结构：BinaryOperator<Integer> add = (x, y) → x + y。</li>
<li>函数接口指仅具有单个抽象方法的接口，用来表示 Lambda 表达式的类型。</li>
</ul>
<blockquote>
<p>我双重性格我总熬夜，我慢慢喜欢听老歌，我会莫名的心情不好，我不喜欢悲伤，却无法抑制悲伤。<br>我对陌生人礼貌冷淡，我对老朋友满嘴脏话！<br>我明明还年轻，却总觉得自己老了。</p>
</blockquote>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础回顾3</title>
    <url>/2019/01/28/Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE3-20190128/</url>
    <content><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p>流是有起点和终点的有序字节序列</p>
<p>流的分类</p>
<ul>
<li>输入流/输出流：是当前程序为参照点，程序从外面读取数据这是输入流，把程序的数据保存到外面是输出流</li>
<li>字节流/字符流：如果是以字节为单位处理流中的数据就是字节流，如果是以字符为单位处理流中的数据就是字符流</li>
<li>节点流/处理流：如果直接从设备（数据源）上读写数据就是节点流，处理流是对节点流的包装</li>
</ul>
<p>在程序中从文件里读写数据需要使用IO流.Java定义了相关的流类，在java.io包中，如果这个类是以Stream单词结尾就是流类，如果是以Reader结尾就是字符输入流，以Writer单词结尾就是字符输出流。</p>
<ul>
<li>FileInputStream/FileOutputStream<ul>
<li>以节为单位读写文件内容</li>
</ul>
</li>
<li>FileReader/FileWriter<ul>
<li>FileReader/FileWriter只能读写与当前环境编码兼容的文本文件</li>
</ul>
</li>
<li>InputStreamReader/OutputStreamwriter<ul>
<li>如果文本文件与当前环境编码不兼容，使用InputStreamReader/OutputStreamwriter转换流读写</li>
</ul>
</li>
<li>BufferedReader/Bufferedwriter<ul>
<li>字符缓冲流BufferedReader/Bufferedwriter也是一种处理流，包装流</li>
</ul>
</li>
<li>ObjectinputStream/ObjectOutputStream<ul>
<li>对象序列化：把对象转换为01二进制序列就是对象序列化</li>
<li>对象反序列化：把一组01二进制序列转换为对象</li>
<li>注意：对象序列化/反序列化前提是对象的类要实现Serializable接口，该接口是一个标志性接口，没有任何方法</li>
</ul>
</li>
<li>PrintStream/PrintWriter</li>
<li>File类<ul>
<li>读取文件内容使用IO流，操作文件/文件来使用File类，如创建/遍历/删除文件来，查看文件的相关属性等操作</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">File</th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">getAbsolutePath</td>
<td align="center">返回绝对路径（从根目录开始的路径）</td>
</tr>
<tr>
<td align="center">getPath</td>
<td align="center">返回路径</td>
</tr>
<tr>
<td align="center">getParent</td>
<td align="center">返回上一级文件夹</td>
</tr>
<tr>
<td align="center">getName</td>
<td align="center">对象名</td>
</tr>
<tr>
<td align="center">length</td>
<td align="center">文件大小</td>
</tr>
<tr>
<td align="center">exists</td>
<td align="center">是否存在</td>
</tr>
<tr>
<td align="center">isFile</td>
<td align="center">是否为文件</td>
</tr>
<tr>
<td align="center">isAbsolute</td>
<td align="center">是否绝对路径</td>
</tr>
<tr>
<td align="center">lastModified</td>
<td align="center">最后一次修改的时间</td>
</tr>
</tbody></table>
<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>进程：进程就是操作系统运行的一个程序。</p>
<p>线程：线程就是进程的一个执行单元，一个进程至少有一个线程，如果进程有多个线程，则它就是多线程应用程序。每个线程都有独立的栈空间。</p>
<p>主线程：JVM启动主线程，主线程运行main方法</p>
<p>用户线程：开启的新的线程，也称子线程。</p>
<p>守护线程：守护线程是为其他线程提供服务的线程，不能独立运行，当JVM中只有守护线程时，JVM会退出。（垃圾回收器就是一个守护线程）</p>
<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><ul>
<li><p>继承Thread</p>
</li>
<li><p>实现Runnable接口</p>
</li>
<li><p>实现Callable接口</p>
</li>
</ul>
<h2 id="线程常用操作"><a href="#线程常用操作" class="headerlink" title="线程常用操作"></a>线程常用操作</h2><table>
<thead>
<tr>
<th align="center">Thread</th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">activeCount</td>
<td align="center">当前活动线程的数量</td>
</tr>
<tr>
<td align="center">currentThread</td>
<td align="center">返回当前线程</td>
</tr>
<tr>
<td align="center">getContextClassLoader</td>
<td align="center">线程的上下文类加载器</td>
</tr>
<tr>
<td align="center">getId</td>
<td align="center">返回线程的ID，每个线程都有唯一的id</td>
</tr>
<tr>
<td align="center">getName</td>
<td align="center">返回线程名称</td>
</tr>
<tr>
<td align="center">getPriority</td>
<td align="center">返回线程优先级</td>
</tr>
<tr>
<td align="center">getState</td>
<td align="center">返回线程状态</td>
</tr>
<tr>
<td align="center">interrupt</td>
<td align="center">中断线程</td>
</tr>
<tr>
<td align="center">interrupted</td>
<td align="center">测试线程是否被中断</td>
</tr>
<tr>
<td align="center">isAlive</td>
<td align="center">测试线程是否结束</td>
</tr>
<tr>
<td align="center">isDaemon</td>
<td align="center">是否守护线程</td>
</tr>
<tr>
<td align="center">isInterrupted</td>
<td align="center">测试线程是否被中断</td>
</tr>
<tr>
<td align="center">join</td>
<td align="center">合并线程（加入）</td>
</tr>
<tr>
<td align="center">run</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">setDaemon</td>
<td align="center">设置线程为守护线程</td>
</tr>
<tr>
<td align="center">setName</td>
<td align="center">设置线程名称</td>
</tr>
<tr>
<td align="center">setPriority</td>
<td align="center">设置优先级</td>
</tr>
<tr>
<td align="center">sleep</td>
<td align="center">线程休眠</td>
</tr>
<tr>
<td align="center">start</td>
<td align="center">开启线程</td>
</tr>
<tr>
<td align="center">stop</td>
<td align="center">终止线程</td>
</tr>
<tr>
<td align="center">toString</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">yield</td>
<td align="center">线程让步</td>
</tr>
</tbody></table>
<h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p><img src="Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE3-20190128/1.png" alt=""></p>
<p>线程优先级</p>
<ul>
<li>每个线程都有一个优先级，取值范围：1~10</li>
<li>所有线程默认的优先级为：5</li>
<li>优先级越高，获得CPU执行权的记录越大</li>
</ul>
<p>线程休眠（Thread.sleep(2000)）</p>
<ul>
<li>静态方法，通过类名直接调用</li>
<li>睡眠的单位是毫秒</li>
<li>sleep()有受检异常需要预处理</li>
<li>sleep()方法所在的线程睡眠</li>
</ul>
<p>线程中断（t1.interrupt()）</p>
<ul>
<li>一般情况下，是把处于睡眠/等待中的线程给中断</li>
</ul>
<p>线程让步（Thread.yield()）</p>
<ul>
<li>把线程转换为就绪状态，重新争抢CPU执行权</li>
</ul>
<p>线程加入（合并，t1.join()）</p>
<p>终止线程</p>
<ul>
<li>想办法让run()</li>
<li>在线程中设置一个标志，定期判断这个标志是否发生变化，标志发生变化就退出run()方法</li>
</ul>
<h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><ul>
<li>线程安全问题。<ul>
<li>当多个线程同时操作堆区或者方法区的某个数据时，可能会出现数据不一致的现象，称为线程安全问题。</li>
</ul>
</li>
<li>出现线程安全问题怎么办？<ul>
<li>每个线程都访问自己的局部变量。</li>
<li>如果多个线程必须同时操作实例变量/静态变量时，可以采用线程同步技术</li>
</ul>
</li>
<li>线程同步技术解决什么问题？<ul>
<li>当一个线程在操作期间，不允许其他的线程加入。</li>
<li>某一段代码在某一时刻只能由一个线程执行</li>
</ul>
</li>
</ul>
<p>同步</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">synchronized（锁对象）&#123;</span><br><span class="line">	同步代码块</span><br><span class="line">&#125;</span><br><span class="line">工作原理：</span><br><span class="line">	<span class="number">1</span>）任意对象都可以作为锁对象，每个对象有一个内置锁</span><br><span class="line">	<span class="number">2</span>）某一时刻，锁对象最多只能被一个线程持有。</span><br><span class="line">	<span class="number">3</span>）如果线程获得了锁对象后，会一直持有，直到执行完同步代码块后才释放</span><br><span class="line">	<span class="number">4</span>）线程要执行同步代码块，必须先获得锁对象。</span><br><span class="line">场景描述：假设有线程A和线程B两个线程都想要执行同步代码块。</span><br><span class="line">	<span class="number">1</span>）线程A获得CPU执行权，获得了锁对象后，开始执行同步代码块</span><br><span class="line">	<span class="number">2</span>）线程A在执行同步代码块期间，CPU执行权被线程B抢走了，线程A转为就绪状态</span><br><span class="line">	<span class="number">3</span>）线程B获得CPU执行权，也想要执行同步代码块，必须先获得锁对象，现在锁对象被线程A持有，线程B转到等待锁对象池中进行阻塞</span><br><span class="line">	<span class="number">4</span>）线程A重新获得CPU执行权，执行完同步代码块后释放锁对象。</span><br><span class="line">	<span class="number">5</span>）等待锁对象池中的线程B获得了锁对象，转为就绪状态。</span><br></pre></td></tr></table></figure>

<p>死锁</p>
<p>当多个线程同步时，获得锁的顺序不一致，导致线程相互等待的情况，称为死锁现象</p>
<p>如何避免</p>
<p>保证锁的顺序都一直</p>
<p><img src="Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE3-20190128/2.png" alt=""></p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础回顾2</title>
    <url>/2019/01/26/Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE2-20190126/</url>
    <content><![CDATA[<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><p>Object类是Java中所有类的根父类，Java中的类要么直接继承Object，要么间接继承Object类</p>
<p>Java中类的继承是可传递的，Object类中定义的方法，所有的类都能继承到</p>
<table>
<thead>
<tr>
<th align="center">Object</th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">clone</td>
<td align="center">对象克隆</td>
</tr>
<tr>
<td align="center">equals</td>
<td align="center">用于判断两个对象的内容是否一样</td>
</tr>
<tr>
<td align="center">finalize</td>
<td align="center">当对象被垃圾回收器回收时，会执行对象的finalize()方法，但是垃圾回收器在什么时候回收这个对象不确定，即这个方法的执行时间不确定，一般不用</td>
</tr>
<tr>
<td align="center">getClass</td>
<td align="center">返回对象的运行时类对象，可以简单的理解为返回对象的类的字节码文件</td>
</tr>
<tr>
<td align="center">hashCode</td>
<td align="center">返回对象的哈希码</td>
</tr>
<tr>
<td align="center">notify</td>
<td align="center">在线程中用于唤醒等待中的线程</td>
</tr>
<tr>
<td align="center">notifyAll</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">toString</td>
<td align="center">把对象转换为字符串</td>
</tr>
<tr>
<td align="center">wait</td>
<td align="center">在多线程中，让线程等待</td>
</tr>
</tbody></table>
<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><p>Collection存储数据时是单个存储的，只能存储引用类型数据</p>
<p><code>add(),remove(),contains(),iterator()</code></p>
<ul>
<li>list集合<ul>
<li>有序，可重复</li>
<li>为每个元素指定了一个索引值</li>
<li>add(index,0),remove(index),get(index),sort(Comparator)</li>
<li>ArrayList</li>
<li>Vector<ul>
<li>底层是数组，访问快，添加/删除慢</li>
<li>初始化容量：10</li>
<li>扩容：ArrayList是1.5倍，Vector是2倍</li>
<li>Vector是线程安全的，ArrayList不是线程安全的</li>
</ul>
</li>
<li>LinkedList<ul>
<li>底层是双向链表，添加/删除效率高，访问慢</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>ArrayList应用于以查询访问为主，很少进行添加/删除操作<br>LinkedList应用于频繁的进行添加/删除操作的情况</p>
<ul>
<li>Set集合<ul>
<li>无序，不可重复</li>
<li>HashSet<ul>
<li>底层是HashMap</li>
<li>HashSet就是HashMap键的集合</li>
</ul>
</li>
<li>TreeSet<ul>
<li>底层是TreeMap</li>
<li>TreeSet就是TreeMap键的集合</li>
<li>TreeSet实现了SortedSet接口，可以对元素自然排序，要求元素必须是可比较的<ul>
<li>创建TreeSet时指定Comparator比较器</li>
<li>如果没有指定Comparator比较器，元素类需要实现Comparable接口</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>List集合与HashSet集合中判断是否同一个元素，需要调用对象的equals()方法，元素的类需要重写equals()方法</p>
<p>TreeSet集合判断是否同一个元素，根据Comparator/Comparable的比较结果是否为0判断，如果比较结果为0就认为是同一个元素</p>
<p><img src="Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE2-20190126/1.png" alt=""></p>
<h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><ul>
<li>HashSet底层是HashMap<ul>
<li>向HashSet中添加元素，实际上是把元素作为键添加到底层的HashMap中</li>
<li>HashSet就是HashMap键的集合</li>
</ul>
</li>
</ul>
<h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><ul>
<li>TreeSet实现了SortedSet接口，可以对元素自然排序，要求集合中的元素必须是可比较的<ul>
<li>在创建TreeSet时，可以指定Comparator比较器</li>
<li>没有指定Comparator比较器，要求元素的类实现Comparable接口</li>
</ul>
</li>
<li>TreeSet底层是TreeMap<ul>
<li>向TreeSett中添加元素，实际上是把元素作为键添加到底层的TreeMap中</li>
<li>TreeSet就是TreeMap键的集合</li>
</ul>
</li>
</ul>
<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>Map是按&lt;键,值&gt;对的形式存储数据的</p>
<p><img src="Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE2-20190126/2.png" alt=""></p>
<table>
<thead>
<tr>
<th align="center">Map</th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">clear</td>
<td align="center">清除所有的&lt;键,值&gt;对</td>
</tr>
<tr>
<td align="center">containsKey</td>
<td align="center">判断是否包含指定的键</td>
</tr>
<tr>
<td align="center">containsValue</td>
<td align="center">判断是否包含指定的值</td>
</tr>
<tr>
<td align="center">entrySet</td>
<td align="center">返回Entry的集合，一个&lt;键,值&gt;对就是一个entry</td>
</tr>
<tr>
<td align="center">equals</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">get</td>
<td align="center">返回Key对应的值</td>
</tr>
<tr>
<td align="center">isEmpty</td>
<td align="center">判断是否为空</td>
</tr>
<tr>
<td align="center">ketSet</td>
<td align="center">返回键的集合</td>
</tr>
<tr>
<td align="center">put</td>
<td align="center">向Map中添加&lt;键,值&gt;对，如果这个键Key已存在，使用value替换原来的值，Map中的键是不重复的</td>
</tr>
<tr>
<td align="center">putAll</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">remove</td>
<td align="center">只要key匹配就删除对应的&lt;键,值&gt;对</td>
</tr>
<tr>
<td align="center">remove</td>
<td align="center">要求&lt;键,值&gt;都匹配才会删除</td>
</tr>
<tr>
<td align="center">replace</td>
<td align="center">替换</td>
</tr>
<tr>
<td align="center">size</td>
<td align="center">返回&lt;键,值&gt;对的数量</td>
</tr>
<tr>
<td align="center">values</td>
<td align="center">返回值的集合</td>
</tr>
</tbody></table>
<p><img src="Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE2-20190126/3.png" alt=""></p>
<h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><ul>
<li>底层都是哈希表（散列表），但是HashTable事线程安全的，HashMap不是线程安全的</li>
<li>HashMap的父类是AbstractMap,HashTable的父类是Dictionary</li>
<li>HashMap默认的初始化容量：16，HashTable默认的初始化容量：11</li>
<li>加载因子：0.75，当&lt;键,值&gt;对的数量大于数组的容量（哈希桶的容量）*加载因子时，数组要扩容</li>
<li>HashMap扩容默认：2倍大小，HashTable扩容默认：2倍+1</li>
<li>HashMap的键与值都可以为null，HashTable的键与值都不可以为null</li>
<li>HashMap在创建时，可以指定一个初始化容量，系统会调整为2的幂次方，为了快速计算出数组的下标</li>
<li>HashTable也可以指定初始化容量，系统不调整</li>
</ul>
<h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ul>
<li>继承了HashTable</li>
<li>他的键与值都是String字符串</li>
<li>常用于设置读取系统属性值</li>
</ul>
<h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><ul>
<li>TreeMap实现了SortedMap，可以根据键自然排序，排序原理是二叉树原理</li>
</ul>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础回顾1</title>
    <url>/2019/01/24/Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE1-20190124/</url>
    <content><![CDATA[<h1 id="Java的加载与执行"><a href="#Java的加载与执行" class="headerlink" title="Java的加载与执行"></a>Java的加载与执行</h1><p><img src="Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE1-20190124/1.png" alt=""></p>
<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><ul>
<li>btye：Java中最小的数据类型，在内存中占8位(bit)，即1个字节，取值范围-128~127，默认值0</li>
<li>short：短整型，在内存中占16位，即2个字节，取值范围-32768~32717，默认值0</li>
<li>int：整型，用于存储整数，在内在中占32位，即4个字节，取值范围-2147483648~2147483647，默认值0</li>
<li>long：长整型，在内存中占64位，即8个字节-2^63~2^63-1，默认值0L</li>
<li>float：浮点型，在内存中占32位，即4个字节，用于存储带小数点的数字（与double的区别在于float类型有效小数点只有6~7位），默认值0</li>
<li>double：双精度浮点型，用于存储带有小数点的数字，在内存中占64位，即8个字节，默认值0</li>
<li>char：字符型，用于存储单个字符，占16位，即2个字节，取值范围0~65535，默认值为空</li>
<li>boolean：布尔类型，占1个字节，用于判断真或假（仅有两个值，即true、false），默认值false</li>
</ul>
<h1 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h1><ul>
<li>\n：表示换一行</li>
<li>\t：表示制表符</li>
<li>\\：表示输出一个\</li>
<li>&quot;:表示输出一个”</li>
<li>&#39;:表示输出一个’</li>
<li>\u0000：表示unicode转义序列符，输出一个空格</li>
</ul>
<h1 id="变量的内存分析"><a href="#变量的内存分析" class="headerlink" title="变量的内存分析"></a>变量的内存分析</h1><ol>
<li>当运行程序时，在内存中JVM会自动分配空间</li>
<li>内存中包含：<ul>
<li>栈：存放方法及方法中的局部变量</li>
<li>堆：存方法对象</li>
<li>方法区：代码片段、常量池（常量池中存放的时字符串的值）、静态属性</li>
</ul>
</li>
<li>基本数据类型内存中存放真正的值、引用数据类型内存中存放地址</li>
</ol>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ol>
<li>算术运算符：+、-、*、/、%、++、–</li>
<li>链接运算符：+</li>
<li>赋值运算符：=、+=、-=、*=、/=、%=</li>
<li>关系运算符：&gt;、&lt;、&gt;=、&lt;=、==</li>
<li>逻辑运算符：&amp;、|、^、！、&amp;&amp;、||</li>
<li>三目运算符：条件 ？代码1 ：代码2</li>
</ol>
<h1 id="控制台输入"><a href="#控制台输入" class="headerlink" title="控制台输入"></a>控制台输入</h1><p><code>Scanner input = new Scanner(System.in);</code></p>
<h1 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(代码<span class="number">1</span>）&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">if</span>(代码<span class="number">1</span>）&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(代码<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">if</span>(代码<span class="number">1</span>）&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(代码<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Java中，字符串比较，使用==比较的时地址是否一致，equals()比较内容</p>
<h1 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h1><p>表达式 = byte、short、int、char、String（JDK7.0）、枚举</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">switsh(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">1</span>：	<span class="keyword">break</span>；</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">2</span>： <span class="keyword">break</span>；</span><br><span class="line"><span class="keyword">default</span>：</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">while</span><span class="params">(条件)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h2><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(条件)</span><br></pre></td></tr></table></figure>

<h2 id="跳过及中断"><a href="#跳过及中断" class="headerlink" title="跳过及中断"></a>跳过及中断</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span>；中断</span><br><span class="line"><span class="keyword">continue</span>；跳过</span><br></pre></td></tr></table></figure>
<h1 id="方法的内存分析"><a href="#方法的内存分析" class="headerlink" title="方法的内存分析"></a>方法的内存分析</h1><ul>
<li>当执行该方法时，则方法进栈（压栈）</li>
<li>当方法执行完毕，则该方法出栈（弹栈），局部变量也随之释放</li>
</ul>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>主从Mysql设置</title>
    <url>/2019/01/21/%E4%B8%BB%E4%BB%8EMysql%E8%AE%BE%E7%BD%AE-20190121/</url>
    <content><![CDATA[<p>什么是主从，详细百度去吧，我说说我自己的理解</p>
<ul>
<li><p>为了灾备</p>
</li>
<li><p>均衡负载，提高吞吐量</p>
</li>
</ul>
<h2 id="主备的原理"><a href="#主备的原理" class="headerlink" title="主备的原理"></a>主备的原理</h2><p>主服务器（master） 把数据同步到从服务器（slave）</p>
<p><img src="%E4%B8%BB%E4%BB%8EMysql%E8%AE%BE%E7%BD%AE-20190121/1.jpg" alt=""></p>
<h2 id="下面就是实现了"><a href="#下面就是实现了" class="headerlink" title="下面就是实现了"></a>下面就是实现了</h2><p>首先需要两个mysql（本地测试推荐：phpstudy里面复制两个mysql）</p>
<h3 id="修改my-ini"><a href="#修改my-ini" class="headerlink" title="修改my.ini"></a>修改my.ini</h3><p>— 唯一 ,要与备机的不同</p>
<p><code>server_id = 101</code></p>
<p>— 开启二进制日志</p>
<p><code>log-bin= mysql-bin</code></p>
<h3 id="设置服务"><a href="#设置服务" class="headerlink" title="设置服务"></a>设置服务</h3><p>— 设置服务</p>
<p><code>.\mysqld.exe install MySQL-3310 –defaults-file=”D:\PhpStudy\MySQL\my.ini”</code></p>
<p>— 删除服务</p>
<p><code>.\mysqld.exe remove MySQL-3310</code></p>
<p>— 开启服务</p>
<p><code>net start MySQL-3310</code></p>
<h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><p>— 查询连接账户</p>
<p><code>SELECT USER,HOST from user;</code></p>
<p>— 开启远程</p>
<p><code>grant all privileges on . to ‘root’@’%’ identified by ‘root’ with grant option;</code></p>
<h3 id="创建连接用户（主机配置）"><a href="#创建连接用户（主机配置）" class="headerlink" title="创建连接用户（主机配置）"></a>创建连接用户（主机配置）</h3><p>— CREATE USER ‘使用名’@’备机IP地址’ IDENTIFIED BY ‘密码’;#创建用户</p>
<p><code>create user ‘usermysql’@’localhost’ identified by ‘123456’;</code></p>
<p>— GRANT REPLICATION SLAVE ON . TO ‘使用名’@’备机IP地址’;#分配权限</p>
<p><code>grant replication slave on . to ‘usermysql’@’localhost’;</code></p>
<p>— 刷新权限</p>
<p><code>flush privileges;</code></p>
<p>— 查看master状态</p>
<p><code>show master status;</code></p>
<p>创建连接（从机配置）</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span> </span><br><span class="line"><span class="attribute">MASTER_HOST</span>=’localhost’, #主机的IP</span><br><span class="line"><span class="attribute">MASTER_PORT</span>=3306,</span><br><span class="line"><span class="attribute">MASTER_USER</span>=’usermysql’, #之前创建的那个使用名</span><br><span class="line"><span class="attribute">MASTER_PASSWORD</span>=’123456′, #密码</span><br><span class="line"><span class="attribute">MASTER_LOG_FILE</span>=’mysql-bin.000001′, #这是主库中show master status;File下的那个值</span><br><span class="line"><span class="attribute">MASTER_LOG_POS</span>=446;#这是主库Position下的那个值</span><br><span class="line"></span><br><span class="line">Slave_IO_Running: <span class="literal">Yes</span></span><br><span class="line">Slave_SQL_Running: <span class="literal">Yes</span> </span><br><span class="line">看到这两个都是<span class="literal">Yes</span>就成了</span><br></pre></td></tr></table></figure>
<p>— 关闭</p>
<p><code>stop slave;</code></p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM配置</title>
    <url>/2019/01/19/SSM%E9%85%8D%E7%BD%AE-20190119/</url>
    <content><![CDATA[<h1 id="common"><a href="#common" class="headerlink" title="common"></a>common</h1><h2 id="获取上下文"><a href="#获取上下文" class="headerlink" title="获取上下文"></a>获取上下文</h2><a id="more"></a>

<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取上下文</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"applicationContextHelper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextHelper</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        applicationContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">popBean</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (applicationContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> applicationContext.<span class="title">getBean</span><span class="params">(clazz)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">popBean</span><span class="params">(String name, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (applicationContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> applicationContext.<span class="title">getBean</span><span class="params">(name, clazz)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (applicationContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bean里面有那些东西</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">printAllBeans</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] beans = applicationContext.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String beanName : beans) &#123;</span><br><span class="line">            <span class="keyword">if</span> (beanName.indexOf(<span class="string">"zuohy"</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                Class&lt;?&gt; beanType = applicationContext.getType(beanName);</span><br><span class="line">                System.out.println(<span class="string">"BeanName:"</span> + beanName);</span><br><span class="line">                System.out.println(<span class="string">"Bean的类型："</span> + beanType);</span><br><span class="line">                System.out.println(<span class="string">"Bean所在的包："</span> + beanType.getPackage());</span><br><span class="line">                System.out.println(<span class="string">"Bean："</span> + ApplicationContextHelper.applicationContext.getBean(beanName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Http前后监听"><a href="#Http前后监听" class="headerlink" title="Http前后监听"></a>Http前后监听</h2><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Http前后监听</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String START_TIME = <span class="string">"requestStartTime"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求实现 前</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = request.getRequestURL().toString();</span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">        log.info(<span class="string">"request start. url:&#123;&#125;, params:&#123;&#125;"</span>, url, JsonMapper.obj2String(parameterMap));</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        request.setAttribute(START_TIME, start);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常请求结束后</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任何请求结束后</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = request.getRequestURL().toString();</span><br><span class="line">        <span class="keyword">long</span> start = (Long) request.getAttribute(START_TIME);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"request completion. url:&#123;&#125;, cost:&#123;&#125;"</span>, url, end - start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Json返回"><a href="#Json返回" class="headerlink" title="Json返回"></a>Json返回</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> JsonData &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Object</span> data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> JsonData(<span class="built_in">boolean</span> ret) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ret = ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonData success(<span class="built_in">String</span> msg, <span class="built_in">Object</span> object) &#123;</span><br><span class="line">        JsonData jsonData = <span class="keyword">new</span> JsonData(<span class="literal">true</span>);</span><br><span class="line">        jsonData.msg = msg;</span><br><span class="line">        jsonData.data = object;</span><br><span class="line">        <span class="keyword">return</span> jsonData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonData success(<span class="built_in">Object</span> object) &#123;</span><br><span class="line">        JsonData jsonData = <span class="keyword">new</span> JsonData(<span class="literal">true</span>);</span><br><span class="line">        jsonData.data = object;</span><br><span class="line">        <span class="keyword">return</span> jsonData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonData success() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonData(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonData fail(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">        JsonData jsonData = <span class="keyword">new</span> JsonData(<span class="literal">false</span>);</span><br><span class="line">        jsonData.msg = msg;</span><br><span class="line">        <span class="keyword">return</span> jsonData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;<span class="built_in">String</span>,<span class="built_in">Object</span>&gt; toMap()&#123;</span><br><span class="line">        HashMap&lt;<span class="built_in">String</span>,<span class="built_in">Object</span>&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">"ret"</span>,ret);</span><br><span class="line">        result.put(<span class="string">"msg"</span>,msg);</span><br><span class="line">        result.put(<span class="string">"data"</span>,data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public <span class="keyword">class</span> SpringExceptionResolver implements HandlerExceptionResolver &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public ModelAndView resolve<span class="constructor">Exception(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>, Object <span class="params">o</span>, Exception <span class="params">e</span>)</span> &#123;</span><br><span class="line">        String url = request.get<span class="constructor">RequestURL()</span>.<span class="keyword">to</span><span class="constructor">String()</span>;</span><br><span class="line">        ModelAndView mv;</span><br><span class="line">        String defaultMsg = <span class="string">"System error"</span>;</span><br><span class="line">        <span class="comment">// .json .do</span></span><br><span class="line">        <span class="comment">// 要求项目中所有请求json数据,都用.json结尾</span></span><br><span class="line">        <span class="keyword">if</span> (url.ends<span class="constructor">With(<span class="string">".json"</span>)</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e instanceof PermissionException<span class="operator"> || </span>e instanceof ParamException) &#123;</span><br><span class="line">                JsonData result = <span class="module-access"><span class="module"><span class="identifier">JsonData</span>.</span></span>fail(e.get<span class="constructor">Message()</span>);</span><br><span class="line">                mv = <span class="keyword">new</span> <span class="constructor">ModelAndView(<span class="string">"jsonView"</span>, <span class="params">result</span>.<span class="params">toMap</span>()</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.error(<span class="string">"unknown json exception---url:"</span>+url,e);</span><br><span class="line">                JsonData result = <span class="module-access"><span class="module"><span class="identifier">JsonData</span>.</span></span>fail(defaultMsg);</span><br><span class="line">                mv = <span class="keyword">new</span> <span class="constructor">ModelAndView(<span class="string">"jsonView"</span>, <span class="params">result</span>.<span class="params">toMap</span>()</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.ends<span class="constructor">With(<span class="string">".do"</span>)</span>) &#123;<span class="comment">//要求项目中所有请求page页面,都用.do结尾</span></span><br><span class="line">            JsonData result = <span class="module-access"><span class="module"><span class="identifier">JsonData</span>.</span></span>fail(defaultMsg);</span><br><span class="line">            mv = <span class="keyword">new</span> <span class="constructor">ModelAndView(<span class="string">"exception"</span>, <span class="params">result</span>.<span class="params">toMap</span>()</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">"unknown page exception---url:"</span>+url,e);</span><br><span class="line">            JsonData result = <span class="module-access"><span class="module"><span class="identifier">JsonData</span>.</span></span>fail(defaultMsg);</span><br><span class="line">            mv = <span class="keyword">new</span> <span class="constructor">ModelAndView(<span class="string">"jsonView"</span>, <span class="params">result</span>.<span class="params">toMap</span>()</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="exception"><a href="#exception" class="headerlink" title="exception"></a>exception</h1><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PermissionException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PermissionException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PermissionException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PermissionException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">PermissionException</span><span class="params">(String message, Throwable cause, <span class="keyword">boolean</span> enableSuppression, <span class="keyword">boolean</span> writableStackTrace)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="校验异常"><a href="#校验异常" class="headerlink" title="校验异常"></a>校验异常</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//校验异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ParamException</span><span class="params">(String message, Throwable cause, <span class="keyword">boolean</span> enableSuppression, <span class="keyword">boolean</span> writableStackTrace)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="xml及-properties"><a href="#xml及-properties" class="headerlink" title=".xml及.properties"></a><em>.xml及</em>.properties</h1><h2 id="spring-xml"><a href="#spring-xml" class="headerlink" title="spring.xml"></a>spring.xml</h2><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span></span><br><span class="line"><span class="xml">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"</span></span><br><span class="line"><span class="xml">       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 获取资源文件 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 忽略无法处理的占位 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreUnresolvablePlaceholders"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:settings.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 数据源 init开始 destroy关闭 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;db.driverClassName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;db.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;db.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;db.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 初始大小 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;db.initialSize&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 最小空余数量 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;db.minIdle&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 最大连接 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;db.maxActive&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 最长等待时间 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;db.maxWait&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyFilters"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"wall-filter"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- sqlSessionFactory --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath*:mapper/*.xml"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 数据库操作 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.zuohy.dao"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 事务 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- druid --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stat-filter"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.filter.stat.StatFilter"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 发现慢sql --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"slowSqlMillis"</span> <span class="attr">value</span>=<span class="string">"3000"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 记录sql --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logSlowSql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mergeSql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"wall-filter"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.wall.WallFilter"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbType"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"config"</span> <span class="attr">ref</span>=<span class="string">"wall-config"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 开启批量 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"wall-config"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.wall.WallConfig"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"multiStatementAllow"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="spring-servlet-xml"><a href="#spring-servlet-xml" class="headerlink" title="spring-servlet.xml"></a>spring-servlet.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- context Bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动包扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.zuohy.controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.zuohy.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动注解驱动的Spring mvc 功能 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 静态 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/static/**"</span> <span class="attr">location</span>=<span class="string">"/static/"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 加载上下文获取 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.zuohy.common.ApplicationContextHelper"</span> <span class="attr">lazy-init</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 异常 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.zuohy.common.SpringExceptionResolver"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.BeanNameViewResolver"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- json --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jsonView"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.json.MappingJackson2JsonView"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jsp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="settings-properties"><a href="#settings-properties" class="headerlink" title="settings.properties"></a>settings.properties</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">db.driverClassName</span>=com.mysql.cj.jdbc.Driver</span><br><span class="line"><span class="attr">db.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/test?serverTimezone=Asia/Shanghai&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8&amp;useSSL=<span class="literal">false</span>&amp;allowMultiQueries=<span class="literal">true</span></span><br><span class="line"><span class="attr">db.username</span>=</span><br><span class="line"><span class="attr">db.password</span>=</span><br><span class="line"><span class="attr">db.initialSize</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">db.minIdle</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">db.maxActive</span>=<span class="number">20</span></span><br><span class="line"><span class="attr">db.maxWait</span>=<span class="number">60000</span></span><br></pre></td></tr></table></figure>

<h2 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;typeAliases&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!----&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/typeAliases&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;plugins&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;plugin interceptor=""&gt;&lt;/plugin&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/plugins&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h2><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- log输出形式 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</span><span class="xml"> [%thread] %-5level %logger - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 日志物理输出 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;appender name="permission" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;!– 生成路径 –&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;file&gt;$</span></span><span class="template-variable">&#123;catalina.home&#125;</span><span class="xml"><span class="comment">/logs/permission.log&lt;/file&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;!– 日志压缩 –&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;FileNamePattern&gt;$</span></span><span class="template-variable">&#123;catalina.home&#125;</span><span class="xml"><span class="comment">/logs/permission.%</span></span><span class="template-variable">&#123;yyyy-MM-dd&#125;</span><span class="xml"><span class="comment">.log.gz&lt;/FileNamePattern&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;/rollingPolicy&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;!– 日志输出样式 –&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;layout class="ch.qos.logback.classic.PatternLayout"&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;pattern&gt;%d</span></span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</span><span class="xml"><span class="comment"> [%thread] %-5level %logger - %msg%n&lt;/pattern&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;/layout&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;/appender&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!----&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;logger name="xxx" leval="INFO"&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;appender-ref ref="permission"/&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&lt;/logger&gt;--&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- TEACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>module<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Spring beans 加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring mvc 配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Encoding --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- druid --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DruidStatServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>loginUsername<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>loginPassword<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DruidStatServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/sys/druid/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>DruidWebStatFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.alibaba.druid.support.http.WebStatFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>exclusions<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>*.js,*.css,*.jpg,*.png,*.ico,*.gif,/sys/druid/*<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>DruidWebStatFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 未指定访问index.jsp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span></span><br><span class="line"><span class="xml">	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="xml">	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.zuohy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>module Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.3.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">logback.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">logback.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">jackson.varsion</span>&gt;</span>2.9.7<span class="tag">&lt;/<span class="name">jackson.varsion</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">slf4j.varsion</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">slf4j.varsion</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">tomcat-jsp-api.varsion</span>&gt;</span>8.0.53<span class="tag">&lt;/<span class="name">tomcat-jsp-api.varsion</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">validation-api.varsion</span>&gt;</span>2.0.1.Final<span class="tag">&lt;/<span class="name">validation-api.varsion</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">hibernate-validator.varsion</span>&gt;</span>6.0.13.Final<span class="tag">&lt;/<span class="name">hibernate-validator.varsion</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">commons-collections4.varsion</span>&gt;</span>4.2<span class="tag">&lt;/<span class="name">commons-collections4.varsion</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">commons-codec.varsion</span>&gt;</span>1.11<span class="tag">&lt;/<span class="name">commons-codec.varsion</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">commons-lang3.varsion</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">commons-lang3.varsion</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- spring --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- Spring MVC + Spring web --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- mybatis --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;mybatis.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;mybatis-spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- druid --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;druid.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- mysql --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;mysql.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- lombok --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;lombok.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- jackson --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;jackson.varsion&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;jackson.varsion&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;jackson.varsion&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- logback --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;logback.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;logback.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;slf4j.varsion&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- jsp-api --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;tomcat-jsp-api.varsion&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- validation --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;validation-api.varsion&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;hibernate-validator.varsion&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- tools --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;commons-collections4.varsion&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;commons-codec.varsion&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;commons-lang3.varsion&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">finalName</span>&gt;</span>module<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">resources</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="comment">&lt;!--编译之后包含xml --&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">includes</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">includes</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="util"><a href="#util" class="headerlink" title="util"></a>util</h1><h2 id="json和类的转换"><a href="#json和类的转换" class="headerlink" title="json和类的转换"></a>json和类的转换</h2><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">//json和类的转换</span></span><br><span class="line">@Slf4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonMapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ObjectMapper objectMapper = <span class="keyword">new</span> <span class="type">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//config</span></span><br><span class="line">        objectMapper.disable(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);</span><br><span class="line">        objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="literal">false</span>);</span><br><span class="line">        objectMapper.setFilterProvider(<span class="keyword">new</span> <span class="type">SimpleFilterProvider</span>().setFailOnUnknownId(<span class="literal">false</span>));</span><br><span class="line">        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">String</span> obj2String(T src) &#123;</span><br><span class="line">        <span class="keyword">if</span> (src == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> src instanceof <span class="keyword">String</span> ? (<span class="keyword">String</span>) src : <span class="type">objectMapper</span>.writeValueAsString(src);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="string">"parse Object to String exception, error:&#123;&#125;"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T string2Obj(<span class="keyword">String</span> src, TypeReference&lt;T&gt; typeReference) &#123;</span><br><span class="line">        <span class="keyword">if</span> (src == <span class="literal">null</span> || typeReference == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) (typeReference.getType().equals(<span class="keyword">String</span>.class) ? src : <span class="type">objectMapper</span>.readValue(src, typeReference));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="string">"parse String to Object exception, String:&#123;&#125;, TypeReference&lt;T&gt;:&#123;&#125;, error:&#123;&#125;"</span>, src, typeReference, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Validator校验工具"><a href="#Validator校验工具" class="headerlink" title="Validator校验工具"></a>Validator校验工具</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Validator校验工具</span></span><br><span class="line">public <span class="keyword">class</span> BeanValidator &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static ValidatorFactory validatorFactory = <span class="module-access"><span class="module"><span class="identifier">Validation</span>.</span></span>build<span class="constructor">DefaultValidatorFactory()</span>;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; Map&lt;String, String&gt; validate(T t, Class... groups) &#123;</span><br><span class="line">        Validator validator = validatorFactory.get<span class="constructor">Validator()</span>;</span><br><span class="line">        Set validateResult = validator.validate(t, groups);</span><br><span class="line">        <span class="keyword">if</span> (validateResult.is<span class="constructor">Empty()</span>) &#123;</span><br><span class="line">            return <span class="module-access"><span class="module"><span class="identifier">Collections</span>.</span></span>empty<span class="constructor">Map()</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LinkedHashMap errors = <span class="module-access"><span class="module"><span class="identifier">Maps</span>.</span></span><span class="keyword">new</span><span class="constructor">LinkedHashMap()</span>;</span><br><span class="line">            Iterator iterator = validateResult.iterator<span class="literal">()</span>;</span><br><span class="line">            <span class="keyword">while</span> (iterator.has<span class="constructor">Next()</span>) &#123;</span><br><span class="line">                ConstraintViolation violation = (ConstraintViolation) iterator.next<span class="literal">()</span>;</span><br><span class="line">                errors.put(violation.get<span class="constructor">PropertyPath()</span>.<span class="keyword">to</span><span class="constructor">String()</span>, violation.get<span class="constructor">Message()</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            return errors;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Map&lt;String, String&gt; validate<span class="constructor">List(Collection&lt;?&gt; <span class="params">collection</span>)</span> &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Preconditions</span>.</span></span>check<span class="constructor">NotNull(<span class="params">collection</span>)</span>;</span><br><span class="line">        Iterator iterator = collection.iterator<span class="literal">()</span>;</span><br><span class="line">        Map errors;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!iterator.has<span class="constructor">Next()</span>) &#123;</span><br><span class="line">                return <span class="module-access"><span class="module"><span class="identifier">Collections</span>.</span></span>empty<span class="constructor">Map()</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Object object = iterator.next<span class="literal">()</span>;</span><br><span class="line">            errors = validate(object, <span class="keyword">new</span> Class<span class="literal">[<span class="number">0</span>]</span>);</span><br><span class="line">        &#125; <span class="keyword">while</span> (errors.is<span class="constructor">Empty()</span>);</span><br><span class="line">        return errors;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Map&lt;String, String&gt; validate<span class="constructor">Object(Object <span class="params">first</span>, Object<span class="operator">...</span> <span class="params">objects</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (objects != null<span class="operator"> &amp;&amp; </span>objects.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            return validate<span class="constructor">List(Lists.<span class="params">asList</span>(<span class="params">first</span>, <span class="params">objects</span>)</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            return validate(first, <span class="keyword">new</span> Class<span class="literal">[<span class="number">0</span>]</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  异常处理</span></span><br><span class="line"><span class="comment">     * @param param</span></span><br><span class="line"><span class="comment">     * @throws ParamException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public static void check(Object param) throws ParamException &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="module-access"><span class="module"><span class="identifier">BeanValidator</span>.</span></span>validate<span class="constructor">Object(<span class="params">param</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">MapUtils</span>.</span></span>is<span class="constructor">NotEmpty(<span class="params">map</span>)</span>) &#123;</span><br><span class="line">            throw <span class="keyword">new</span> <span class="constructor">ParamException(<span class="params">map</span>.<span class="params">toString</span>()</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>目录结构生成</title>
    <url>/2019/01/19/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E7%94%9F%E6%88%90-20190119/</url>
    <content><![CDATA[<p>cmd进入需要生成的目录</p>
<p>然后</p>
<p><code>tree /f &gt; list.txt</code></p>
<p>目录下会出现一个list.txt目录结构就在里面</p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>目录</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM目录</title>
    <url>/2019/01/19/SSM%E7%9B%AE%E5%BD%95-20190119/</url>
    <content><![CDATA[<blockquote>
<p>这个是自用的目录结构</p>
</blockquote>
<a id="more"></a>

<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">目录结构</span><br><span class="line">│  .classpath</span><br><span class="line">│  .project</span><br><span class="line">│  list.txt</span><br><span class="line">│  pom.xml</span><br><span class="line">│  </span><br><span class="line">├─.settings</span><br><span class="line">│      .jsdtscope</span><br><span class="line">│      org<span class="selector-class">.eclipse</span><span class="selector-class">.core</span><span class="selector-class">.resources</span>.prefs</span><br><span class="line">│      org<span class="selector-class">.eclipse</span><span class="selector-class">.jdt</span><span class="selector-class">.core</span>.prefs</span><br><span class="line">│      org<span class="selector-class">.eclipse</span><span class="selector-class">.m2e</span><span class="selector-class">.core</span>.prefs</span><br><span class="line">│      org<span class="selector-class">.eclipse</span><span class="selector-class">.wst</span><span class="selector-class">.common</span>.component</span><br><span class="line">│      org<span class="selector-class">.eclipse</span><span class="selector-class">.wst</span><span class="selector-class">.common</span><span class="selector-class">.project</span><span class="selector-class">.facet</span><span class="selector-class">.core</span>.xml</span><br><span class="line">│      org<span class="selector-class">.eclipse</span><span class="selector-class">.wst</span><span class="selector-class">.jsdt</span><span class="selector-class">.ui</span><span class="selector-class">.superType</span>.container</span><br><span class="line">│      org<span class="selector-class">.eclipse</span><span class="selector-class">.wst</span><span class="selector-class">.jsdt</span><span class="selector-class">.ui</span><span class="selector-class">.superType</span>.name</span><br><span class="line">│      org<span class="selector-class">.eclipse</span><span class="selector-class">.wst</span><span class="selector-class">.validation</span>.prefs</span><br><span class="line">│      </span><br><span class="line">├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│  │  ├─java</span><br><span class="line">│  │  │  └─cn</span><br><span class="line">│  │  │      └─zuohy</span><br><span class="line">│  │  │          ├─beans</span><br><span class="line">│  │  │          ├─common</span><br><span class="line">│  │  │          │      ApplicationContextHelper.java</span><br><span class="line">│  │  │          │      HttpInterceptor.java</span><br><span class="line">│  │  │          │      JsonData.java</span><br><span class="line">│  │  │          │      SpringExceptionResolver.java</span><br><span class="line">│  │  │          │      </span><br><span class="line">│  │  │          ├─controller</span><br><span class="line">│  │  │          │      TestController.java</span><br><span class="line">│  │  │          │      </span><br><span class="line">│  │  │          ├─dao</span><br><span class="line">│  │  │          ├─exception</span><br><span class="line">│  │  │          │      ParamException.java</span><br><span class="line">│  │  │          │      PermissionException.java</span><br><span class="line">│  │  │          │      </span><br><span class="line">│  │  │          ├─<span class="attribute">filter</span></span><br><span class="line">│  │  │          ├─model</span><br><span class="line">│  │  │          ├─param</span><br><span class="line">│  │  │          │      TestParam.java</span><br><span class="line">│  │  │          │      </span><br><span class="line">│  │  │          ├─service</span><br><span class="line">│  │  │          └─util</span><br><span class="line">│  │  │                  BeanValidator.java</span><br><span class="line">│  │  │                  JsonMapper.java</span><br><span class="line">│  │  │                  </span><br><span class="line">│  │  ├─resources</span><br><span class="line">│  │  │  │  logback.xml</span><br><span class="line">│  │  │  │  mybatis-config.xml</span><br><span class="line">│  │  │  │  settings.properties</span><br><span class="line">│  │  │  │  spring-servlet.xml</span><br><span class="line">│  │  │  │  spring.xml</span><br><span class="line">│  │  │  │  </span><br><span class="line">│  │  │  └─mapper</span><br><span class="line">│  │  └─webapp</span><br><span class="line">│  │      │  index.jsp</span><br><span class="line">│  │      │  </span><br><span class="line">│  │      ├─static</span><br><span class="line">│  │      └─WEB-INF</span><br><span class="line">│  │              web.xml</span><br><span class="line">│  │              </span><br><span class="line">│  └─test</span><br><span class="line">│      └─java</span><br><span class="line">└─target</span><br><span class="line">    ├─classes</span><br><span class="line">    │  │  logback.xml</span><br><span class="line">    │  │  mybatis-config.xml</span><br><span class="line">    │  │  settings.properties</span><br><span class="line">    │  │  spring-servlet.xml</span><br><span class="line">    │  │  spring.xml</span><br><span class="line">    │  │  </span><br><span class="line">    │  └─cn</span><br><span class="line">    │      └─zuohy</span><br><span class="line">    │          ├─beans</span><br><span class="line">    │          ├─common</span><br><span class="line">    │          │      ApplicationContextHelper.class</span><br><span class="line">    │          │      HttpInterceptor.class</span><br><span class="line">    │          │      JsonData.class</span><br><span class="line">    │          │      SpringExceptionResolver.class</span><br><span class="line">    │          │      </span><br><span class="line">    │          ├─controller</span><br><span class="line">    │          │      TestController.class</span><br><span class="line">    │          │      </span><br><span class="line">    │          ├─dao</span><br><span class="line">    │          ├─exception</span><br><span class="line">    │          │      ParamException.class</span><br><span class="line">    │          │      PermissionException.class</span><br><span class="line">    │          │      </span><br><span class="line">    │          ├─<span class="attribute">filter</span></span><br><span class="line">    │          ├─model</span><br><span class="line">    │          ├─param</span><br><span class="line">    │          │      TestParam.class</span><br><span class="line">    │          │      </span><br><span class="line">    │          ├─service</span><br><span class="line">    │          └─util</span><br><span class="line">    │                  BeanValidator.class</span><br><span class="line">    │                  JsonMapper.class</span><br><span class="line">    │                  </span><br><span class="line">    ├─m2e-wtp</span><br><span class="line">    │  └─web-resources</span><br><span class="line">    │      └─META-INF</span><br><span class="line">    │          │  MANIFEST.MF</span><br><span class="line">    │          │  </span><br><span class="line">    │          └─maven</span><br><span class="line">    │              └─cn.zuohy</span><br><span class="line">    │                  └─module</span><br><span class="line">    │                          pom.properties</span><br><span class="line">    │                          pom.xml</span><br><span class="line">    │                          </span><br><span class="line">    └─test-classes</span><br></pre></td></tr></table></figure>

<p><img src="SSM%E7%9B%AE%E5%BD%95-20190119/1.png" alt=""></p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Log4j配置</title>
    <url>/2019/01/19/Log4j%E9%85%8D%E7%BD%AE-20190119/</url>
    <content><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><a id="more"></a>

<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">log4j<span class="selector-class">.rootLogger</span> </span><br><span class="line">为总的</span><br><span class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.console</span>.Threshold=DEBUG </span><br><span class="line">为控制台输出，这个决定着控制台是否输出sql语句</span><br></pre></td></tr></table></figure>

<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- log4j日志文件管理包版本 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">log4j.varsion</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.varsion</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- log4j --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;log4j.varsion&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Log4j配置 ### #允许DEBUG级别以上的日志可以打印到控制台和写入日志文件</span></span><br><span class="line">log4j.<span class="attribute">rootLogger</span>=DEBUG,console,file</span><br><span class="line"><span class="comment">#-----------------------------------# #1</span></span><br><span class="line">定义日志输出目的地为控制台</span><br><span class="line">log4j.appender.<span class="attribute">console</span>=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.<span class="attribute">Target</span>=System.out</span><br><span class="line">log4j.appender.console.<span class="attribute">Threshold</span>=DEBUG</span><br><span class="line"></span><br><span class="line"><span class="comment">####可以灵活地指定日志输出格式，下面一行是指定具体的格式</span></span><br><span class="line"><span class="comment">### #%c: 输出日志信息所属的类目，通常就是所在类的全名 #%m: 输出代码中指定的消息,产生的日志具体信息 #%n:</span></span><br><span class="line">输出一个回车换行符，Windows平台为<span class="string">"/r/n"</span>，Unix平台为<span class="string">"/n"</span>输出日志信息换行</span><br><span class="line">log4j.appender.console.<span class="attribute">layout</span>=org.apache.log4j.PatternLayout</span><br><span class="line"></span><br><span class="line"><span class="comment">#日志记录格式（根据自己喜好更改）</span></span><br><span class="line">log4j.appender.console.layout.<span class="attribute">ConversionPattern</span>=%d [%-5p] - %c (%F.%M:%L) - %m%n</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------------------------------# #2</span></span><br><span class="line">文件大小到达指定尺寸的时候产生一个新的文件</span><br><span class="line">log4j.appender.<span class="attribute">file</span>=org.apache.log4j.RollingFileAppender</span><br><span class="line"></span><br><span class="line"><span class="comment">#日志文件输出目录</span></span><br><span class="line">log4j.appender.file.<span class="attribute">File</span>=E\:/dummmmmmmy/logs/log.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义文件最大大小</span></span><br><span class="line">log4j.appender.file.<span class="attribute">MaxFileSize</span>=1024kb</span><br><span class="line"></span><br><span class="line"><span class="comment">#最多生成多少个文件</span></span><br><span class="line">log4j.appender.file.<span class="attribute">MaxBackupIndex</span>=20</span><br><span class="line"></span><br><span class="line"><span class="comment">###输出日志信息### #写到文件的日志的最低级别</span></span><br><span class="line">log4j.appender.file.<span class="attribute">Threshold</span>=ERROR</span><br><span class="line">log4j.appender.file.<span class="attribute">layout</span>=org.apache.log4j.PatternLayout</span><br><span class="line"></span><br><span class="line"><span class="comment">#日志记录格式（根据自己喜好更改）</span></span><br><span class="line">log4j.appender.file.layout.<span class="attribute">ConversionPattern</span>=%d&#123;yyyy-MM-dd HH\:mm\:ss&#125; [%p] - %c - %F(%L) -%m%n #-----------------------------------#</span><br><span class="line"></span><br><span class="line">log4j.logger.cn.zuohy.websocke.<span class="attribute">dao</span>=DEBUG --输出SQL语句</span><br><span class="line"></span><br><span class="line"><span class="comment">#3 mybatis 显示SQL语句部分</span></span><br><span class="line">log4j.logger.org.<span class="attribute">mybatis</span>=DEBUG log4j.logger.java.<span class="attribute">sql</span>=DEBUG</span><br><span class="line">log4j.logger.java.sql.<span class="attribute">Statement</span>=DEBUG</span><br><span class="line">log4j.logger.java.sql.<span class="attribute">ResultSet</span>=DEBUG</span><br><span class="line">log4j.logger.java.sql.<span class="attribute">PreparedStatement</span>=DEBUG</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Log4j</tag>
      </tags>
  </entry>
  <entry>
    <title>Rest风格</title>
    <url>/2019/01/19/Rest%E9%A3%8E%E6%A0%BC-20190119/</url>
    <content><![CDATA[<h2 id="RestAction"><a href="#RestAction" class="headerlink" title="RestAction"></a>RestAction</h2><a id="more"></a>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试GET,POST,PUT,DELETE</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author dummmmmmmy</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping("/rest")</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> RestAction &#123;</span><br><span class="line"></span><br><span class="line">	@Autowired</span><br><span class="line">	private UserService userService;</span><br><span class="line"></span><br><span class="line">	@RequestMapping(<span class="keyword">value</span> = "/index.action")</span><br><span class="line">	<span class="built_in">public</span> String userAction(ModelMap map) &#123;</span><br><span class="line">		List&lt;<span class="keyword">User</span>&gt; listUser = userService.listUser("admin", "admin");</span><br><span class="line">		map.put("listUser", listUser);</span><br><span class="line">		<span class="keyword">return</span> "/rest/user";</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@RequestMapping(<span class="keyword">value</span> = "/user.json", <span class="keyword">method</span> = RequestMethod.<span class="keyword">GET</span>)</span><br><span class="line">	@ResponseBody</span><br><span class="line">	<span class="built_in">public</span> Result userJsonGet(@Param("userId") <span class="type">Integer</span> userId) &#123;</span><br><span class="line">		<span class="keyword">User</span> <span class="keyword">user</span> = userService.<span class="keyword">get</span>(userId);</span><br><span class="line">		<span class="keyword">return</span> Result.success().<span class="keyword">add</span>("user", <span class="keyword">user</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@RequestMapping(<span class="keyword">value</span> = "/user.json", <span class="keyword">method</span> = RequestMethod.POST)</span><br><span class="line">	@ResponseBody</span><br><span class="line">	<span class="built_in">public</span> Result userJsonPost(<span class="keyword">User</span> <span class="keyword">user</span>) &#123;</span><br><span class="line">		<span class="type">int</span> tmp = userService.post(<span class="keyword">user</span>);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("-------------返回:" + tmp);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("-------------ID:" + <span class="keyword">user</span>.getUserId());</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@RequestMapping(<span class="keyword">value</span> = "/user.json", <span class="keyword">method</span> = RequestMethod.PUT)</span><br><span class="line">	@ResponseBody</span><br><span class="line">	<span class="built_in">public</span> Result userJsonPut(<span class="keyword">User</span> <span class="keyword">user</span>) &#123;</span><br><span class="line">		<span class="type">int</span> tmp = userService.put(<span class="keyword">user</span>);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("-------------返回:" + tmp);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@RequestMapping(<span class="keyword">value</span> = "/user.json", <span class="keyword">method</span> = RequestMethod.<span class="keyword">DELETE</span>)</span><br><span class="line">	@ResponseBody</span><br><span class="line">	<span class="built_in">public</span> Result userJsonDelete(@Param("userId") <span class="type">Integer</span> userId) &#123;</span><br><span class="line">		<span class="type">int</span> tmp = userService.<span class="keyword">delete</span>(userId);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("-------------返回:" + tmp);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">filter</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">filter</span>-<span class="type">name</span>&gt;HiddenHttpMethodFilter&lt;/<span class="keyword">filter</span>-<span class="type">name</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">filter</span>-<span class="keyword">class</span>&gt;org.springframework.web.<span class="keyword">filter</span>.HiddenHttpMethodFilter&lt;/<span class="keyword">filter</span>-<span class="keyword">class</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">filter</span>&gt;</span><br><span class="line">&lt;<span class="keyword">filter</span>-<span class="keyword">mapping</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">filter</span>-<span class="type">name</span>&gt;HiddenHttpMethodFilter&lt;/<span class="keyword">filter</span>-<span class="type">name</span>&gt;</span><br><span class="line">	&lt;servlet-<span class="type">name</span>&gt;SpringMVC&lt;/servlet-<span class="type">name</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">filter</span>-<span class="keyword">mapping</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="form"><a href="#form" class="headerlink" title="form"></a>form</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"text"</span> <span class="attribute">name</span>=<span class="string">"_method"</span> <span class="attribute">id</span>=<span class="string">"_method"</span> <span class="attribute">value</span>=<span class="string">"put"</span>&gt;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Rest</tag>
      </tags>
  </entry>
  <entry>
    <title>Socket</title>
    <url>/2019/01/19/Socket-20190119/</url>
    <content><![CDATA[<h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><a id="more"></a>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> MyHandler myHandler = new MyHandler();</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(<span class="meta-string">"/login/&#123;username&#125;"</span>)</span></span><br><span class="line">	<span class="keyword">public</span> String login(HttpSession session, <span class="meta">@PathVariable(<span class="meta-string">"username"</span>)</span> String username) &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"login登录接口,username="</span> + username);</span><br><span class="line">		session.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"login"</span> + session.getAttribute(<span class="string">"username"</span>));</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"/websocket/index"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(<span class="meta-string">"/message"</span>)</span></span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="keyword">public</span> String sendMessage() &#123;</span><br><span class="line">		boolean flag = myHandler.sendMessageToAllUsers(new TextMessage(<span class="string">"你好"</span>));</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"sendMessage"</span> + flag);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"发送"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyHandler"><a href="#MyHandler" class="headerlink" title="MyHandler"></a>MyHandler</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> MyHandler extends TextWebSocketHandler &#123;</span><br><span class="line">	// 在线用户列表</span><br><span class="line">	private static final Map&lt;String, WebSocketSession&gt; users;</span><br><span class="line">	// 用户标识</span><br><span class="line">	private static final String CLIENT_ID = "username";</span><br><span class="line"></span><br><span class="line">	static &#123;</span><br><span class="line">		users = <span class="built_in">new</span> HashMap&lt;String, WebSocketSession&gt;();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * webSocket连接</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> afterConnectionEstablished(WebSocketSession <span class="keyword">session</span>) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("afterConnectionEstablished:成功建立连接");</span><br><span class="line">		String username = getClientId(<span class="keyword">session</span>);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("afterConnectionEstablished:" + username);</span><br><span class="line">		<span class="keyword">if</span> (username != <span class="keyword">null</span>) &#123;</span><br><span class="line">			users.put(username, <span class="keyword">session</span>);</span><br><span class="line">			<span class="keyword">session</span>.sendMessage(<span class="built_in">new</span> TextMessage("afterConnectionEstablished:成功建立socket连接"));</span><br><span class="line">			<span class="keyword">System</span>.<span class="keyword">out</span>.println("afterConnectionEstablished"+username);</span><br><span class="line">			<span class="keyword">System</span>.<span class="keyword">out</span>.println("afterConnectionEstablished"+<span class="keyword">session</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 收到消息</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	@Override</span><br><span class="line">	protected <span class="type">void</span> handleTextMessage(WebSocketSession <span class="keyword">session</span>, TextMessage message) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("handleTextMessage"+message.getPayload());</span><br><span class="line">		WebSocketMessage&lt;?&gt; message1 = <span class="built_in">new</span> TextMessage("handleTextMessage:" + message);</span><br><span class="line">		try &#123;</span><br><span class="line">			<span class="keyword">session</span>.sendMessage(message1);</span><br><span class="line">		&#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> handleTransportError(WebSocketSession <span class="keyword">session</span>, Throwable <span class="keyword">exception</span>) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">session</span>.isOpen()) &#123;</span><br><span class="line">			<span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("handleTransportError"+"连接出错");</span><br><span class="line">		users.remove(getClientId(<span class="keyword">session</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> afterConnectionClosed(WebSocketSession <span class="keyword">session</span>, CloseStatus status) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("afterConnectionClosed连接已关闭：" + status);</span><br><span class="line">		users.remove(getClientId(<span class="keyword">session</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> <span class="type">boolean</span> supportsPartialMessages() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取用户标识</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	private String getClientId(WebSocketSession <span class="keyword">session</span>) &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			String clientId = (String) <span class="keyword">session</span>.getAttributes().<span class="keyword">get</span>(CLIENT_ID);</span><br><span class="line">			<span class="keyword">return</span> clientId;</span><br><span class="line">		&#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 发送信息给指定用户</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="built_in">public</span> <span class="type">boolean</span> sendMessageToUser(String clientId, TextMessage message) &#123;</span><br><span class="line">		<span class="keyword">if</span> (users.<span class="keyword">get</span>(clientId) == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">System</span>.<span class="keyword">out</span>.println("sendMessageToUser + 1");</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		WebSocketSession <span class="keyword">session</span> = users.<span class="keyword">get</span>(clientId);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("sendMessage:" + <span class="keyword">session</span>);</span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">session</span>.isOpen()) &#123;</span><br><span class="line">			<span class="keyword">System</span>.<span class="keyword">out</span>.println("sendMessageToUser + 2");</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		try &#123;</span><br><span class="line">			<span class="keyword">session</span>.sendMessage(message);</span><br><span class="line">		&#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">			<span class="keyword">System</span>.<span class="keyword">out</span>.println("sendMessageToUser"+e);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 广播信息</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="built_in">public</span> <span class="type">boolean</span> sendMessageToAllUsers(TextMessage message) &#123;</span><br><span class="line">		<span class="type">boolean</span> allSendSuccess = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">Set</span>&lt;String&gt; clientIds = users.keySet();</span><br><span class="line">		WebSocketSession <span class="keyword">session</span> = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">for</span> (String clientId : clientIds) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				<span class="keyword">session</span> = users.<span class="keyword">get</span>(clientId);</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">session</span>.isOpen()) &#123;</span><br><span class="line">					<span class="keyword">session</span>.sendMessage(message);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">				allSendSuccess = <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> allSendSuccess;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WebSocketConfig"><a href="#WebSocketConfig" class="headerlink" title="WebSocketConfig"></a>WebSocketConfig</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 标注在类上，相当于把该类作为spring的xml配置文件中的&lt;beans&gt;，作用为：配置spring容器(应用上下文)</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>创建一个WebSocket配置类（这里也可以用配置文件来实现其实），实现接口来配置Websocket请求的路径和拦截器</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">	 */</span></span></span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	public <span class="keyword">void</span> registerWebSocketHandlers(WebSocketHandlerRegistry registry) &#123;</span><br><span class="line">		<span class="comment">// 加个setAllowedOrigins(“*”)不然可能会报403的错误</span></span><br><span class="line">		registry.addHandler(myHandler(), <span class="string">"/myHandler"</span>).addInterceptors(<span class="keyword">new</span> WebSocketInterceptor())</span><br><span class="line">				;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//spring4.2以上加 .setAllowedOrigins("*")</span></span><br><span class="line">	<span class="meta">@Bean</span>(name = <span class="string">"myHandler"</span>)</span><br><span class="line">	public WebSocketHandler myHandler() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyHandler();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>等价于 <span class="xml"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=</span></span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>"http://www.w3.org/2001/XMLSchema-instance" xmlns:websocket=</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>"http://www.springframework.org/schema/websocket" xsi:schemaLocation="</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>http://www.springframework.org/schema/websocket</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>http://www.springframework.org/schema/websocket/spring-websocket.xsd"&gt;</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span><span class="xml"><span class="tag">&lt;<span class="name">websocket:handlers</span>&gt;</span></span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span><span class="xml"><span class="tag">&lt;<span class="name">websocket:mapping</span> <span class="attr">path</span>=<span class="string">"/myHandler"</span> <span class="attr">handler</span>=<span class="string">"myHandler"</span>/&gt;</span></span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span><span class="xml"><span class="tag">&lt;/<span class="name">websocket:handlers</span>&gt;</span></span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myHandler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.samples.MyHandler"</span>/&gt;</span></span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span><span class="xml"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">	 */</span></span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WebSocketInterceptor"><a href="#WebSocketInterceptor" class="headerlink" title="WebSocketInterceptor"></a>WebSocketInterceptor</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Component //不好说明层面,但是交给Spring来管理</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> WebSocketInterceptor implements HandshakeInterceptor &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 创建拦截器，用来记录用户标识，便于后面向特定用户发送消息</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> <span class="type">boolean</span> beforeHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler,</span><br><span class="line">			Map&lt;String, <span class="keyword">Object</span>&gt; attributes) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">		// <span class="keyword">object</span> instanceof <span class="keyword">class</span></span><br><span class="line">		// instanceof <span class="keyword">class</span>可以是<span class="keyword">object</span>对象的父类，自身类，不能是子类。</span><br><span class="line">		// 在前两种情况下result的结果为<span class="keyword">true</span></span><br><span class="line">		// 最后一种为<span class="keyword">false</span>。但是<span class="keyword">class</span>为子类时编译不会报错。运行结果为<span class="keyword">false</span>。</span><br><span class="line">		<span class="keyword">if</span> (request instanceof ServletServerHttpRequest) &#123;</span><br><span class="line">			ServletServerHttpRequest serverHttpRequest = (ServletServerHttpRequest) request;</span><br><span class="line">			HttpSession <span class="keyword">session</span> = serverHttpRequest.getServletRequest().getSession();</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">session</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">				attributes.put("username", <span class="keyword">session</span>.getAttribute("username"));</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> afterHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler,</span><br><span class="line">			<span class="keyword">Exception</span> <span class="keyword">exception</span>) &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./static/js/jquery-1.12.4.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">		<span class="comment">// 创建一个Socket实例</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:8080/websocke/myHandler'</span>);</span></span><br><span class="line"><span class="actionscript">		<span class="comment">// 打开Socket</span></span></span><br><span class="line"><span class="actionscript">		socket.onopen = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">			<span class="comment">// 发送一个初始化消息</span></span></span><br><span class="line"><span class="actionscript">			socket.send(<span class="string">'I am the client and I\'m listening!'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">			<span class="comment">// 监听消息</span></span></span><br><span class="line"><span class="actionscript">			socket.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">'Client received a message'</span>, event);</span></span><br><span class="line">			&#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">			<span class="comment">// 监听Socket的关闭</span></span></span><br><span class="line"><span class="actionscript">			socket.onclose = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">'Client notified socket has closed'</span>, event);</span></span><br><span class="line">			&#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">			<span class="comment">// 关闭Socket....</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">//socket.close()</span></span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title>WebService</title>
    <url>/2019/01/19/WebService-20190119/</url>
    <content><![CDATA[<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><a id="more"></a>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- WebService --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">cxf.version</span>&gt;</span>2.2.3<span class="tag">&lt;/<span class="name">cxf.version</span></span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- cxf.WebService --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-frontend-jaxws<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;cxf.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-transports-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;cxf.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;context-param&gt;</span></span><br><span class="line">	<span class="params">&lt;param-name&gt;</span>contextConfigLocation<span class="params">&lt;/param-name&gt;</span></span><br><span class="line">	<span class="params">&lt;param-value&gt;</span>classpath:cxf-*.xml<span class="params">&lt;/param-value&gt;</span></span><br><span class="line"><span class="params">&lt;/context-param&gt;</span></span><br><span class="line"><span class="params">&lt;listener&gt;</span></span><br><span class="line">	<span class="params">&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="params">&lt;/listener-class&gt;</span></span><br><span class="line"><span class="params">&lt;/listener&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;servlet&gt;</span></span><br><span class="line">	<span class="params">&lt;servlet-name&gt;</span>CXFServlet<span class="params">&lt;/servlet-name&gt;</span></span><br><span class="line">	<span class="params">&lt;servlet-class&gt;</span>org.apache.cxf.transport.servlet.CXFServlet<span class="params">&lt;/servlet-class&gt;</span></span><br><span class="line">	<span class="params">&lt;load-on-startup&gt;</span><span class="number">1</span><span class="params">&lt;/load-on-startup&gt;</span></span><br><span class="line"><span class="params">&lt;/servlet&gt;</span></span><br><span class="line"><span class="params">&lt;servlet-mapping&gt;</span></span><br><span class="line">	<span class="params">&lt;servlet-name&gt;</span>CXFServlet<span class="params">&lt;/servlet-name&gt;</span></span><br><span class="line">	<span class="params">&lt;url-pattern&gt;</span><span class="meta-keyword">/ws/</span>*<span class="params">&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="params">&lt;/servlet-mapping&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="cxf-config-xml"><a href="#cxf-config-xml" class="headerlink" title="cxf-config.xml"></a>cxf-config.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:jaxws</span>=<span class="string">"http://cxf.apache.org/jaxws"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:jaxrs</span>=<span class="string">"http://cxf.apache.org/jaxrs"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://cxf.apache.org/jaxrs</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://cxf.apache.org/schemas/jaxrs.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath*:META-INF/cxf/cxf.xml"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">import</span></span></span><br><span class="line"><span class="tag">		<span class="attr">resource</span>=<span class="string">"classpath*:META-INF/cxf/cxf-extension-soap.xml"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath*:META-INF/cxf/cxf-servlet.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- id 不能重复 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">jaxws:endpoint</span> <span class="attr">id</span>=<span class="string">"userWebService"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">implementor</span>=<span class="string">"cn.zuohy.kiking.webservice.UserWebServiceImpl"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">address</span>=<span class="string">"/userws"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- &lt;jaxrs:server id="restContainer" address="/"&gt; &lt;jaxrs:serviceBeans&gt; </span></span><br><span class="line"><span class="comment">		&lt;ref bean="roomService" /&gt; &lt;/jaxrs:serviceBeans&gt; &lt;jaxrs:providers&gt; &lt;bean </span></span><br><span class="line"><span class="comment">		class="org.codehaus.jackson.jaxrs.JacksonJaxbJsonProvider" /&gt; &lt;/jaxrs:providers&gt; </span></span><br><span class="line"><span class="comment">		&lt;jaxrs:extensionMappings&gt; &lt;entry key="json" value="application/json" /&gt; &lt;entry </span></span><br><span class="line"><span class="comment">		key="xml" value="application/xml" /&gt; &lt;/jaxrs:extensionMappings&gt; &lt;/jaxrs:server&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@WebService</span></span><br><span class="line">public interface UserWebService &#123;</span><br><span class="line">	<span class="comment">// 使用@WebMethod注解标注WebServiceI接口中的方法</span></span><br><span class="line">	<span class="variable">@WebMethod</span></span><br><span class="line">	List&lt;User&gt; listUser(<span class="variable">@WebParam</span>(name = <span class="string">"userName"</span>) String userName, <span class="variable">@WebParam</span>(name = <span class="string">"userPass"</span>) String userPass);</span><br><span class="line">	</span><br><span class="line">	<span class="variable">@WebMethod</span></span><br><span class="line">	List&lt;User&gt; list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">WebService(<span class="params">endpointInterface</span> = <span class="string">"cn.zuohy.kiking.webservice.UserWebService"</span>, <span class="params">serviceName</span> = <span class="string">"userws"</span>)</span></span><br><span class="line">public <span class="keyword">class</span> UserWebServiceImpl implements UserWebService &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public List&lt;User&gt; <span class="built_in">list</span><span class="constructor">User(@WebParam(<span class="params">name</span> = <span class="string">"userName"</span>)</span> String userName,</span><br><span class="line">			@<span class="constructor">WebParam(<span class="params">name</span> = <span class="string">"userPass"</span>)</span> String userPass) &#123;</span><br><span class="line">		List&lt;User&gt; listUser = null;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 子容器 父容器 矛盾，因为service是在子容器springmvc中生成的，而webService是父容器中生成（先生成）自行获取spring</span></span><br><span class="line">			<span class="comment">// mvc容器</span></span><br><span class="line">			userService = (UserService) <span class="module-access"><span class="module"><span class="identifier">ContextUtils</span>.</span></span>get<span class="constructor">SpringMVCContext()</span>.get<span class="constructor">Bean(<span class="string">"userService"</span>)</span>;</span><br><span class="line">			listUser = userService.<span class="built_in">list</span><span class="constructor">User(<span class="params">userName</span>, <span class="params">userPass</span>)</span>;</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		listUser = userService.listUser(userName, userPass);</span></span><br><span class="line">		return listUser;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public List&lt;User&gt; <span class="built_in">list</span><span class="literal">()</span> &#123;</span><br><span class="line">		List&lt;User&gt; <span class="built_in">list</span> = null;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 子容器 父容器 矛盾，因为service是在子容器springmvc中生成的，而webService是父容器中生成（先生成）自行获取spring</span></span><br><span class="line">			<span class="comment">// mvc容器</span></span><br><span class="line">			userService = (UserService) <span class="module-access"><span class="module"><span class="identifier">ContextUtils</span>.</span></span>get<span class="constructor">SpringMVCContext()</span>.get<span class="constructor">Bean(<span class="string">"userService"</span>)</span>;</span><br><span class="line">			<span class="built_in">list</span> = userService.<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		list = userService.list();</span></span><br><span class="line">		return <span class="built_in">list</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提前获取SpringMVC</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextUtils</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WebApplicationContext <span class="title">getSpringMVCContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		WebApplicationContext rootWac = ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">		<span class="comment">// 获取servletContext</span></span><br><span class="line">		ServletContext servletContext = rootWac.getServletContext();</span><br><span class="line">		<span class="comment">// 获取子容器，名字最后对应servlet名字</span></span><br><span class="line">		<span class="comment">//1.查看spring容器中的对象名称</span></span><br><span class="line">		<span class="keyword">String</span>[] beannames = rootWac.getBeanDefinitionNames();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">String</span> beanname:beannames)&#123;</span><br><span class="line">			System.out.<span class="built_in">println</span>(beanname);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.out.<span class="built_in">println</span>(servletContext);</span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2.查看servlet中容器列表</span></span><br><span class="line">		Enumeration&lt;<span class="keyword">String</span>&gt; servletnames  = servletContext.getAttributeNames();</span><br><span class="line">		<span class="keyword">while</span>(servletnames.hasMoreElements())&#123;</span><br><span class="line">			System.out.<span class="built_in">println</span>(servletnames.nextElement());</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		WebApplicationContext springmvc = WebApplicationContextUtils.getWebApplicationContext(servletContext,</span><br><span class="line">				<span class="string">"org.springframework.web.servlet.FrameworkServlet.CONTEXT.SpringMVC"</span>);</span><br><span class="line">		<span class="keyword">return</span> springmvc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">apache-cxf-<span class="number">3.2</span>.<span class="number">7</span> 代码生成</span><br><span class="line"></span><br><span class="line">生成后：对应接口的实现类和Response添加@XmlType( namespace = <span class="string">"http://namespace.thats.not.the.same.as.the.generated"</span>)</span><br><span class="line"></span><br><span class="line">信息: Creating Service &#123;http:<span class="comment">//webservice.websocke.zuohy.cn/&#125;userws from WSDL: http://localhost:8080/websocke/ws/userws?wsdl</span></span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> javax<span class="selector-class">.xml</span><span class="selector-class">.ws</span><span class="selector-class">.soap</span><span class="selector-class">.SOAPFaultException</span>: Fault occurred while processing.</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.cxf</span><span class="selector-class">.jaxws</span><span class="selector-class">.JaxWsClientProxy</span>.invoke(JaxWsClientProxy<span class="selector-class">.java</span>:<span class="number">1</span> <span class="number">43</span>) <span class="variable">$Proxy37</span>.list(Unknown Source)</span><br><span class="line">at com<span class="selector-class">.sun</span><span class="selector-class">.proxy</span>.</span><br><span class="line"></span><br><span class="line">这为请求错误</span><br></pre></td></tr></table></figure>

<h2 id="创建WSDL的url-确定命名空间以及文档中服务端口的name属性-然后请求接口"><a href="#创建WSDL的url-确定命名空间以及文档中服务端口的name属性-然后请求接口" class="headerlink" title="创建WSDL的url,确定命名空间以及文档中服务端口的name属性,然后请求接口"></a>创建WSDL的url,确定命名空间以及文档中服务端口的name属性,然后请求接口</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public void clientsoap<span class="literal">()</span> throws Exception &#123;</span><br><span class="line">		<span class="comment">// 创建WSDL的URL，注意不是服务地址</span></span><br><span class="line">		URL url = <span class="keyword">new</span> <span class="constructor">URL(<span class="string">"http://localhost:8080/websocke/ws/userws?wsdl"</span>)</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建服务名称</span></span><br><span class="line">		<span class="comment">// 1.namespaceURI - 命名空间地址 (wsdl文档中的targetNamespace</span></span><br><span class="line">		<span class="comment">// targetNamespace="http://webserviceImp.gxa/")</span></span><br><span class="line">		<span class="comment">// 2.localPart - 服务视图名 (wsdl文档中服务名称，例如&lt;wsdl:service name="studentws"&gt;)</span></span><br><span class="line">		QName qname = <span class="keyword">new</span> <span class="constructor">QName(<span class="string">"http://webservice.websocke.zuohy.cn/"</span>, <span class="string">"userws"</span>)</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建服务视图</span></span><br><span class="line">		<span class="comment">// 参数解释：</span></span><br><span class="line">		<span class="comment">// 1.wsdlDocumentLocation - wsdl地址</span></span><br><span class="line">		<span class="comment">// 2.serviceName - 服务名称</span></span><br><span class="line">		Service service = <span class="module-access"><span class="module"><span class="identifier">Service</span>.</span></span>create(url, qname);</span><br><span class="line">		<span class="comment">// 获取服务实现类</span></span><br><span class="line">		<span class="comment">// 参数解释:serviceEndpointInterface - 服务端口(wsdl文档中服务端口的name属性，例如&lt;wsdl:port</span></span><br><span class="line">		<span class="comment">// binding="tns:studentwsSoapBinding" name="StudentWebServiceImpPort"&gt;)</span></span><br><span class="line">		UserWebService userWebService = service.get<span class="constructor">Port(UserWebService.<span class="params">class</span>)</span>;</span><br><span class="line">		<span class="comment">// 调用查询方法</span></span><br><span class="line">		List&lt;User&gt; users = userWebService.<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">		for (User user : users) &#123;</span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(user.get<span class="constructor">UserId()</span>+<span class="string">" "</span>+user.get<span class="constructor">UserName()</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public static void main(String<span class="literal">[]</span> args) throws Exception &#123;</span><br><span class="line">		<span class="keyword">new</span> <span class="constructor">UserWebServiceApp()</span>.clientsoap<span class="literal">()</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>WebService</tag>
      </tags>
  </entry>
  <entry>
    <title>Could-not-find-result-map</title>
    <url>/2019/01/19/Could-not-find-result-map-20190119/</url>
    <content><![CDATA[<p>今天在写代码的时候，写完代码测试的时候发现登陆的时候登陆不进去，然后在登陆的断点处，抛出了这个异常</p>
<p><code>Could not find result map ren.guard.dao.SysDeptMapper.int</code></p>
<p>就是在 SysDeptMapper .xml里面本该是</p>
<p><code>resultType=&#39;int&#39;</code></p>
<p>写成了</p>
<p><code>resultMap=&#39;int&#39;</code></p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis融入SSM</title>
    <url>/2019/01/19/Redis%E8%9E%8D%E5%85%A5SSM-20190119/</url>
    <content><![CDATA[<p>根据个人的理解Redis融入SSM是需要在Spring里面给一个Redis的客户端，通过他来对Redis进行操作</p>
<a id="more"></a>

<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">jedis.version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">jedis.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="comment">&lt;!-- redis客户端 --&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;jedis.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="Redis-xml"><a href="#Redis-xml" class="headerlink" title="Redis.xml"></a>Redis.xml</h2><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span></span><br><span class="line"><span class="xml">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="xml">       xmlns:context="http://www.springframework.org/schema/context"</span></span><br><span class="line"><span class="xml">       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:settings.properties"</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shardedJedisPool"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.ShardedJedisPool"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisShardInfo"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;redis.host&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;redis.port&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"timeout"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;redis.timeout&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;redis.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="settings-properties"><a href="#settings-properties" class="headerlink" title="settings.properties"></a>settings.properties</h2><p>没有密码可以去除<property name=”password” value=”${redis.password}”/>和redis.password=</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">redis.host</span>=</span><br><span class="line"><span class="attr">redis.port</span>=<span class="number">6379</span></span><br><span class="line"><span class="attr">redis.timeout</span>=<span class="number">300</span></span><br><span class="line"><span class="attr">redis.password</span>=</span><br></pre></td></tr></table></figure>

<h2 id="引用和启用客户端"><a href="#引用和启用客户端" class="headerlink" title="引用和启用客户端"></a>引用和启用客户端</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Service</span>(<span class="string">"redisPool"</span>)</span><br><span class="line"><span class="variable">@Slf4j</span></span><br><span class="line">public class RedisPool &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Resource</span>(name = <span class="string">"shardedJedisPool"</span>)</span><br><span class="line">    private ShardedJedisPool shardedJedisPool;</span><br><span class="line">    <span class="comment">//只有启用一个客户端</span></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">ShardedJedis</span> <span class="selector-tag">instance</span>()&#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">shardedJedisPool</span><span class="selector-class">.getResource</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭客户端</span></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">safeClose</span>(ShardedJedis shardedJedis)&#123;</span><br><span class="line">        <span class="selector-tag">try</span> &#123;</span><br><span class="line">            <span class="selector-tag">if</span>(shardedJedis!=null)&#123;</span><br><span class="line">                <span class="selector-tag">shardedJedis</span><span class="selector-class">.close</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="selector-tag">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="selector-tag">log</span><span class="selector-class">.error</span>(<span class="string">"return redis resource exception"</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="封装客户端一些操作"><a href="#封装客户端一些操作" class="headerlink" title="封装客户端一些操作"></a>封装客户端一些操作</h2><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">@Slf4j</span><br><span class="line"><span class="keyword">public</span> class SysCacheService &#123;</span><br><span class="line"></span><br><span class="line">    @Resource(name = <span class="string">"redisPool"</span>)</span><br><span class="line">    <span class="keyword">private</span> RedisPool redisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> savaCache(<span class="keyword">String</span> toSavedValue, <span class="built_in">int</span> timeoutSeconds, CacheKeyConstants prefix) &#123;</span><br><span class="line">        savaCache(toSavedValue, timeoutSeconds, prefix, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> savaCache(<span class="keyword">String</span> toSavedValue, <span class="built_in">int</span> timeoutSeconds, CacheKeyConstants prefix, <span class="keyword">String</span>... keys) &#123;</span><br><span class="line">        <span class="keyword">if</span> (toSavedValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ShardedJedis shardedJedis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">String</span> cacheKey = generateCacheKey(prefix, keys);</span><br><span class="line">            shardedJedis = redisPool.instance();</span><br><span class="line">            shardedJedis.setex(cacheKey, timeoutSeconds, toSavedValue);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="built_in">log</span>.error(<span class="string">"save cache exception, prefix:&#123;&#125;,keys:&#123;&#125;"</span>, prefix.name(), JsonMapper.obj2String(keys), e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            redisPool.safeClose(shardedJedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getFromCache(CacheKeyConstants prefix, <span class="keyword">String</span>... keys) &#123;</span><br><span class="line">        ShardedJedis shardedJedis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">String</span> cacheKey = generateCacheKey(prefix, keys);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            shardedJedis = redisPool.instance();</span><br><span class="line">            <span class="keyword">String</span> value = shardedJedis.<span class="built_in">get</span>(cacheKey);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="built_in">log</span>.error(<span class="string">"get from cache exception prefix:&#123;&#125;,keys:&#123;&#125;"</span>, prefix.name(), JsonMapper.obj2String(keys), e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            redisPool.safeClose(shardedJedis);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> generateCacheKey(CacheKeyConstants prefix, <span class="keyword">String</span>... keys) &#123;</span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">key</span> = prefix.name();</span><br><span class="line">        <span class="keyword">if</span> (keys != <span class="keyword">null</span> &amp;&amp; keys.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">key</span> += <span class="string">"_"</span> + Joiner.on(<span class="string">"_"</span>).<span class="built_in">join</span>(keys);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中枚举类CacheKeyConstants</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">@Getter</span><br><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">CacheKeyConstants</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    SYSTEM_ACLS,</span><br><span class="line"></span><br><span class="line">    USER_ACLS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="调用实例："><a href="#调用实例：" class="headerlink" title="调用实例："></a>调用实例：</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public List&lt;SysAcl&gt; get<span class="constructor">CurrentUserAclListFromCache()</span>&#123;</span><br><span class="line">       <span class="built_in">int</span> userId = <span class="module-access"><span class="module"><span class="identifier">RequestHolder</span>.</span></span>get<span class="constructor">CurrentUser()</span>.get<span class="constructor">Id()</span>;</span><br><span class="line">       String cacheValue = sysCacheService.get<span class="constructor">FromCache(CacheKeyConstants.USER_ACLS,String.<span class="params">valueOf</span>(<span class="params">userId</span>)</span>);</span><br><span class="line">       <span class="keyword">if</span>(<span class="module-access"><span class="module"><span class="identifier">StringUtils</span>.</span></span>is<span class="constructor">Blank(<span class="params">cacheValue</span>)</span>)&#123;</span><br><span class="line">           List&lt;SysAcl&gt; userAclList = get<span class="constructor">CurrentUserAclList()</span>;</span><br><span class="line">           <span class="keyword">if</span>(<span class="module-access"><span class="module"><span class="identifier">CollectionUtils</span>.</span></span>is<span class="constructor">NotEmpty(<span class="params">userAclList</span>)</span>)&#123;</span><br><span class="line">               sysCacheService.sava<span class="constructor">Cache(JsonMapper.<span class="params">obj2String</span>(<span class="params">userAclList</span>)</span>,<span class="number">600</span>,CacheKeyConstants.USER_ACLS,<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">userId</span>)</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           return userAclList;</span><br><span class="line">       &#125;</span><br><span class="line">       return <span class="module-access"><span class="module"><span class="identifier">JsonMapper</span>.</span></span>string2<span class="constructor">Obj(<span class="params">cacheValue</span>, <span class="params">new</span> TypeReference&lt;List&lt;SysAcl&gt;&gt;()</span> &#123;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="JsonMapper"><a href="#JsonMapper" class="headerlink" title="JsonMapper"></a>JsonMapper</h2><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">//json和类的转换</span></span><br><span class="line">@Slf4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonMapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ObjectMapper objectMapper = <span class="keyword">new</span> <span class="type">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//config</span></span><br><span class="line">        objectMapper.disable(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);</span><br><span class="line">        objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="literal">false</span>);</span><br><span class="line">        objectMapper.setFilterProvider(<span class="keyword">new</span> <span class="type">SimpleFilterProvider</span>().setFailOnUnknownId(<span class="literal">false</span>));</span><br><span class="line">        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">String</span> obj2String(T src) &#123;</span><br><span class="line">        <span class="keyword">if</span> (src == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> src instanceof <span class="keyword">String</span> ? (<span class="keyword">String</span>) src : <span class="type">objectMapper</span>.writeValueAsString(src);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="string">"parse Object to String exception, error:&#123;&#125;"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T string2Obj(<span class="keyword">String</span> src, TypeReference&lt;T&gt; typeReference) &#123;</span><br><span class="line">        <span class="keyword">if</span> (src == <span class="literal">null</span> || typeReference == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) (typeReference.getType().equals(<span class="keyword">String</span>.class) ? src : <span class="type">objectMapper</span>.readValue(src, typeReference));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="string">"parse String to Object exception, String:&#123;&#125;, TypeReference&lt;T&gt;:&#123;&#125;, error:&#123;&#125;"</span>, src, typeReference, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Travis-api</title>
    <url>/2019/01/16/Travis-api-20190116/</url>
    <content><![CDATA[<h1 id="第一次接触留个纪念吧"><a href="#第一次接触留个纪念吧" class="headerlink" title="第一次接触留个纪念吧"></a>第一次接触留个纪念吧</h1><p>postman调试Travis-API</p>
<p>因为第一次用postman 不知道怎么设置请求头</p>
<p>需要设置 Headers里面设置请求头以及Token</p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Travis</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>表格计算</title>
    <url>/2018/04/17/%E8%A1%A8%E6%A0%BC%E8%AE%A1%E7%AE%97-20190406/</url>
    <content><![CDATA[<p>某次无聊中， atm 发现了一个很老的程序。这个程序的功能类似于 Excel ，它对一个表格进行操作。<br>不妨设表格有 n 行，每行有 m 个格子。<br>每个格子的内容可以是一个正整数，也可以是一个公式。<br>公式包括三种：</p>
<ol>
<li>SUM(x1,y1:x2,y2) 表示求左上角是第 x1 行第 y1 个格子，右下角是第 x2 行第 y2 个格子这个矩形内所有格子的值的和。</li>
<li>AVG(x1,y1:x2,y2) 表示求左上角是第 x1 行第 y1 个格子，右下角是第 x2 行第 y2 个格子这个矩形内所有格子的值的平均数。</li>
<li>STD(x1,y1:x2,y2) 表示求左上角是第 x1 行第 y1 个格子，右下角是第 x2 行第 y2 个格子这个矩形内所有格子的值的标准差。</li>
</ol>
<p>标准差即为方差的平方根。<br>方差就是：每个数据与平均值的差的平方的平均值，用来衡量单个数据离开平均数的程度。</p>
<p>公式都不会出现嵌套。</p>
<p>如果这个格子内是一个数，则这个格子的值等于这个数，否则这个格子的值等于格子公式求值结果。</p>
<p>输入这个表格后，程序会输出每个格子的值。atm 觉得这个程序很好玩，他也想实现一下这个程序。</p>
<p>「输入格式」<br>第一行两个数 n, m 。<br>接下来 n 行输入一个表格。每行 m 个由空格隔开的字符串，分别表示对应格子的内容。<br>输入保证不会出现循环依赖的情况，即不会出现两个格子 a 和 b 使得 a 的值依赖 b 的值且 b 的值依赖 a 的值。</p>
<p>「输出格式」<br>输出一个表格，共 n 行，每行 m 个保留两位小数的实数。<br>数据保证不会有格子的值超过 1e6 。</p>
<p>「样例输入」<br>3 2<br>1 SUM(2,1:3,1)<br>2 AVG(1,1:1,2)<br>SUM(1,1:2,1) STD(1,1:2,2)</p>
<p>「样例输出」<br>1.00 5.00<br>2.00 3.00<br>3.00 1.48</p>
<p>「数据范围」<br>对于 30% 的数据，满足： n, m &lt;= 5<br>对于 100% 的数据，满足： n, m &lt;= 50</p>
<p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 512M<br>CPU消耗 &lt; 2000ms</p>
<p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p>
<p>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意：不要使用package语句。不要使用jdk1.7及以上版本的特性。<br>注意：主类的名字必须是：Main，否则按无效代码处理。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class Main &#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">String</span>[][] form;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">		input();<span class="comment">// 输入</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; form.length; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; form[i].length; j++) &#123;</span><br><span class="line">				form[i][j] = judgment(form[i][j]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		out();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> judgment(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">str</span>.charAt(<span class="number">0</span>) == <span class="string">'A'</span>) &#123;<span class="comment">// 平均数</span></span><br><span class="line">			<span class="keyword">return</span> average(<span class="built_in">str</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">str</span>.charAt(<span class="number">0</span>) == <span class="string">'S'</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">str</span>.charAt(<span class="number">1</span>) == <span class="string">'U'</span>) &#123; <span class="comment">// 和</span></span><br><span class="line">				<span class="keyword">return</span> with(<span class="built_in">str</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;<span class="comment">// 标准差</span></span><br><span class="line">				<span class="keyword">return</span> standardDeviation(<span class="built_in">str</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;<span class="comment">// 数</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">String</span>.format(<span class="string">"%.2f"</span>, Double.parseDouble(<span class="built_in">str</span>));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 标准差</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> standardDeviation(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">		<span class="built_in">int</span>[] number = axis(<span class="built_in">str</span>);</span><br><span class="line">		ArrayList squ = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="keyword">double</span> ave = <span class="number">0</span>, square = <span class="number">0</span>, num = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = number[<span class="number">0</span>]; i &lt;= number[<span class="number">2</span>]; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = number[<span class="number">1</span>]; j &lt;= number[<span class="number">3</span>]; j++) &#123;</span><br><span class="line">				ave += Double.parseDouble(judgment(form[i][j]));</span><br><span class="line">				squ.<span class="built_in">add</span>(Double.parseDouble(judgment(form[i][j])));</span><br><span class="line">				num++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ave = ave / num;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; squ.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			square += (squ.<span class="built_in">get</span>(i) - ave) * (squ.<span class="built_in">get</span>(i) - ave);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">String</span>.format(<span class="string">"%.2f"</span>, Math.<span class="built_in">sqrt</span>(square / num));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 和</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> with(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">		<span class="built_in">int</span>[] number = axis(<span class="built_in">str</span>);</span><br><span class="line">		<span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = number[<span class="number">0</span>]; i &lt;= number[<span class="number">2</span>]; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = number[<span class="number">1</span>]; j &lt;= number[<span class="number">3</span>]; j++) &#123;</span><br><span class="line">				sum += Double.parseDouble(judgment(form[i][j]));</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">String</span>.format(<span class="string">"%.2f"</span>, sum);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 平均数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> average(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">		<span class="built_in">int</span>[] number = axis(<span class="built_in">str</span>);</span><br><span class="line">		<span class="keyword">double</span> ave = <span class="number">0</span>, num = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = number[<span class="number">0</span>]; i &lt;= number[<span class="number">2</span>]; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = number[<span class="number">1</span>]; j &lt;= number[<span class="number">3</span>]; j++) &#123;</span><br><span class="line">				ave += Double.parseDouble(judgment(form[i][j]));</span><br><span class="line">				num++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">String</span>.format(<span class="string">"%.2f"</span>, ave / num);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span>[] axis(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">		<span class="built_in">int</span>[] number = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">4</span>];</span><br><span class="line">		<span class="built_in">int</span> a = <span class="built_in">str</span>.indexOf(<span class="string">"("</span>);</span><br><span class="line">		<span class="built_in">int</span> b = <span class="built_in">str</span>.indexOf(<span class="string">","</span>);</span><br><span class="line">		<span class="built_in">int</span> c = <span class="built_in">str</span>.indexOf(<span class="string">":"</span>);</span><br><span class="line">		<span class="built_in">int</span> d = <span class="built_in">str</span>.lastIndexOf(<span class="string">","</span>);</span><br><span class="line">		<span class="built_in">int</span> e = <span class="built_in">str</span>.indexOf(<span class="string">")"</span>);</span><br><span class="line">		<span class="keyword">String</span> x1 = <span class="built_in">str</span>.substring(a + <span class="number">1</span>, b);</span><br><span class="line">		<span class="keyword">String</span> y1 = <span class="built_in">str</span>.substring(b + <span class="number">1</span>, c);</span><br><span class="line">		<span class="keyword">String</span> x2 = <span class="built_in">str</span>.substring(c + <span class="number">1</span>, d);</span><br><span class="line">		<span class="keyword">String</span> y2 = <span class="built_in">str</span>.substring(d + <span class="number">1</span>, e);</span><br><span class="line">		number[<span class="number">0</span>] = Integer.parseInt(x1) - <span class="number">1</span>;</span><br><span class="line">		number[<span class="number">1</span>] = Integer.parseInt(y1) - <span class="number">1</span>;</span><br><span class="line">		number[<span class="number">2</span>] = Integer.parseInt(x2) - <span class="number">1</span>;</span><br><span class="line">		number[<span class="number">3</span>] = Integer.parseInt(y2) - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> number;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 输入</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> input() &#123;</span><br><span class="line">		Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="built_in">int</span> row = scanner.nextInt();</span><br><span class="line">		<span class="built_in">int</span> col = scanner.nextInt();</span><br><span class="line">		form = <span class="keyword">new</span> <span class="keyword">String</span>[row][col];</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; form.length; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; form[i].length; j++) &#123;</span><br><span class="line">				form[i][j] = scanner.next();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		scanner.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 输出</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> out() &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; form.length; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; form[i].length; j++) &#123;</span><br><span class="line">				System.out.<span class="built_in">print</span>(form[i][j] + <span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.<span class="built_in">println</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>穿越雷区</title>
    <url>/2018/04/16/%E7%A9%BF%E8%B6%8A%E9%9B%B7%E5%8C%BA-20190406/</url>
    <content><![CDATA[<p>X星的坦克战车很奇怪，它必须交替地穿越正能量辐射区和负能量辐射区才能保持正常运转，否则将报废。<br>某坦克需要从A区到B区去（A，B区本身是安全区，没有正能量或负能量特征），怎样走才能路径最短？</p>
<p>已知的地图是一个方阵，上面用字母标出了A，B区，其它区都标了正号或负号分别表示正负能量辐射区。<br>例如：<br>A + – + –<br>– + – – +<br>– + + + –</p>
<ul>
<li>– + – +<br>B + – + –</li>
</ul>
<p>坦克车只能水平或垂直方向上移动到相邻的区。</p>
<p>数据格式要求：</p>
<p>输入第一行是一个整数n，表示方阵的大小， 4&lt;=n&lt;100<br>接下来是n行，每行有n个数据，可能是A，B，+，-中的某一个，中间用空格分开。<br>A，B都只出现一次。</p>
<p>要求输出一个整数，表示坦克从A区到B区的最少移动步数。<br>如果没有方案，则输出-1</p>
<p>例如：<br>用户输入：<br>5<br>A + – + –<br>– + – – +<br>– + + + –</p>
<ul>
<li>– + – +<br>B + – + –</li>
</ul>
<p>则程序应该输出：<br>10</p>
<p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 512M<br>CPU消耗 &lt; 2000ms</p>
<p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p>
<p>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意：不要使用package语句。不要使用jdk1.7及以上版本的特性。<br>注意：主类的名字必须是：Main，否则按无效代码处理。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">String</span>[][] figure;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span>[] start = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> <span class="built_in">min</span> = Integer.MAX_VALUE;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span>[] direction = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">String</span>[][] <span class="built_in">image</span> = input();</span><br><span class="line">		initial(<span class="built_in">image</span>, start[<span class="number">0</span>], start[<span class="number">1</span>]);</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="built_in">min</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 开始</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initial</span><span class="params">(<span class="keyword">String</span>[][] <span class="built_in">image</span>, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 判断四个方向</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>) &#123; <span class="comment">//下一步的坐标 int x2 = x + direction[i]; int y2 = y + direction[i + 1]; if (x2 &gt;= 0 &amp;&amp; x2 &lt; image.length &amp;&amp; y2 &gt;= 0 &amp;&amp; y2 &lt; image.length) &#123; //结束 if (figure[x][y].equals("B") || count &gt; min) &#123;</span></span><br><span class="line">					<span class="keyword">if</span> (<span class="built_in">min</span> &gt; count) &#123;</span><br><span class="line">						<span class="built_in">min</span> = count;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="comment">// 找到退一步</span></span><br><span class="line">					count--;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//相反，没走过</span></span><br><span class="line">				<span class="keyword">if</span> (!(figure[x][y].equals(figure[x2][y2])) &amp;&amp; !(<span class="built_in">image</span>[x2][y2].equals(<span class="string">"0"</span>))) &#123;</span><br><span class="line">					<span class="built_in">image</span>[x][y] = <span class="string">"0"</span>;</span><br><span class="line">					<span class="comment">//out(image);</span></span><br><span class="line">					count++;</span><br><span class="line">					initial(<span class="built_in">image</span>, x2, y2);</span><br><span class="line">					<span class="built_in">image</span>[x][y] = figure[x][y];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 找不到退一步</span></span><br><span class="line">		count--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//测试显示</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(<span class="keyword">String</span>[][] <span class="built_in">image</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">image</span>.length; i++) &#123;</span><br><span class="line">			System.out.<span class="built_in">println</span>(Arrays.toString(<span class="built_in">image</span>[i]));</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.<span class="built_in">println</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 输入</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span>[][] input() &#123;</span><br><span class="line">		Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> number = scanner.nextInt();</span><br><span class="line">		figure = <span class="keyword">new</span> <span class="keyword">String</span>[number][number];</span><br><span class="line">		<span class="keyword">String</span>[][] <span class="built_in">image</span> = <span class="keyword">new</span> <span class="keyword">String</span>[number][number];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; number; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; number; j++) &#123;</span><br><span class="line">				<span class="built_in">image</span>[i][j] = figure[i][j] = scanner.next();</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (figure[i][j].equals(<span class="string">"A"</span>)) &#123;</span><br><span class="line">					start[<span class="number">0</span>] = i;</span><br><span class="line">					start[<span class="number">1</span>] = j;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		scanner.<span class="built_in">close</span>();</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">image</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>显示二叉树</title>
    <url>/2018/04/15/%E6%98%BE%E7%A4%BA%E4%BA%8C%E5%8F%89%E6%A0%91-20190406/</url>
    <content><![CDATA[<p>排序二叉树的特征是：<br>某个节点的左子树的所有节点值都不大于本节点值。<br>某个节点的右子树的所有节点值都不小于本节点值。</p>
<p>为了能形象地观察二叉树的建立过程，小明写了一段程序来显示出二叉树的结构来。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">		BiTree tree = <span class="keyword">new</span> BiTree(<span class="number">500</span>);</span><br><span class="line">		tree.<span class="keyword">add</span>(<span class="keyword">new</span> BiTree(<span class="number">200</span>));</span><br><span class="line">		tree.<span class="keyword">add</span>(<span class="keyword">new</span> BiTree(<span class="number">509</span>));</span><br><span class="line">		tree.<span class="keyword">add</span>(<span class="keyword">new</span> BiTree(<span class="number">100</span>));</span><br><span class="line">		tree.<span class="keyword">add</span>(<span class="keyword">new</span> BiTree(<span class="number">250</span>));</span><br><span class="line">		tree.<span class="keyword">add</span>(<span class="keyword">new</span> BiTree(<span class="number">507</span>));</span><br><span class="line">		tree.<span class="keyword">add</span>(<span class="keyword">new</span> BiTree(<span class="number">600</span>));</span><br><span class="line">		tree.<span class="keyword">add</span>(<span class="keyword">new</span> BiTree(<span class="number">650</span>));</span><br><span class="line">		tree.<span class="keyword">add</span>(<span class="keyword">new</span> BiTree(<span class="number">450</span>));</span><br><span class="line">		tree.<span class="keyword">add</span>(<span class="keyword">new</span> BiTree(<span class="number">510</span>));</span><br><span class="line">		tree.<span class="keyword">add</span>(<span class="keyword">new</span> BiTree(<span class="number">440</span>));</span><br><span class="line">		tree.<span class="keyword">add</span>(<span class="keyword">new</span> BiTree(<span class="number">220</span>));</span><br><span class="line">		tree.show();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">class</span> <span class="title">BiTree</span> &#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">int</span> v;</span><br><span class="line">		<span class="keyword">private</span> BiTree l;<span class="comment">// 左</span></span><br><span class="line">		<span class="keyword">private</span> BiTree r;<span class="comment">// 右</span></span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">BiTree</span>(<span class="params"><span class="keyword">int</span> v</span>)</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.v = v;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span>(<span class="params">BiTree the</span>)</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (the.v &lt; v) &#123;</span><br><span class="line">				<span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">					l = the;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					l.<span class="keyword">add</span>(the);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (r == <span class="literal">null</span>)</span><br><span class="line">					r = the;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					r.<span class="keyword">add</span>(the);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> h = <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">int</span> hl = l == <span class="literal">null</span> ? <span class="number">0</span> : l.getHeight();</span><br><span class="line">			<span class="keyword">int</span> hr = r == <span class="literal">null</span> ? <span class="number">0</span> : r.getHeight();</span><br><span class="line">			<span class="keyword">return</span> h + Math.max(hl, hr);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> w = (<span class="string">""</span> + v).length();</span><br><span class="line">			<span class="keyword">if</span> (l != <span class="literal">null</span>)</span><br><span class="line">				w += l.getWidth();</span><br><span class="line">			<span class="keyword">if</span> (r != <span class="literal">null</span>)</span><br><span class="line">				w += r.getWidth();</span><br><span class="line">			<span class="keyword">return</span> w;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">			<span class="keyword">char</span>[][] buf = <span class="keyword">new</span> <span class="keyword">char</span>[getHeight()][getWidth()];</span><br><span class="line">			printInBuf(buf, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">			showBuf(buf);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showBuf</span>(<span class="params"><span class="keyword">char</span>[][] x</span>)</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x[i].length; j++)</span><br><span class="line">					System.<span class="keyword">out</span>.print(x[i][j] == <span class="number">0</span> ? <span class="string">' '</span> : x[i][j]);</span><br><span class="line">				System.<span class="keyword">out</span>.println();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printInBuf</span>(<span class="params"><span class="keyword">char</span>[][] buf, <span class="keyword">int</span> x, <span class="keyword">int</span> y</span>)</span> &#123;</span><br><span class="line">			String sv = <span class="string">""</span> + v;</span><br><span class="line">			<span class="keyword">int</span> p1 = l == <span class="literal">null</span> ? x : l.getRootPos(x);</span><br><span class="line">			<span class="keyword">int</span> p2 = getRootPos(x);</span><br><span class="line">			<span class="keyword">int</span> p3 = r == <span class="literal">null</span> ? p2 : r.getRootPos(p2 + sv.length());</span><br><span class="line">			buf[y][p2] = <span class="string">'|'</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = p1; i &lt;= p3; i++)</span><br><span class="line">				buf[y + <span class="number">1</span>][i] = <span class="string">'-'</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sv.length(); i++)</span><br><span class="line">				buf[y + <span class="number">1</span>][p2 + i] = sv.charAt(i);<span class="comment">// 填空位置</span></span><br><span class="line">			<span class="keyword">if</span> (p1 &lt; p2) buf[y + <span class="number">1</span>][p1] = <span class="string">'/'</span>; <span class="keyword">if</span> (p3 &gt; p2)</span><br><span class="line">				buf[y + <span class="number">1</span>][p3] = <span class="string">'\\'</span>;</span><br><span class="line">			<span class="keyword">if</span> (l != <span class="literal">null</span>)</span><br><span class="line">				l.printInBuf(buf, x, y + <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">if</span> (r != <span class="literal">null</span>)</span><br><span class="line">				r.printInBuf(buf, p2 + sv.length(), y + <span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getRootPos</span>(<span class="params"><span class="keyword">int</span> x</span>)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> l == <span class="literal">null</span> ? x : x + l.getWidth();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>五星填数</title>
    <url>/2018/04/14/%E4%BA%94%E6%98%9F%E5%A1%AB%E6%95%B0-20190406/</url>
    <content><![CDATA[<p>如【图1.png】的五星图案节点填上数字：1~12，除去7和11。<br>要求每条直线上数字和相等。</p>
<p>如图就是恰当的填法。</p>
<p>请你利用计算机搜索所有可能的填法有多少种。<br>注意：旋转或镜像后相同的算同一种填法。</p>
<p>请提交表示方案数目的整数，不要填写任何其它内容。</p>
<p><img src="%E4%BA%94%E6%98%9F%E5%A1%AB%E6%95%B0-20190406/1.png" alt=""></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Main</span> &#123;</span><br><span class="line">	static <span class="built_in">int</span> connt = <span class="number">0</span>;</span><br><span class="line">	static <span class="built_in">int</span>[] num = new <span class="built_in">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">		Assignment(<span class="number">0</span>);</span><br><span class="line">		System.<span class="keyword">out</span>.println(connt/<span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> static <span class="built_in">void</span> Assignment(<span class="built_in">int</span> n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (with(num) &amp;&amp; n == <span class="number">10</span>) &#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(Arrays.toString(num));</span><br><span class="line">			connt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = n; i &lt; num.length; i++) &#123;</span><br><span class="line">			<span class="built_in">int</span> tmp = num[i];</span><br><span class="line">			num[i] = num[n];</span><br><span class="line">			num[n] = tmp;</span><br><span class="line">			Assignment(n + <span class="number">1</span>);	</span><br><span class="line">			<span class="comment">//回溯</span></span><br><span class="line">			<span class="built_in">int</span> temp1 = num[i];</span><br><span class="line">			num[i] = num[n];</span><br><span class="line">			num[n] = temp1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> static <span class="built_in">bool</span>ean with(<span class="built_in">int</span>[] Times) &#123;</span><br><span class="line">		<span class="built_in">int</span> tmp = Times[<span class="number">0</span>] + Times[<span class="number">5</span>] + Times[<span class="number">6</span>] + Times[<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">if</span> (tmp == Times[<span class="number">1</span>] + Times[<span class="number">6</span>] + Times[<span class="number">7</span>] + Times[<span class="number">3</span>])</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (tmp == Times[<span class="number">2</span>] + Times[<span class="number">7</span>] + Times[<span class="number">8</span>] + Times[<span class="number">4</span>])</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (tmp == Times[<span class="number">3</span>] + Times[<span class="number">8</span>] + Times[<span class="number">9</span>] + Times[<span class="number">0</span>])</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (tmp == Times[<span class="number">4</span>] + Times[<span class="number">9</span>] + Times[<span class="number">5</span>] + Times[<span class="number">1</span>])</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>分机号</title>
    <url>/2018/04/13/%E5%88%86%E6%9C%BA%E5%8F%B7-20190406/</url>
    <content><![CDATA[<p>X老板脾气古怪，他们公司的电话分机号都是3位数，老板规定，所有号码必须是降序排列，且不能有重复的数位。比如：</p>
<p>751,520,321 都满足要求，而，<br>766,918,201 就不符合要求。</p>
<p>现在请你计算一下，按照这样的规定，一共有多少个可用的3位分机号码？</p>
<p>请直接提交该数字，不要填写任何多余的内容。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Main</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="built_in">int</span> num = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">9</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">9</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">					<span class="keyword">if</span> (i &gt; j &amp;&amp; j &gt; k) &#123;</span><br><span class="line">						num++;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.<span class="keyword">out</span>.println(num);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>生成回文数</title>
    <url>/2018/04/12/%E7%94%9F%E6%88%90%E5%9B%9E%E6%96%87%E6%95%B0-20190406/</url>
    <content><![CDATA[<p>所谓回文数就是左右对称的数字，比如：<br>585,5885,123321…<br>当然，单个的数字也可以算作是对称的。</p>
<p>小明发现了一种生成回文数的方法：<br>比如，取数字19，把它与自己的翻转数相加：<br>19 + 91 = 110，如果不是回文数，就再进行这个过程：<br>110 + 011 = 121 这次是回文数了。</p>
<p>200以内的数字中，绝大多数都可以在30步以内变成回文数，只有一个数字很特殊，就算迭代了1000次，它还是顽固地拒绝回文！</p>
<p>请你提交该顽固数字，不要填写任何多余的内容。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> &#123;</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		StringBuffer <span class="built_in">buffer</span> = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		Long i = <span class="number">10L</span>;</span><br><span class="line">		BigInteger tmp = <span class="keyword">new</span> BigInteger(i + <span class="string">""</span>);</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (i &lt;= <span class="number">200</span>) &#123;</span><br><span class="line">			<span class="keyword">while</span> (!isHuiWen(tmp) &amp;&amp; i &lt;= <span class="number">200</span>) &#123;</span><br><span class="line">				<span class="built_in">buffer</span>.append(tmp);</span><br><span class="line">				<span class="comment">// Long tmp2 = Long.valueOf(buffer.reverse().toString().trim());</span></span><br><span class="line">				<span class="comment">// tmp = tmp + tmp2;</span></span><br><span class="line">				BigInteger big = <span class="keyword">new</span> BigInteger(<span class="built_in">buffer</span>.toString());</span><br><span class="line">				BigInteger big2 = <span class="keyword">new</span> BigInteger(<span class="built_in">buffer</span>.reverse().toString());</span><br><span class="line">				tmp = big.add(big2);</span><br><span class="line">				<span class="built_in">buffer</span>.<span class="keyword">delete</span>(<span class="number">0</span>, <span class="built_in">buffer</span>.length());</span><br><span class="line">				count++;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> (count &gt; <span class="number">9999</span>) &#123;</span><br><span class="line">					System.out.<span class="built_in">println</span>(i);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;			</span><br><span class="line">			count = <span class="number">0</span>;			</span><br><span class="line">			i++;</span><br><span class="line">			tmp = <span class="keyword">new</span> BigInteger(i + <span class="string">""</span>);</span><br><span class="line">			<span class="built_in">buffer</span>.<span class="keyword">delete</span>(<span class="number">0</span>, <span class="built_in">buffer</span>.length());</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isHuiWen</span><span class="params">(BigInteger tmp)</span> </span>&#123;</span><br><span class="line">		StringBuffer buffer1 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		StringBuffer buffer2 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		buffer1.append(tmp);</span><br><span class="line">		buffer2.append(tmp).reverse();</span><br><span class="line">		<span class="keyword">boolean</span> flag = <span class="literal">false</span>;</span><br><span class="line">		<span class="comment">// int i = 0;</span></span><br><span class="line">		<span class="comment">// while (buffer1.length() / 2 &gt; i) &#123;</span></span><br><span class="line">		<span class="comment">// if (!(buffer1.charAt(i) == buffer2.charAt(i))) &#123;</span></span><br><span class="line">		<span class="comment">// flag = false;</span></span><br><span class="line">		<span class="comment">// break;</span></span><br><span class="line">		<span class="comment">// &#125;</span></span><br><span class="line">		<span class="comment">// i++;</span></span><br><span class="line">		<span class="comment">// &#125;</span></span><br><span class="line">		<span class="keyword">if</span> (buffer1.toString().equals(buffer2.toString())) &#123;</span><br><span class="line">			flag = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> flag;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>空心菱形</title>
    <url>/2018/04/11/%E7%A9%BA%E5%BF%83%E8%8F%B1%E5%BD%A2-20190406/</url>
    <content><![CDATA[<p>小明刚刚开发了一个小程序，可以打印出任意规模的空心菱形，规模为6时，如下图：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">*****</span><span class="emphasis">* *</span><span class="strong">*****</span></span><br><span class="line"><span class="strong">*****</span> 	<span class="strong">*****</span></span><br><span class="line"><span class="strong">**** 	 **</span>**</span><br><span class="line"><span class="strong">*** 	  **</span>*</span><br><span class="line"><span class="strong">** 		   **</span></span><br><span class="line"><span class="bullet">*           </span>*</span><br><span class="line"><span class="strong">**         **</span></span><br><span class="line"><span class="strong">*** 	  **</span>*</span><br><span class="line"><span class="strong">**** 	 **</span>**</span><br><span class="line"><span class="strong">*****</span> 	<span class="strong">*****</span></span><br><span class="line"><span class="strong">*****</span><span class="emphasis">* *</span><span class="strong">*****</span></span><br><span class="line">（如果有对齐问题，参看【图1.png】）</span><br></pre></td></tr></table></figure>

<p>他一高兴，踢掉了电源，最后一次修改没有保存…..<br>毛病出在划线的部分。<br>请你帮助小明分析程序，填写划线部分缺失的代码。</p>
<p><img src="%E7%A9%BA%E5%BF%83%E8%8F%B1%E5%BD%A2-20190406/1.png" alt=""></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">String</span> <span class="title">pr</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">String</span> s = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			s += <span class="string">" "</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">			s = <span class="string">"*"</span> + s + <span class="string">"*"</span>;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">String</span> s = pr(<span class="number">1</span>, n * <span class="number">2</span> - <span class="number">1</span>) + <span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">String</span> s2 = s;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">			s = pr(<span class="number">1</span> + i, n * <span class="number">2</span> - i * <span class="number">2</span> - <span class="number">1</span>) + <span class="string">"\n"</span>; <span class="comment">// 填空位置</span></span><br><span class="line">			s2 = s + s2 + s;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		System.out.<span class="built_in">print</span>(s2);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		f(<span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>奇怪的数列</title>
    <url>/2018/04/10/%E5%A5%87%E6%80%AA%E7%9A%84%E6%95%B0%E5%88%97-20190406/</url>
    <content><![CDATA[<p>从X星截获一份电码，是一些数字，如下：<br>13<br>1113<br>3113<br>132113<br>1113122113<br>….</p>
<p>YY博士经彻夜研究，发现了规律：<br>第一行的数字随便是什么，以后每一行都是对上一行“读出来”<br>比如第2行，是对第1行的描述，意思是：1个1，1个3，所以是：1113<br>第3行，意思是：3个1,1个3，所以是：3113</p>
<p>请你编写一个程序，可以从初始数字开始，连续进行这样的变换。</p>
<p>数据格式：</p>
<p>第一行输入一个数字组成的串，不超过100位<br>第二行，一个数字n，表示需要你连续变换多少次，n不超过20</p>
<p>输出一个串，表示最后一次变换完的结果。</p>
<p>例如：<br>用户输出：<br>5<br>7</p>
<p>则程序应该输出：<br>13211321322115</p>
<p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 512M<br>CPU消耗 &lt; 1000ms</p>
<p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p>
<p>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意：不要使用package语句。不要使用jdk1.7及以上版本的特性。<br>注意：主类的名字必须是：Main，否则按无效代码处理。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">String</span> input = scanner.next();</span><br><span class="line">		<span class="keyword">int</span> num = scanner.nextInt();</span><br><span class="line">		<span class="keyword">String</span> number = <span class="built_in">list</span>(input);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num; i++) &#123;</span><br><span class="line">			number = <span class="built_in">list</span>(number);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.<span class="built_in">println</span>(number);</span><br><span class="line">		scanner.<span class="built_in">close</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">list</span><span class="params">(<span class="keyword">String</span> input)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> tmp;</span><br><span class="line">		<span class="keyword">String</span> index = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">while</span> (i &lt; input.length()) &#123;</span><br><span class="line">			tmp = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">while</span> (flag(i, input)) &#123;</span><br><span class="line">				i++;</span><br><span class="line">				tmp++;</span><br><span class="line">			&#125;</span><br><span class="line">			index = index + tmp + <span class="keyword">String</span>.valueOf(input.charAt(i));</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> index;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">flag</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">String</span> input)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">String</span> valueOf = <span class="keyword">String</span>.valueOf(input.charAt(i));</span><br><span class="line">		<span class="keyword">if</span> (i + <span class="number">1</span> &lt; input.length()) &#123;</span><br><span class="line">			<span class="keyword">String</span> valueOf2 = <span class="keyword">String</span>.valueOf(input.charAt(i + <span class="number">1</span>));</span><br><span class="line">			<span class="keyword">if</span> (valueOf.equals(valueOf2)) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>切开字符串</title>
    <url>/2018/04/09/%E5%88%87%E5%BC%80%E5%AD%97%E7%AC%A6%E4%B8%B2-20190406/</url>
    <content><![CDATA[<p>Pear有一个字符串，不过他希望把它切成两段。<br>这是一个长度为N（&lt;=10^5）的字符串。<br>Pear希望选择一个位置，把字符串不重复不遗漏地切成两段，长度分别是t和N-t（这两段都必须非空）。<br>Pear用如下方式评估切割的方案：<br>定义“正回文子串”为：长度为奇数的回文子串。<br>设切成的两段字符串中，前一段中有A个不相同的正回文子串，后一段中有B个不相同的非正回文子串，则该方案的得分为A<em>B。<br>注意，后一段中的B表示的是：“…非正回文…”，而不是: “…正回文…”。<br>那么所有的切割方案中，A</em>B的最大值是多少呢？<br>【输入数据】<br>输入第一行一个正整数N（&lt;=10^5）<br>接下来一行一个字符串，长度为N。该字符串仅包含小写英文字母。<br>【输出数据】<br>一行一个正整数，表示所求的A*B的最大值。<br>【样例输入】<br>10<br>bbaaabcaba<br>【样例输出】<br>38<br>【数据范围】<br>对于20%的数据，N&lt;=100<br>对于40%的数据，N&lt;=1000<br>对于100%的数据，N&lt;=10^5<br>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 512M<br>CPU消耗 &lt; 2000ms<br>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。<br>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意：不要使用package语句。不要使用jdk1.7及以上版本的特性。<br>注意：主类的名字必须是：Main，否则按无效代码处理。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">public</span> class Main &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">		<span class="built_in">int</span> <span class="built_in">max</span> = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">String</span>[] <span class="built_in">str</span> = input();</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">str</span>.length; i += <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="built_in">int</span> x = palindrome(<span class="built_in">str</span>[i]);</span><br><span class="line">			<span class="built_in">int</span> y = notPalindrome(<span class="built_in">str</span>[i + <span class="number">1</span>]);</span><br><span class="line">			<span class="built_in">max</span> = Math.<span class="built_in">max</span>(<span class="built_in">max</span>, x * y);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="built_in">max</span>);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">// 非回文</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> notPalindrome(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">		<span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		Set <span class="built_in">set</span> = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">str</span>.length(); i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt;= <span class="built_in">str</span>.length() - i; j++) &#123;</span><br><span class="line">				<span class="built_in">set</span>.<span class="built_in">add</span>(<span class="built_in">str</span>.substring(j, i + j));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Iterator iterator = <span class="built_in">set</span>.iterator();</span><br><span class="line">		<span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!verification(iterator.next())) &#123;</span><br><span class="line">				sum++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// String[] array = set.toArray(new String[0]);</span></span><br><span class="line">		<span class="comment">// for (int i = 0; i &lt; array.length; i++) &#123;</span></span><br><span class="line">		<span class="comment">// if (!verification(array[i])) &#123;</span></span><br><span class="line">		<span class="comment">// sum++;</span></span><br><span class="line">		<span class="comment">// &#125;</span></span><br><span class="line">		<span class="comment">// &#125;</span></span><br><span class="line">		<span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">// 回问</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> palindrome(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">		<span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		Set <span class="built_in">set</span> = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">str</span>.length(); i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt;= <span class="built_in">str</span>.length() - i; j++) &#123;</span><br><span class="line">				<span class="built_in">set</span>.<span class="built_in">add</span>(<span class="built_in">str</span>.substring(j, i + j));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Iterator iterator = <span class="built_in">set</span>.iterator();</span><br><span class="line">		<span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (verification(iterator.next())) &#123;</span><br><span class="line">				sum++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// String[] array = set.toArray(new String[0]);</span></span><br><span class="line">		<span class="comment">// for (int i = 0; i &lt; array.length; i++) &#123;</span></span><br><span class="line">		<span class="comment">// if (verification(array[i])) &#123;</span></span><br><span class="line">		<span class="comment">// sum++;</span></span><br><span class="line">		<span class="comment">// &#125;</span></span><br><span class="line">		<span class="comment">// &#125;</span></span><br><span class="line">		<span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">boolean</span> verification(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="built_in">str</span>);</span><br><span class="line">		<span class="keyword">String</span> s = sb.<span class="built_in">reverse</span>().toString();</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">str</span>.length() % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">str</span>.equals(s)) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span>[] input() &#123;</span><br><span class="line">		Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="built_in">int</span> number = scanner.nextInt();</span><br><span class="line">		<span class="keyword">String</span>[] <span class="built_in">str</span> = <span class="keyword">new</span> <span class="keyword">String</span>[(number - <span class="number">1</span>) * <span class="number">2</span>];</span><br><span class="line">		<span class="keyword">String</span> s = scanner.next();</span><br><span class="line">		<span class="built_in">int</span> j = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">str</span>.length; i += <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="built_in">str</span>[i] = s.substring(<span class="number">0</span>, j);</span><br><span class="line">			<span class="built_in">str</span>[i + <span class="number">1</span>] = s.substring(j, s.length());</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		scanner.close();</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">str</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只能解决20%</p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>居民集会</title>
    <url>/2018/04/08/%E5%B1%85%E6%B0%91%E9%9B%86%E4%BC%9A-20190406/</url>
    <content><![CDATA[<p>蓝桥村的居民都生活在一条公路的边上，公路的长度为L，每户家庭的位置都用这户家庭到公路的起点的距离来计算，第i户家庭距起点的距离为di。</p>
<p>每年，蓝桥村都要举行一次集会。今年，由于村里的人口太多，村委会决定要在4个地方举行集会，其中3个位于公路中间，1个位最公路的终点。</p>
<p>已知每户家庭都会向着远离公路起点的方向去参加集会，参加集会的路程开销为家庭内的人数ti与距离的乘积。</p>
<p>给定每户家庭的位置di和人数ti，请为村委会寻找最好的集会举办地：p1, p2, p3, p4 (p1&lt;=p2&lt;=p3&lt;=p4=L),使得村内所有人的路程开销和最小。</p>
<p>【输入格式】<br>输入的第一行包含两个整数n, L，分别表示蓝桥村的家庭数和公路长度。<br>接下来n行，每行两个整数di, ti，分别表示第i户家庭距离公路起点的距离和家庭中的人数。</p>
<p>【输出格式】<br>输出一行，包含一个整数，表示村内所有人路程的开销和。<br>【样例输入】<br>6 10<br>1 3<br>2 2<br>4 5<br>5 20<br>6 5<br>8 7<br>【样例输出】<br>18<br>【样例说明】<br>在距起点2, 5, 8, 10这4个地方集会，6个家庭需要的走的距离分别为1, 0, 1, 0, 2, 0，总的路程开销为1<em>3+0</em>2+1<em>5+0</em>20+2<em>5+0</em>7=18。</p>
<p>【数据规模与约定】<br>对于10%的评测数据，1&lt;=n&lt;=300。<br>对于30%的评测数据，1&lt;=n&lt;=2000，1&lt;=L&lt;=10000，0&lt;=di&lt;=L，di&lt;=di+1，0&lt;=ti&lt;=20。<br>对于100%的评测数据，1&lt;=n&lt;=100000，1&lt;=L&lt;=1000000，0&lt;=di&lt;=L，di&lt;=di+1，0&lt;=ti&lt;=1000000。</p>
<p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 512M<br>CPU消耗 &lt; 8000ms</p>
<p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p>
<p>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意：不要使用package语句。不要使用jdk1.7及以上版本的特性。<br>注意：主类的名字必须是：Main，否则按无效代码处理。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Main</span> &#123;</span><br><span class="line">	static <span class="built_in">int</span> n = <span class="number">0</span>, l = <span class="number">0</span>;<span class="comment">// 家庭数和公路长度</span></span><br><span class="line">	static <span class="built_in">int</span>[][] family;<span class="comment">// 家庭距离公路起点的距离和家庭中的人数</span></span><br><span class="line">	static <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">		Scanner scanner = new Scanner(System.<span class="keyword">in</span>);</span><br><span class="line">		n = scanner.nextInt();</span><br><span class="line">		l = scanner.nextInt();</span><br><span class="line">		family = new <span class="built_in">int</span>[n][<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			family[i][<span class="number">0</span>] = scanner.nextInt();</span><br><span class="line">			family[i][<span class="number">1</span>] = scanner.nextInt();</span><br><span class="line">		&#125;</span><br><span class="line">		scanner.close();</span><br><span class="line">		punctuation(l);</span><br><span class="line">		System.<span class="keyword">out</span>.println(sum);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> static <span class="built_in">void</span> punctuation(<span class="built_in">int</span> num) &#123;</span><br><span class="line">		<span class="built_in">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= num; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = i; j &lt;= num; j++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt;= num; k++) &#123;</span><br><span class="line">					tmp = overhead(i, j, k);</span><br><span class="line">					<span class="keyword">if</span> (tmp &lt;= sum) &#123;</span><br><span class="line">						sum = tmp;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> static <span class="built_in">int</span> overhead(<span class="built_in">int</span> i, <span class="built_in">int</span> j, <span class="built_in">int</span> k) &#123;</span><br><span class="line">		<span class="built_in">int</span> number = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">int</span> with = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> l = <span class="number">0</span>; l &lt; n; l++) &#123;</span><br><span class="line">			number = family[l][<span class="number">0</span>];</span><br><span class="line">			<span class="built_in">int</span> contrast = Compared(number, i, j, k);</span><br><span class="line">			with += (contrast - number) * family[l][<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span> &amp;&amp; k == <span class="number">0</span>) &#123;</span><br><span class="line">			sum = with;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> with;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> static <span class="built_in">int</span> Compared(<span class="built_in">int</span> number, <span class="built_in">int</span> i, <span class="built_in">int</span> j, <span class="built_in">int</span> k) &#123;</span><br><span class="line">		<span class="keyword">if</span> (number &lt;= i) &#123;</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (number &lt;= j) &#123;</span><br><span class="line">			<span class="keyword">return</span> j;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (number &lt;= k) &#123;</span><br><span class="line">			<span class="keyword">return</span> k;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (number &lt;= l) &#123;</span><br><span class="line">			<span class="keyword">return</span> l;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>四阶幻方</title>
    <url>/2018/04/07/%E5%9B%9B%E9%98%B6%E5%B9%BB%E6%96%B9-20190406/</url>
    <content><![CDATA[<p>把1~16的数字填入4×4的方格中，使得行、列以及两个对角线的和都相等，满足这样的特征时称为：四阶幻方。<br>四阶幻方可能有很多方案。如果固定左上角为1，请计算一共有多少种方案。<br>比如：<br>1 2 15 16<br>12 14 3 5<br>13 7 10 4<br>8 11 6 9<br>以及：<br>1 12 13 8<br>2 14 7 11<br>15 3 10 6<br>16 5 4 9<br>就可以算为两种不同的方案。<br>请提交左上角固定为1时的所有方案数字，不要填写任何多余内容或说明文字。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Main</span> &#123;</span><br><span class="line">	static <span class="built_in">int</span>[] num = new <span class="built_in">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span> &#125;;</span><br><span class="line">	static <span class="built_in">int</span> su = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">		sun(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> static <span class="built_in">void</span> sun(<span class="built_in">int</span> i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (sum() &amp;&amp; i == num.length) &#123;</span><br><span class="line">			su++;</span><br><span class="line">			System.<span class="keyword">out</span>.println(su);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> j = i; j &lt; num.length; j++) &#123;</span><br><span class="line">			tmp = num[j];</span><br><span class="line">			num[j] = num[i];</span><br><span class="line">			num[i] = tmp;</span><br><span class="line">			sun(i + <span class="number">1</span>);</span><br><span class="line">			tmp = num[j];</span><br><span class="line">			num[j] = num[i];</span><br><span class="line">			num[i] = tmp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span> static <span class="built_in">bool</span>ean sum() &#123;</span><br><span class="line">		<span class="built_in">int</span> tmp = num[<span class="number">0</span>] + num[<span class="number">1</span>] + num[<span class="number">2</span>] + num[<span class="number">3</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; num.length; i += <span class="number">4</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (tmp != num[i] + num[i + <span class="number">1</span>] + num[i + <span class="number">2</span>] + num[i + <span class="number">3</span>])</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (tmp != num[i] + num[i + <span class="number">4</span>] + num[i + <span class="number">8</span>] + num[i + <span class="number">12</span>])</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (tmp != num[<span class="number">0</span>] + num[<span class="number">5</span>] + num[<span class="number">10</span>] + num[<span class="number">15</span>])</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (tmp != num[<span class="number">3</span>] + num[<span class="number">6</span>] + num[<span class="number">9</span>] + num[<span class="number">12</span>])</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>理论有解</p>
<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>胡同门牌号</title>
    <url>/2018/04/06/%E8%83%A1%E5%90%8C%E9%97%A8%E7%89%8C%E5%8F%B7-20190406/</url>
    <content><![CDATA[<p>小明家住在一条胡同里。胡同里的门牌号都是连续的正整数，由于历史原因，最小的号码并不是从1开始排的。<br>有一天小明突然发现了有趣的事情：<br>如果除去小明家不算，胡同里的其它门牌号加起来，刚好是100！<br>并且，小明家的门牌号刚好等于胡同里其它住户的个数！<br>请你根据这些信息，推算小明家的门牌号是多少？<br>请提交该整数，不要填写任何多余的内容或说明性文字。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		<span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">2</span>; <span class="built_in">i</span> &lt; <span class="number">100</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (int <span class="built_in">j</span> = <span class="built_in">i</span> + <span class="number">1</span>; <span class="built_in">j</span> &lt; <span class="number">100</span>; <span class="built_in">j</span>++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (int k = <span class="built_in">i</span>; k &lt;= <span class="built_in">j</span>; k++) &#123;</span><br><span class="line">					<span class="keyword">if</span> ((<span class="built_in">i</span> + <span class="built_in">j</span>) * (<span class="built_in">j</span> - <span class="built_in">i</span> + <span class="number">1</span>) / <span class="number">2</span> - k == <span class="number">100</span> &amp;&amp; k == <span class="built_in">j</span> - <span class="built_in">i</span>) &#123;</span><br><span class="line">						System.out.println(<span class="built_in">i</span> + <span class="string">" "</span> + <span class="built_in">j</span> + <span class="string">" "</span> + k);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>第39级台阶</title>
    <url>/2018/04/05/%E7%AC%AC39%E7%BA%A7%E5%8F%B0%E9%98%B6-20190406/</url>
    <content><![CDATA[<p>小明刚刚看完电影《第39级台阶》，离开电影院的时候，他数了数礼堂前的台阶数，恰好是39级！站在台阶前，他突然又想着一个问题：如果我每一步只能迈上1个或2个台阶。先迈左脚，然后左右交替，最后一步是迈右脚，也就是说一共要走偶数步。那么，上完39级台阶，有多少种不同的上法呢？</p>
<p>请你利用计算机的优势，帮助小明寻找答案。要求提交的是一个整数。</p>
<p>解：</p>
<p>阶乘》递归</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> static <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(pace(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> static <span class="built_in">int</span> pace(<span class="built_in">int</span> step, <span class="built_in">int</span> frequency) &#123;</span><br><span class="line">		<span class="keyword">if</span> (step &gt; <span class="number">39</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (step == <span class="number">39</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (frequency % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">				count++;</span><br><span class="line">				<span class="keyword">return</span> count;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		pace(step + <span class="number">1</span>, frequency + <span class="number">1</span>);</span><br><span class="line">		pace(step + <span class="number">2</span>, frequency + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
